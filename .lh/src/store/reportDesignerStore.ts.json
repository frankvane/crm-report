{
    "sourceFile": "src/store/reportDesignerStore.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1747150569490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747151151259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,12 @@\n   selectedIds: string[];\n   setComponents: (comps: ReportDesignerComponent[]) => void;\n   setSelectedIds: (ids: string[]) => void;\n   addComponent: (comp: ReportDesignerComponent) => void;\n-  updateComponent: (id: string, patch: Partial<ReportDesignerComponent>) => void;\n+  updateComponent: (\n+    id: string,\n+    patch: Partial<ReportDesignerComponent>\n+  ) => void;\n   deleteComponent: (id: string) => void;\n   batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent>) => void;\n   moveComponent: (id: string, x: number, y: number) => void;\n   moveToTop: (id: string) => void;\n"
                },
                {
                    "date": 1747151906999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n       },\n       updateComponent: (id: string, patch: Partial<ReportDesignerComponent>) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n+            console.log('[store] updateComponent', id, patch);\n             const comp = draft.components.find((c) => c.id === id);\n             if (!comp) {\n               console.error(\"updateComponent: 未找到目标组件\", { id, patch });\n               return;\n@@ -131,8 +132,9 @@\n         ),\n       moveComponent: (id: string, x: number, y: number) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n+            console.log('[store] moveComponent', id, x, y);\n             const comp = draft.components.find((c) => c.id === id);\n             if (comp && typeof comp.props === \"object\" && comp.props !== null) {\n               (comp.props as Record<string, any>).x = x;\n               (comp.props as Record<string, any>).y = y;\n"
                },
                {
                    "date": 1747182615079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,36 @@\n   | \"hcenter\"\n   | \"vcenter\";\n export type DistributeType = \"horizontal\" | \"vertical\";\n \n+// 组件类型定义，扁平化属性\n+export type ReportDesignerComponent = {\n+  id: string;\n+  type: string;\n+  // baseProps\n+  x: number;\n+  y: number;\n+  width: number;\n+  height: number;\n+  locked?: boolean;\n+  visible?: boolean;\n+  // commonProps\n+  text?: string;\n+  label?: string;\n+  fontSize?: number;\n+  color?: string;\n+  fontWeight?: \"normal\" | \"bold\" | \"bolder\" | \"lighter\";\n+  textAlign?: \"left\" | \"center\" | \"right\";\n+  // dataProps\n+  source?: string;\n+  field?: string;\n+  format?: \"none\" | \"currency\" | \"date\" | \"percent\";\n+  expression?: string;\n+  mockData?: Record<string, any>;\n+  // 其它扩展属性\n+  [key: string]: any;\n+};\n+\n interface ReportDesignerStoreState {\n   components: ReportDesignerComponent[];\n   selectedIds: string[];\n   setComponents: (comps: ReportDesignerComponent[]) => void;\n@@ -63,44 +91,15 @@\n       },\n       updateComponent: (id: string, patch: Partial<ReportDesignerComponent>) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n-            console.log('[store] updateComponent', id, patch);\n+            console.log(\"[store] updateComponent\", id, patch);\n             const comp = draft.components.find((c) => c.id === id);\n             if (!comp) {\n               console.error(\"updateComponent: 未找到目标组件\", { id, patch });\n               return;\n             }\n-            // props 合并\n-            if (\n-              patch.props &&\n-              typeof patch.props === \"object\" &&\n-              patch.props !== null\n-            ) {\n-              // 保证 comp.props 一定是对象\n-              if (!comp.props || typeof comp.props !== \"object\") {\n-                comp.props = {};\n-                console.warn(\n-                  \"updateComponent: comp.props为undefined，已自动初始化为空对象\",\n-                  { id, patch }\n-                );\n-              }\n-              try {\n-                Object.assign(\n-                  comp.props as Record<string, any>,\n-                  patch.props as Record<string, any>\n-                );\n-              } catch (err) {\n-                console.error(\"updateComponent: Object.assign异常\", {\n-                  comp,\n-                  patch,\n-                  err,\n-                });\n-              }\n-            }\n-            // 其他字段合并\n-            if (patch.id) comp.id = patch.id;\n-            if (patch.type) comp.type = patch.type;\n+            Object.assign(comp, patch);\n           })\n         ),\n       deleteComponent: (id: string) =>\n         set(\n@@ -113,32 +112,21 @@\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             draft.components.forEach((c) => {\n               if (ids.includes(c.id)) {\n-                if (\n-                  patch.props &&\n-                  typeof patch.props === \"object\" &&\n-                  patch.props !== null\n-                ) {\n-                  Object.assign(\n-                    c.props as Record<string, any>,\n-                    patch.props as Record<string, any>\n-                  );\n-                }\n-                if (patch.id) c.id = patch.id;\n-                if (patch.type) c.type = patch.type;\n+                Object.assign(c, patch);\n               }\n             });\n           })\n         ),\n       moveComponent: (id: string, x: number, y: number) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n-            console.log('[store] moveComponent', id, x, y);\n+            console.log(\"[store] moveComponent\", id, x, y);\n             const comp = draft.components.find((c) => c.id === id);\n-            if (comp && typeof comp.props === \"object\" && comp.props !== null) {\n-              (comp.props as Record<string, any>).x = x;\n-              (comp.props as Record<string, any>).y = y;\n+            if (comp) {\n+              comp.x = x;\n+              comp.y = y;\n             }\n           })\n         ),\n       moveToTop: (id: string) =>\n@@ -162,23 +150,19 @@\n       toggleLock: (id: string) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             const comp = draft.components.find((c) => c.id === id);\n-            if (comp && typeof comp.props === \"object\" && comp.props !== null) {\n-              (comp.props as Record<string, any>).locked = !(\n-                comp.props as Record<string, any>\n-              ).locked;\n+            if (comp) {\n+              comp.locked = !comp.locked;\n             }\n           })\n         ),\n       toggleVisible: (id: string) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             const comp = draft.components.find((c) => c.id === id);\n-            if (comp && typeof comp.props === \"object\" && comp.props !== null) {\n-              (comp.props as Record<string, any>).visible = !(\n-                comp.props as Record<string, any>\n-              ).visible;\n+            if (comp) {\n+              comp.visible = !comp.visible;\n             }\n           })\n         ),\n       // 批量对齐\n"
                },
                {
                    "date": 1747182837262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,48 +13,30 @@\n   | \"hcenter\"\n   | \"vcenter\";\n export type DistributeType = \"horizontal\" | \"vertical\";\n \n-// 组件类型定义，扁平化属性\n-export type ReportDesignerComponent = {\n+// 组件类型定义，基础属性+props模式\n+export interface ReportDesignerComponent {\n   id: string;\n   type: string;\n-  // baseProps\n   x: number;\n   y: number;\n   width: number;\n   height: number;\n   locked?: boolean;\n   visible?: boolean;\n-  // commonProps\n-  text?: string;\n-  label?: string;\n-  fontSize?: number;\n-  color?: string;\n-  fontWeight?: \"normal\" | \"bold\" | \"bolder\" | \"lighter\";\n-  textAlign?: \"left\" | \"center\" | \"right\";\n-  // dataProps\n-  source?: string;\n-  field?: string;\n-  format?: \"none\" | \"currency\" | \"date\" | \"percent\";\n-  expression?: string;\n-  mockData?: Record<string, any>;\n-  // 其它扩展属性\n-  [key: string]: any;\n-};\n+  props: Record<string, any>; // 组件专属属性\n+}\n \n interface ReportDesignerStoreState {\n   components: ReportDesignerComponent[];\n   selectedIds: string[];\n   setComponents: (comps: ReportDesignerComponent[]) => void;\n   setSelectedIds: (ids: string[]) => void;\n   addComponent: (comp: ReportDesignerComponent) => void;\n-  updateComponent: (\n-    id: string,\n-    patch: Partial<ReportDesignerComponent>\n-  ) => void;\n+  updateComponent: (id: string, patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }) => void;\n   deleteComponent: (id: string) => void;\n-  batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent>) => void;\n+  batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }) => void;\n   moveComponent: (id: string, x: number, y: number) => void;\n   moveToTop: (id: string) => void;\n   moveToBottom: (id: string) => void;\n   toggleLock: (id: string) => void;\n@@ -88,18 +70,23 @@\n             draft.components.push(comp);\n           })\n         );\n       },\n-      updateComponent: (id: string, patch: Partial<ReportDesignerComponent>) =>\n+      updateComponent: (id: string, patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             console.log(\"[store] updateComponent\", id, patch);\n             const comp = draft.components.find((c) => c.id === id);\n             if (!comp) {\n               console.error(\"updateComponent: 未找到目标组件\", { id, patch });\n               return;\n             }\n+            // 合并基础属性\n             Object.assign(comp, patch);\n+            // 合并props属性\n+            if (patch.props && typeof patch.props === \"object\") {\n+              comp.props = { ...comp.props, ...patch.props };\n+            }\n           })\n         ),\n       deleteComponent: (id: string) =>\n         set(\n@@ -107,14 +94,17 @@\n             draft.components = draft.components.filter((c) => c.id !== id);\n             draft.selectedIds = draft.selectedIds.filter((sid) => sid !== id);\n           })\n         ),\n-      batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent>) =>\n+      batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             draft.components.forEach((c) => {\n               if (ids.includes(c.id)) {\n                 Object.assign(c, patch);\n+                if (patch.props && typeof patch.props === \"object\") {\n+                  c.props = { ...c.props, ...patch.props };\n+                }\n               }\n             });\n           })\n         ),\n"
                },
                {
                    "date": 1747182853931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,17 @@\n   selectedIds: string[];\n   setComponents: (comps: ReportDesignerComponent[]) => void;\n   setSelectedIds: (ids: string[]) => void;\n   addComponent: (comp: ReportDesignerComponent) => void;\n-  updateComponent: (id: string, patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }) => void;\n+  updateComponent: (\n+    id: string,\n+    patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }\n+  ) => void;\n   deleteComponent: (id: string) => void;\n-  batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }) => void;\n+  batchUpdate: (\n+    ids: string[],\n+    patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }\n+  ) => void;\n   moveComponent: (id: string, x: number, y: number) => void;\n   moveToTop: (id: string) => void;\n   moveToBottom: (id: string) => void;\n   toggleLock: (id: string) => void;\n@@ -70,9 +76,14 @@\n             draft.components.push(comp);\n           })\n         );\n       },\n-      updateComponent: (id: string, patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }) =>\n+      updateComponent: (\n+        id: string,\n+        patch: Partial<ReportDesignerComponent> & {\n+          props?: Record<string, any>;\n+        }\n+      ) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             console.log(\"[store] updateComponent\", id, patch);\n             const comp = draft.components.find((c) => c.id === id);\n@@ -94,9 +105,14 @@\n             draft.components = draft.components.filter((c) => c.id !== id);\n             draft.selectedIds = draft.selectedIds.filter((sid) => sid !== id);\n           })\n         ),\n-      batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent> & { props?: Record<string, any> }) =>\n+      batchUpdate: (\n+        ids: string[],\n+        patch: Partial<ReportDesignerComponent> & {\n+          props?: Record<string, any>;\n+        }\n+      ) =>\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             draft.components.forEach((c) => {\n               if (ids.includes(c.id)) {\n"
                },
                {
                    "date": 1747182905124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { Draft, produce } from \"immer\";\n \n-import type { CanvasComponent as ReportDesignerComponent } from \"@/components/report/ReportDesigner/types\";\n import { create } from \"zustand\";\n import { devtools } from \"zustand/middleware\";\n \n // 对齐类型\n@@ -94,9 +93,11 @@\n             // 合并基础属性\n             Object.assign(comp, patch);\n             // 合并props属性\n             if (patch.props && typeof patch.props === \"object\") {\n-              comp.props = { ...comp.props, ...patch.props };\n+              const oldProps =\n+                comp.props && typeof comp.props === \"object\" ? comp.props : {};\n+              comp.props = { ...oldProps, ...patch.props };\n             }\n           })\n         ),\n       deleteComponent: (id: string) =>\n@@ -117,9 +118,11 @@\n             draft.components.forEach((c) => {\n               if (ids.includes(c.id)) {\n                 Object.assign(c, patch);\n                 if (patch.props && typeof patch.props === \"object\") {\n-                  c.props = { ...c.props, ...patch.props };\n+                  const oldProps =\n+                    c.props && typeof c.props === \"object\" ? c.props : {};\n+                  c.props = { ...oldProps, ...patch.props };\n                 }\n               }\n             });\n           })\n"
                },
                {
                    "date": 1747187559605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,179 +176,72 @@\n         ),\n       // 批量对齐\n       batchAlign: (type) => {\n         const { components, selectedIds } = get();\n-        const selectedComps = components.filter((c) =>\n-          selectedIds.includes(c.id)\n-        );\n+        const selectedComps = components.filter((c) => selectedIds.includes(c.id));\n         if (selectedComps.length < 2) return;\n+        let value;\n+        switch (type) {\n+          case \"left\":\n+            value = Math.min(...selectedComps.map((c) => c.props?.x ?? 0));\n+            selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.x = value; });\n+            break;\n+          case \"right\":\n+            value = Math.max(...selectedComps.map((c) => (c.props?.x ?? 0) + (c.props?.width ?? 120)));\n+            selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.x = value - (c.props.width ?? 120); });\n+            break;\n+          case \"top\":\n+            value = Math.min(...selectedComps.map((c) => c.props?.y ?? 0));\n+            selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.y = value; });\n+            break;\n+          case \"bottom\":\n+            value = Math.max(...selectedComps.map((c) => (c.props?.y ?? 0) + (c.props?.height ?? 40)));\n+            selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.y = value - (c.props.height ?? 40); });\n+            break;\n+          case \"hcenter\":\n+            value = Math.round(\n+              (Math.min(...selectedComps.map((c) => c.props?.x ?? 0)) +\n+                Math.max(...selectedComps.map((c) => (c.props?.x ?? 0) + (c.props?.width ?? 120)))) /\n+                2\n+            );\n+            selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.x = value - Math.round((c.props.width ?? 120) / 2); });\n+            break;\n+          case \"vcenter\":\n+            value = Math.round(\n+              (Math.min(...selectedComps.map((c) => c.props?.y ?? 0)) +\n+                Math.max(...selectedComps.map((c) => (c.props?.y ?? 0) + (c.props?.height ?? 40)))) /\n+                2\n+            );\n+            selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.y = value - Math.round((c.props.height ?? 40) / 2); });\n+            break;\n+        }\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n-            let updates: { id: string; x: number; y: number }[] = [];\n-            if (type === \"left\") {\n-              const minX = Math.min(\n-                ...selectedComps.map(\n-                  (c) => Number((c.props as Record<string, any>).x) || 0\n-                )\n-              );\n-              updates = selectedComps.map((c) => ({\n-                id: c.id,\n-                x: minX,\n-                y: Number((c.props as Record<string, any>).y) || 0,\n-              }));\n-            } else if (type === \"right\") {\n-              const maxX = Math.max(\n-                ...selectedComps.map(\n-                  (c) =>\n-                    Number((c.props as Record<string, any>).x) +\n-                    (Number((c.props as Record<string, any>).width) || 0)\n-                )\n-              );\n-              updates = selectedComps.map((c) => ({\n-                id: c.id,\n-                x: maxX - (Number((c.props as Record<string, any>).width) || 0),\n-                y: Number((c.props as Record<string, any>).y) || 0,\n-              }));\n-            } else if (type === \"top\") {\n-              const minY = Math.min(\n-                ...selectedComps.map(\n-                  (c) => Number((c.props as Record<string, any>).y) || 0\n-                )\n-              );\n-              updates = selectedComps.map((c) => ({\n-                id: c.id,\n-                x: Number((c.props as Record<string, any>).x) || 0,\n-                y: minY,\n-              }));\n-            } else if (type === \"bottom\") {\n-              const maxY = Math.max(\n-                ...selectedComps.map(\n-                  (c) =>\n-                    Number((c.props as Record<string, any>).y) +\n-                    (Number((c.props as Record<string, any>).height) || 0)\n-                )\n-              );\n-              updates = selectedComps.map((c) => ({\n-                id: c.id,\n-                x: Number((c.props as Record<string, any>).x) || 0,\n-                y:\n-                  maxY - (Number((c.props as Record<string, any>).height) || 0),\n-              }));\n-            } else if (type === \"hcenter\") {\n-              const center = Math.round(\n-                selectedComps.reduce(\n-                  (sum, c) =>\n-                    sum +\n-                    Number((c.props as Record<string, any>).x) +\n-                    (Number((c.props as Record<string, any>).width) || 0) / 2,\n-                  0\n-                ) / selectedComps.length\n-              );\n-              updates = selectedComps.map((c) => ({\n-                id: c.id,\n-                x:\n-                  center -\n-                  (Number((c.props as Record<string, any>).width) || 0) / 2,\n-                y: Number((c.props as Record<string, any>).y) || 0,\n-              }));\n-            } else if (type === \"vcenter\") {\n-              const center = Math.round(\n-                selectedComps.reduce(\n-                  (sum, c) =>\n-                    sum +\n-                    Number((c.props as Record<string, any>).y) +\n-                    (Number((c.props as Record<string, any>).height) || 0) / 2,\n-                  0\n-                ) / selectedComps.length\n-              );\n-              updates = selectedComps.map((c) => ({\n-                id: c.id,\n-                x: Number((c.props as Record<string, any>).x) || 0,\n-                y:\n-                  center -\n-                  (Number((c.props as Record<string, any>).height) || 0) / 2,\n-              }));\n-            }\n-            updates.forEach((u) => {\n-              const comp = draft.components.find((c) => c.id === u.id);\n-              if (\n-                comp &&\n-                typeof comp.props === \"object\" &&\n-                comp.props !== null\n-              ) {\n-                (comp.props as Record<string, any>).x = u.x;\n-                (comp.props as Record<string, any>).y = u.y;\n-              }\n-            });\n+            draft.components = [...components]; // 触发zustand更新\n           })\n         );\n       },\n       // 批量分布\n       batchDistribute: (type) => {\n-        const { selectedIds } = get();\n-        const selectedComps = get()\n-          .components.filter((c) => selectedIds.includes(c.id))\n-          .sort((a, b) =>\n-            type === \"horizontal\"\n-              ? Number((a.props as Record<string, any>).x) -\n-                Number((b.props as Record<string, any>).x)\n-              : Number((a.props as Record<string, any>).y) -\n-                Number((b.props as Record<string, any>).y)\n-          );\n+        const { selectedIds, components } = get();\n+        const selectedComps = components.filter((c) => selectedIds.includes(c.id));\n         if (selectedComps.length < 3) return;\n+        if (type === \"horizontal\") {\n+          const sorted = [...selectedComps].sort((a, b) => (a.props?.x ?? 0) - (b.props?.x ?? 0));\n+          const left = sorted[0].props?.x ?? 0;\n+          const right = sorted[sorted.length - 1].props?.x ?? 0;\n+          const gap = (right - left) / (sorted.length - 1);\n+          sorted.forEach((c, i) => { if (!c.props) c.props = {}; c.props.x = Math.round(left + i * gap); });\n+        } else if (type === \"vertical\") {\n+          const sorted = [...selectedComps].sort((a, b) => (a.props?.y ?? 0) - (b.props?.y ?? 0));\n+          const top = sorted[0].props?.y ?? 0;\n+          const bottom = sorted[sorted.length - 1].props?.y ?? 0;\n+          const gap = (bottom - top) / (sorted.length - 1);\n+          sorted.forEach((c, i) => { if (!c.props) c.props = {}; c.props.y = Math.round(top + i * gap); });\n+        }\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n-            if (type === \"horizontal\") {\n-              const left =\n-                Number((selectedComps[0].props as Record<string, any>).x) || 0;\n-              const right =\n-                Number(\n-                  (\n-                    selectedComps[selectedComps.length - 1].props as Record<\n-                      string,\n-                      any\n-                    >\n-                  ).x\n-                ) || 0;\n-              const gap = (right - left) / (selectedComps.length - 1);\n-              draft.components.forEach((c) => {\n-                const idx = selectedComps.findIndex((sc) => sc.id === c.id);\n-                if (\n-                  idx !== -1 &&\n-                  typeof c.props === \"object\" &&\n-                  c.props !== null\n-                ) {\n-                  (c.props as Record<string, any>).x = Math.round(\n-                    left + idx * gap\n-                  );\n-                }\n-              });\n-            } else {\n-              const top =\n-                Number((selectedComps[0].props as Record<string, any>).y) || 0;\n-              const bottom =\n-                Number(\n-                  (\n-                    selectedComps[selectedComps.length - 1].props as Record<\n-                      string,\n-                      any\n-                    >\n-                  ).y\n-                ) || 0;\n-              const gap = (bottom - top) / (selectedComps.length - 1);\n-              draft.components.forEach((c) => {\n-                const idx = selectedComps.findIndex((sc) => sc.id === c.id);\n-                if (\n-                  idx !== -1 &&\n-                  typeof c.props === \"object\" &&\n-                  c.props !== null\n-                ) {\n-                  (c.props as Record<string, any>).y = Math.round(\n-                    top + idx * gap\n-                  );\n-                }\n-              });\n-            }\n+            draft.components = [...components]; // 触发zustand更新\n           })\n         );\n       },\n       // 批量锁定\n@@ -356,15 +249,11 @@\n         const { selectedIds } = get();\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             draft.components.forEach((c) => {\n-              if (\n-                selectedIds.includes(c.id) &&\n-                typeof c.props === \"object\" &&\n-                c.props !== null &&\n-                !!(c.props as Record<string, any>).locked !== locked\n-              ) {\n-                (c.props as Record<string, any>).locked = locked;\n+              if (selectedIds.includes(c.id)) {\n+                if (!c.props) c.props = {};\n+                c.props.locked = locked;\n               }\n             });\n           })\n         );\n@@ -374,15 +263,11 @@\n         const { selectedIds } = get();\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n             draft.components.forEach((c) => {\n-              if (\n-                selectedIds.includes(c.id) &&\n-                typeof c.props === \"object\" &&\n-                c.props !== null &&\n-                !!(c.props as Record<string, any>).visible !== visible\n-              ) {\n-                (c.props as Record<string, any>).visible = visible;\n+              if (selectedIds.includes(c.id)) {\n+                if (!c.props) c.props = {};\n+                c.props.visible = visible;\n               }\n             });\n           })\n         );\n"
                },
                {
                    "date": 1747187674805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,121 +175,71 @@\n           })\n         ),\n       // 批量对齐\n       batchAlign: (type) => {\n-        const { components, selectedIds } = get();\n-        const selectedComps = components.filter((c) =>\n-          selectedIds.includes(c.id)\n-        );\n-        if (selectedComps.length < 2) return;\n-        let value;\n-        switch (type) {\n-          case \"left\":\n-            value = Math.min(...selectedComps.map((c) => c.props?.x ?? 0));\n-            selectedComps.forEach((c) => {\n-              if (!c.props) c.props = {};\n-              c.props.x = value;\n-            });\n-            break;\n-          case \"right\":\n-            value = Math.max(\n-              ...selectedComps.map(\n-                (c) => (c.props?.x ?? 0) + (c.props?.width ?? 120)\n-              )\n-            );\n-            selectedComps.forEach((c) => {\n-              if (!c.props) c.props = {};\n-              c.props.x = value - (c.props.width ?? 120);\n-            });\n-            break;\n-          case \"top\":\n-            value = Math.min(...selectedComps.map((c) => c.props?.y ?? 0));\n-            selectedComps.forEach((c) => {\n-              if (!c.props) c.props = {};\n-              c.props.y = value;\n-            });\n-            break;\n-          case \"bottom\":\n-            value = Math.max(\n-              ...selectedComps.map(\n-                (c) => (c.props?.y ?? 0) + (c.props?.height ?? 40)\n-              )\n-            );\n-            selectedComps.forEach((c) => {\n-              if (!c.props) c.props = {};\n-              c.props.y = value - (c.props.height ?? 40);\n-            });\n-            break;\n-          case \"hcenter\":\n-            value = Math.round(\n-              (Math.min(...selectedComps.map((c) => c.props?.x ?? 0)) +\n-                Math.max(\n-                  ...selectedComps.map(\n-                    (c) => (c.props?.x ?? 0) + (c.props?.width ?? 120)\n-                  )\n-                )) /\n-                2\n-            );\n-            selectedComps.forEach((c) => {\n-              if (!c.props) c.props = {};\n-              c.props.x = value - Math.round((c.props.width ?? 120) / 2);\n-            });\n-            break;\n-          case \"vcenter\":\n-            value = Math.round(\n-              (Math.min(...selectedComps.map((c) => c.props?.y ?? 0)) +\n-                Math.max(\n-                  ...selectedComps.map(\n-                    (c) => (c.props?.y ?? 0) + (c.props?.height ?? 40)\n-                  )\n-                )) /\n-                2\n-            );\n-            selectedComps.forEach((c) => {\n-              if (!c.props) c.props = {};\n-              c.props.y = value - Math.round((c.props.height ?? 40) / 2);\n-            });\n-            break;\n-        }\n+        const { selectedIds } = get();\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n-            draft.components = [...components]; // 触发zustand更新\n+            const selectedComps = draft.components.filter((c) => selectedIds.includes(c.id));\n+            if (selectedComps.length < 2) return;\n+            let value: number = 0;\n+            switch (type) {\n+              case \"left\":\n+                value = Math.min(...selectedComps.map((c) => c.props?.x ?? 0));\n+                selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.x = value; });\n+                break;\n+              case \"right\":\n+                value = Math.max(...selectedComps.map((c) => (c.props?.x ?? 0) + (c.props?.width ?? 120)));\n+                selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.x = value - (c.props.width ?? 120); });\n+                break;\n+              case \"top\":\n+                value = Math.min(...selectedComps.map((c) => c.props?.y ?? 0));\n+                selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.y = value; });\n+                break;\n+              case \"bottom\":\n+                value = Math.max(...selectedComps.map((c) => (c.props?.y ?? 0) + (c.props?.height ?? 40)));\n+                selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.y = value - (c.props.height ?? 40); });\n+                break;\n+              case \"hcenter\":\n+                value = Math.round(\n+                  (Math.min(...selectedComps.map((c) => c.props?.x ?? 0)) +\n+                    Math.max(...selectedComps.map((c) => (c.props?.x ?? 0) + (c.props?.width ?? 120)))) /\n+                    2\n+                );\n+                selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.x = value - Math.round((c.props.width ?? 120) / 2); });\n+                break;\n+              case \"vcenter\":\n+                value = Math.round(\n+                  (Math.min(...selectedComps.map((c) => c.props?.y ?? 0)) +\n+                    Math.max(...selectedComps.map((c) => (c.props?.y ?? 0) + (c.props?.height ?? 40)))) /\n+                    2\n+                );\n+                selectedComps.forEach((c) => { if (!c.props) c.props = {}; c.props.y = value - Math.round((c.props.height ?? 40) / 2); });\n+                break;\n+            }\n           })\n         );\n       },\n       // 批量分布\n       batchDistribute: (type) => {\n-        const { selectedIds, components } = get();\n-        const selectedComps = components.filter((c) =>\n-          selectedIds.includes(c.id)\n-        );\n-        if (selectedComps.length < 3) return;\n-        if (type === \"horizontal\") {\n-          const sorted = [...selectedComps].sort(\n-            (a, b) => (a.props?.x ?? 0) - (b.props?.x ?? 0)\n-          );\n-          const left = sorted[0].props?.x ?? 0;\n-          const right = sorted[sorted.length - 1].props?.x ?? 0;\n-          const gap = (right - left) / (sorted.length - 1);\n-          sorted.forEach((c, i) => {\n-            if (!c.props) c.props = {};\n-            c.props.x = Math.round(left + i * gap);\n-          });\n-        } else if (type === \"vertical\") {\n-          const sorted = [...selectedComps].sort(\n-            (a, b) => (a.props?.y ?? 0) - (b.props?.y ?? 0)\n-          );\n-          const top = sorted[0].props?.y ?? 0;\n-          const bottom = sorted[sorted.length - 1].props?.y ?? 0;\n-          const gap = (bottom - top) / (sorted.length - 1);\n-          sorted.forEach((c, i) => {\n-            if (!c.props) c.props = {};\n-            c.props.y = Math.round(top + i * gap);\n-          });\n-        }\n+        const { selectedIds } = get();\n         set(\n           produce((draft: Draft<ReportDesignerStoreState>) => {\n-            draft.components = [...components]; // 触发zustand更新\n+            const selectedComps = draft.components.filter((c) => selectedIds.includes(c.id));\n+            if (selectedComps.length < 3) return;\n+            if (type === \"horizontal\") {\n+              const sorted = [...selectedComps].sort((a, b) => (a.props?.x ?? 0) - (b.props?.x ?? 0));\n+              const left = sorted[0].props?.x ?? 0;\n+              const right = sorted[sorted.length - 1].props?.x ?? 0;\n+              const gap = (right - left) / (sorted.length - 1);\n+              sorted.forEach((c, i) => { if (!c.props) c.props = {}; c.props.x = Math.round(left + i * gap); });\n+            } else if (type === \"vertical\") {\n+              const sorted = [...selectedComps].sort((a, b) => (a.props?.y ?? 0) - (b.props?.y ?? 0));\n+              const top = sorted[0].props?.y ?? 0;\n+              const bottom = sorted[sorted.length - 1].props?.y ?? 0;\n+              const gap = (bottom - top) / (sorted.length - 1);\n+              sorted.forEach((c, i) => { if (!c.props) c.props = {}; c.props.y = Math.round(top + i * gap); });\n+            }\n           })\n         );\n       },\n       // 批量锁定\n"
                }
            ],
            "date": 1747150569490,
            "name": "Commit-0",
            "content": "import { Draft, produce } from \"immer\";\n\nimport type { CanvasComponent as ReportDesignerComponent } from \"@/components/report/ReportDesigner/types\";\nimport { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\n\n// 对齐类型\nexport type AlignType =\n  | \"left\"\n  | \"right\"\n  | \"top\"\n  | \"bottom\"\n  | \"hcenter\"\n  | \"vcenter\";\nexport type DistributeType = \"horizontal\" | \"vertical\";\n\ninterface ReportDesignerStoreState {\n  components: ReportDesignerComponent[];\n  selectedIds: string[];\n  setComponents: (comps: ReportDesignerComponent[]) => void;\n  setSelectedIds: (ids: string[]) => void;\n  addComponent: (comp: ReportDesignerComponent) => void;\n  updateComponent: (id: string, patch: Partial<ReportDesignerComponent>) => void;\n  deleteComponent: (id: string) => void;\n  batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent>) => void;\n  moveComponent: (id: string, x: number, y: number) => void;\n  moveToTop: (id: string) => void;\n  moveToBottom: (id: string) => void;\n  toggleLock: (id: string) => void;\n  toggleVisible: (id: string) => void;\n  batchAlign: (type: AlignType) => void;\n  batchDistribute: (type: DistributeType) => void;\n  batchLock: (locked: boolean) => void;\n  batchVisible: (visible: boolean) => void;\n}\n\nexport const useReportDesignerStore = create<ReportDesignerStoreState>()(\n  devtools(\n    (set, get) => ({\n      components: [],\n      selectedIds: [],\n      setComponents: (comps: ReportDesignerComponent[]) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            draft.components = comps;\n          })\n        ),\n      setSelectedIds: (ids: string[]) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            draft.selectedIds = ids;\n          })\n        ),\n      addComponent: (comp) => {\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            draft.components.push(comp);\n          })\n        );\n      },\n      updateComponent: (id: string, patch: Partial<ReportDesignerComponent>) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            const comp = draft.components.find((c) => c.id === id);\n            if (!comp) {\n              console.error(\"updateComponent: 未找到目标组件\", { id, patch });\n              return;\n            }\n            // props 合并\n            if (\n              patch.props &&\n              typeof patch.props === \"object\" &&\n              patch.props !== null\n            ) {\n              // 保证 comp.props 一定是对象\n              if (!comp.props || typeof comp.props !== \"object\") {\n                comp.props = {};\n                console.warn(\n                  \"updateComponent: comp.props为undefined，已自动初始化为空对象\",\n                  { id, patch }\n                );\n              }\n              try {\n                Object.assign(\n                  comp.props as Record<string, any>,\n                  patch.props as Record<string, any>\n                );\n              } catch (err) {\n                console.error(\"updateComponent: Object.assign异常\", {\n                  comp,\n                  patch,\n                  err,\n                });\n              }\n            }\n            // 其他字段合并\n            if (patch.id) comp.id = patch.id;\n            if (patch.type) comp.type = patch.type;\n          })\n        ),\n      deleteComponent: (id: string) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            draft.components = draft.components.filter((c) => c.id !== id);\n            draft.selectedIds = draft.selectedIds.filter((sid) => sid !== id);\n          })\n        ),\n      batchUpdate: (ids: string[], patch: Partial<ReportDesignerComponent>) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            draft.components.forEach((c) => {\n              if (ids.includes(c.id)) {\n                if (\n                  patch.props &&\n                  typeof patch.props === \"object\" &&\n                  patch.props !== null\n                ) {\n                  Object.assign(\n                    c.props as Record<string, any>,\n                    patch.props as Record<string, any>\n                  );\n                }\n                if (patch.id) c.id = patch.id;\n                if (patch.type) c.type = patch.type;\n              }\n            });\n          })\n        ),\n      moveComponent: (id: string, x: number, y: number) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            const comp = draft.components.find((c) => c.id === id);\n            if (comp && typeof comp.props === \"object\" && comp.props !== null) {\n              (comp.props as Record<string, any>).x = x;\n              (comp.props as Record<string, any>).y = y;\n            }\n          })\n        ),\n      moveToTop: (id: string) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            const idx = draft.components.findIndex((c) => c.id === id);\n            if (idx === -1) return;\n            const [comp] = draft.components.splice(idx, 1);\n            draft.components.push(comp);\n          })\n        ),\n      moveToBottom: (id: string) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            const idx = draft.components.findIndex((c) => c.id === id);\n            if (idx === -1) return;\n            const [comp] = draft.components.splice(idx, 1);\n            draft.components.unshift(comp);\n          })\n        ),\n      toggleLock: (id: string) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            const comp = draft.components.find((c) => c.id === id);\n            if (comp && typeof comp.props === \"object\" && comp.props !== null) {\n              (comp.props as Record<string, any>).locked = !(\n                comp.props as Record<string, any>\n              ).locked;\n            }\n          })\n        ),\n      toggleVisible: (id: string) =>\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            const comp = draft.components.find((c) => c.id === id);\n            if (comp && typeof comp.props === \"object\" && comp.props !== null) {\n              (comp.props as Record<string, any>).visible = !(\n                comp.props as Record<string, any>\n              ).visible;\n            }\n          })\n        ),\n      // 批量对齐\n      batchAlign: (type) => {\n        const { components, selectedIds } = get();\n        const selectedComps = components.filter((c) =>\n          selectedIds.includes(c.id)\n        );\n        if (selectedComps.length < 2) return;\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            let updates: { id: string; x: number; y: number }[] = [];\n            if (type === \"left\") {\n              const minX = Math.min(\n                ...selectedComps.map(\n                  (c) => Number((c.props as Record<string, any>).x) || 0\n                )\n              );\n              updates = selectedComps.map((c) => ({\n                id: c.id,\n                x: minX,\n                y: Number((c.props as Record<string, any>).y) || 0,\n              }));\n            } else if (type === \"right\") {\n              const maxX = Math.max(\n                ...selectedComps.map(\n                  (c) =>\n                    Number((c.props as Record<string, any>).x) +\n                    (Number((c.props as Record<string, any>).width) || 0)\n                )\n              );\n              updates = selectedComps.map((c) => ({\n                id: c.id,\n                x: maxX - (Number((c.props as Record<string, any>).width) || 0),\n                y: Number((c.props as Record<string, any>).y) || 0,\n              }));\n            } else if (type === \"top\") {\n              const minY = Math.min(\n                ...selectedComps.map(\n                  (c) => Number((c.props as Record<string, any>).y) || 0\n                )\n              );\n              updates = selectedComps.map((c) => ({\n                id: c.id,\n                x: Number((c.props as Record<string, any>).x) || 0,\n                y: minY,\n              }));\n            } else if (type === \"bottom\") {\n              const maxY = Math.max(\n                ...selectedComps.map(\n                  (c) =>\n                    Number((c.props as Record<string, any>).y) +\n                    (Number((c.props as Record<string, any>).height) || 0)\n                )\n              );\n              updates = selectedComps.map((c) => ({\n                id: c.id,\n                x: Number((c.props as Record<string, any>).x) || 0,\n                y:\n                  maxY - (Number((c.props as Record<string, any>).height) || 0),\n              }));\n            } else if (type === \"hcenter\") {\n              const center = Math.round(\n                selectedComps.reduce(\n                  (sum, c) =>\n                    sum +\n                    Number((c.props as Record<string, any>).x) +\n                    (Number((c.props as Record<string, any>).width) || 0) / 2,\n                  0\n                ) / selectedComps.length\n              );\n              updates = selectedComps.map((c) => ({\n                id: c.id,\n                x:\n                  center -\n                  (Number((c.props as Record<string, any>).width) || 0) / 2,\n                y: Number((c.props as Record<string, any>).y) || 0,\n              }));\n            } else if (type === \"vcenter\") {\n              const center = Math.round(\n                selectedComps.reduce(\n                  (sum, c) =>\n                    sum +\n                    Number((c.props as Record<string, any>).y) +\n                    (Number((c.props as Record<string, any>).height) || 0) / 2,\n                  0\n                ) / selectedComps.length\n              );\n              updates = selectedComps.map((c) => ({\n                id: c.id,\n                x: Number((c.props as Record<string, any>).x) || 0,\n                y:\n                  center -\n                  (Number((c.props as Record<string, any>).height) || 0) / 2,\n              }));\n            }\n            updates.forEach((u) => {\n              const comp = draft.components.find((c) => c.id === u.id);\n              if (\n                comp &&\n                typeof comp.props === \"object\" &&\n                comp.props !== null\n              ) {\n                (comp.props as Record<string, any>).x = u.x;\n                (comp.props as Record<string, any>).y = u.y;\n              }\n            });\n          })\n        );\n      },\n      // 批量分布\n      batchDistribute: (type) => {\n        const { selectedIds } = get();\n        const selectedComps = get()\n          .components.filter((c) => selectedIds.includes(c.id))\n          .sort((a, b) =>\n            type === \"horizontal\"\n              ? Number((a.props as Record<string, any>).x) -\n                Number((b.props as Record<string, any>).x)\n              : Number((a.props as Record<string, any>).y) -\n                Number((b.props as Record<string, any>).y)\n          );\n        if (selectedComps.length < 3) return;\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            if (type === \"horizontal\") {\n              const left =\n                Number((selectedComps[0].props as Record<string, any>).x) || 0;\n              const right =\n                Number(\n                  (\n                    selectedComps[selectedComps.length - 1].props as Record<\n                      string,\n                      any\n                    >\n                  ).x\n                ) || 0;\n              const gap = (right - left) / (selectedComps.length - 1);\n              draft.components.forEach((c) => {\n                const idx = selectedComps.findIndex((sc) => sc.id === c.id);\n                if (\n                  idx !== -1 &&\n                  typeof c.props === \"object\" &&\n                  c.props !== null\n                ) {\n                  (c.props as Record<string, any>).x = Math.round(\n                    left + idx * gap\n                  );\n                }\n              });\n            } else {\n              const top =\n                Number((selectedComps[0].props as Record<string, any>).y) || 0;\n              const bottom =\n                Number(\n                  (\n                    selectedComps[selectedComps.length - 1].props as Record<\n                      string,\n                      any\n                    >\n                  ).y\n                ) || 0;\n              const gap = (bottom - top) / (selectedComps.length - 1);\n              draft.components.forEach((c) => {\n                const idx = selectedComps.findIndex((sc) => sc.id === c.id);\n                if (\n                  idx !== -1 &&\n                  typeof c.props === \"object\" &&\n                  c.props !== null\n                ) {\n                  (c.props as Record<string, any>).y = Math.round(\n                    top + idx * gap\n                  );\n                }\n              });\n            }\n          })\n        );\n      },\n      // 批量锁定\n      batchLock: (locked) => {\n        const { selectedIds } = get();\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            draft.components.forEach((c) => {\n              if (\n                selectedIds.includes(c.id) &&\n                typeof c.props === \"object\" &&\n                c.props !== null &&\n                !!(c.props as Record<string, any>).locked !== locked\n              ) {\n                (c.props as Record<string, any>).locked = locked;\n              }\n            });\n          })\n        );\n      },\n      // 批量显示/隐藏\n      batchVisible: (visible) => {\n        const { selectedIds } = get();\n        set(\n          produce((draft: Draft<ReportDesignerStoreState>) => {\n            draft.components.forEach((c) => {\n              if (\n                selectedIds.includes(c.id) &&\n                typeof c.props === \"object\" &&\n                c.props !== null &&\n                !!(c.props as Record<string, any>).visible !== visible\n              ) {\n                (c.props as Record<string, any>).visible = visible;\n              }\n            });\n          })\n        );\n      },\n    }),\n    { name: \"reportDesignerStore\" }\n  )\n);\n"
        }
    ]
}