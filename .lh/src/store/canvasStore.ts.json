{
    "sourceFile": "src/store/canvasStore.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747122530493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747122545855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import type { CanvasComponent } from \"../components/report/ReportDesigner/types\";\r\n-import create from \"zustand\";\r\n+import type { CanvasComponent } from '../components/report/ReportDesigner/types';\r\n+import { create } from 'zustand';\r\n \r\n interface CanvasState {\r\n   components: CanvasComponent[];\r\n   selectedIds: string[];\r\n@@ -13,21 +13,21 @@\n \r\n export const useCanvasStore = create<CanvasState>((set) => ({\r\n   components: [],\r\n   selectedIds: [],\r\n-  setComponents: (comps) => set({ components: comps }),\r\n-  setSelectedIds: (ids) => set({ selectedIds: ids }),\r\n-  updateComponent: (id, patch) =>\r\n-    set((state) => ({\r\n-      components: state.components.map((c) =>\r\n+  setComponents: (comps: CanvasComponent[]) => set({ components: comps }),\r\n+  setSelectedIds: (ids: string[]) => set({ selectedIds: ids }),\r\n+  updateComponent: (id: string, patch: Partial<CanvasComponent>) =>\r\n+    set((state: CanvasState) => ({\r\n+      components: state.components.map((c: CanvasComponent) =>\r\n         c.id === id ? { ...c, ...patch } : c\r\n       ),\r\n     })),\r\n-  addComponent: (comp) =>\r\n-    set((state) => ({\r\n+  addComponent: (comp: CanvasComponent) =>\r\n+    set((state: CanvasState) => ({\r\n       components: [...state.components, comp],\r\n     })),\r\n-  removeComponent: (id) =>\r\n-    set((state) => ({\r\n-      components: state.components.filter((c) => c.id !== id),\r\n+  removeComponent: (id: string) =>\r\n+    set((state: CanvasState) => ({\r\n+      components: state.components.filter((c: CanvasComponent) => c.id !== id),\r\n     })),\r\n }));\r\n"
                },
                {
                    "date": 1747124109526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,67 @@\n-import type { CanvasComponent } from \"../components/report/ReportDesigner/types\";\r\n-import { create } from \"zustand\";\r\n+import type { CanvasComponent } from \"@/components/report/ReportDesigner/types\";\r\n+import create from \"zustand\";\r\n \r\n-interface CanvasState {\r\n+interface CanvasStoreState {\r\n   components: CanvasComponent[];\r\n   selectedIds: string[];\r\n   setComponents: (comps: CanvasComponent[]) => void;\r\n   setSelectedIds: (ids: string[]) => void;\r\n+  addComponent: (comp: CanvasComponent) => void;\r\n   updateComponent: (id: string, patch: Partial<CanvasComponent>) => void;\r\n-  addComponent: (comp: CanvasComponent) => void;\r\n-  removeComponent: (id: string) => void;\r\n+  deleteComponent: (id: string) => void;\r\n+  batchUpdate: (ids: string[], patch: Partial<CanvasComponent>) => void;\r\n+  moveComponent: (id: string, x: number, y: number) => void;\r\n+  moveToTop: (id: string) => void;\r\n+  moveToBottom: (id: string) => void;\r\n+  toggleLock: (id: string) => void;\r\n+  toggleVisible: (id: string) => void;\r\n }\r\n \r\n-export const useCanvasStore = create<CanvasState>((set) => ({\r\n+export const useCanvasStore = create<CanvasStoreState>((set, get) => ({\r\n   components: [],\r\n   selectedIds: [],\r\n-  setComponents: (comps: CanvasComponent[]) => set({ components: comps }),\r\n-  setSelectedIds: (ids: string[]) => set({ selectedIds: ids }),\r\n-  updateComponent: (id: string, patch: Partial<CanvasComponent>) =>\r\n-    set((state: CanvasState) => ({\r\n-      components: state.components.map((c: CanvasComponent) =>\r\n-        c.id === id ? { ...c, ...patch } : c\r\n-      ),\r\n+  setComponents: (comps) => set({ components: comps }),\r\n+  setSelectedIds: (ids) => set({ selectedIds: ids }),\r\n+  addComponent: (comp) => set((state) => ({ components: [...state.components, comp] })),\r\n+  updateComponent: (id, patch) =>\r\n+    set((state) => ({\r\n+      components: state.components.map((c) => (c.id === id ? { ...c, ...patch } : c)),\r\n     })),\r\n-  addComponent: (comp: CanvasComponent) =>\r\n-    set((state: CanvasState) => ({\r\n-      components: [...state.components, comp],\r\n+  deleteComponent: (id) =>\r\n+    set((state) => ({\r\n+      components: state.components.filter((c) => c.id !== id),\r\n+      selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n     })),\r\n-  removeComponent: (id: string) =>\r\n-    set((state: CanvasState) => ({\r\n-      components: state.components.filter((c: CanvasComponent) => c.id !== id),\r\n+  batchUpdate: (ids, patch) =>\r\n+    set((state) => ({\r\n+      components: state.components.map((c) => (ids.includes(c.id) ? { ...c, ...patch } : c)),\r\n     })),\r\n+  moveComponent: (id, x, y) =>\r\n+    set((state) => ({\r\n+      components: state.components.map((c) => (c.id === id ? { ...c, x, y } : c)),\r\n+    })),\r\n+  moveToTop: (id) =>\r\n+    set((state) => {\r\n+      const idx = state.components.findIndex((c) => c.id === id);\r\n+      if (idx === -1) return {};\r\n+      const comp = state.components[idx];\r\n+      const rest = state.components.filter((c) => c.id !== id);\r\n+      return { components: [...rest, comp] };\r\n+    }),\r\n+  moveToBottom: (id) =>\r\n+    set((state) => {\r\n+      const idx = state.components.findIndex((c) => c.id === id);\r\n+      if (idx === -1) return {};\r\n+      const comp = state.components[idx];\r\n+      const rest = state.components.filter((c) => c.id !== id);\r\n+      return { components: [comp, ...rest] };\r\n+    }),\r\n+  toggleLock: (id) =>\r\n+    set((state) => ({\r\n+      components: state.components.map((c) => (c.id === id ? { ...c, locked: !c.locked } : c)),\r\n+    })),\r\n+  toggleVisible: (id) =>\r\n+    set((state) => ({\r\n+      components: state.components.map((c) => (c.id === id ? { ...c, visible: !c.visible } : c)),\r\n+    })),\r\n }));\r\n"
                }
            ],
            "date": 1747122530493,
            "name": "Commit-0",
            "content": "import type { CanvasComponent } from '../components/report/ReportDesigner/types';\r\nimport create from 'zustand';\r\n\r\ninterface CanvasState {\r\n  components: CanvasComponent[];\r\n  selectedIds: string[];\r\n  setComponents: (comps: CanvasComponent[]) => void;\r\n  setSelectedIds: (ids: string[]) => void;\r\n  updateComponent: (id: string, patch: Partial<CanvasComponent>) => void;\r\n  addComponent: (comp: CanvasComponent) => void;\r\n  removeComponent: (id: string) => void;\r\n}\r\n\r\nexport const useCanvasStore = create<CanvasState>((set) => ({\r\n  components: [],\r\n  selectedIds: [],\r\n  setComponents: (comps) => set({ components: comps }),\r\n  setSelectedIds: (ids) => set({ selectedIds: ids }),\r\n  updateComponent: (id, patch) =>\r\n    set((state) => ({\r\n      components: state.components.map((c) =>\r\n        c.id === id ? { ...c, ...patch } : c\r\n      ),\r\n    })),\r\n  addComponent: (comp) =>\r\n    set((state) => ({\r\n      components: [...state.components, comp],\r\n    })),\r\n  removeComponent: (id) =>\r\n    set((state) => ({\r\n      components: state.components.filter((c) => c.id !== id),\r\n    })),\r\n})); "
        }
    ]
}