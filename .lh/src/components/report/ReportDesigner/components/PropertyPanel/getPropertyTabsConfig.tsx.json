{
    "sourceFile": "src/components/report/ReportDesigner/components/PropertyPanel/getPropertyTabsConfig.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747350855895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747350892789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,15 +114,19 @@\n               >\r\n                 <span style={{ width: 80 }}>{item.label}：</span>\r\n                 <FieldRenderer\r\n                   item={fieldItem}\r\n-                  value={selected.props?.dataBinding?.[item.key] ?? item.default}\r\n-                  onChange={(val: any) => handleDataBindingChange(item.key, val)}\r\n+                  value={\r\n+                    selected.props?.dataBinding?.[item.key] ?? item.default\r\n+                  }\r\n+                  onChange={(val: any) =>\r\n+                    handleDataBindingChange(item.key, val)\r\n+                  }\r\n                 />\r\n               </div>\r\n             );\r\n\\ No newline at end of file\n           })}\r\n         </div>\r\n       ),\r\n     },\r\n   ];\r\n-} \n+}\r\n"
                },
                {
                    "date": 1747350899806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,5 +128,5 @@\n         </div>\r\n       ),\r\n     },\r\n   ];\r\n-}\n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1747350855895,
            "name": "Commit-0",
            "content": "import FieldRenderer from \"./FieldRenderer\";\r\nimport React from \"react\";\r\n\r\nexport function getPropertyTabsConfig({\r\n  schema,\r\n  selected,\r\n  dataSources,\r\n  fieldOptions,\r\n  isRotatable,\r\n  handleBaseChange,\r\n  handleStandardChange,\r\n  handleDataBindingChange,\r\n}: any) {\r\n  return [\r\n    {\r\n      key: \"base\",\r\n      label: \"基础属性\",\r\n      children: (\r\n        <div>\r\n          {schema.base?.map((item: any) => {\r\n            // rotation 字段根据 rotatable 控制 disabled\r\n            const fieldItem =\r\n              item.key === \"rotation\"\r\n                ? { ...item, disabled: !isRotatable }\r\n                : item;\r\n            return (\r\n              <div\r\n                key={item.key}\r\n                style={{\r\n                  marginBottom: 8,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  gap: 8,\r\n                }}\r\n              >\r\n                <span style={{ width: 80 }}>{item.label}：</span>\r\n                <FieldRenderer\r\n                  item={fieldItem}\r\n                  value={(selected as any)[item.key] ?? item.default}\r\n                  onChange={(val: any) => handleBaseChange(item.key, val)}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: \"standard\",\r\n      label: \"标准属性\",\r\n      children: (\r\n        <div>\r\n          {schema.standard?.map((item: any) => (\r\n            <div\r\n              key={item.key}\r\n              style={{\r\n                marginBottom: 8,\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                gap: 8,\r\n              }}\r\n            >\r\n              <span style={{ width: 80 }}>{item.label}：</span>\r\n              <FieldRenderer\r\n                item={item}\r\n                value={selected.props?.[item.key] ?? item.default}\r\n                onChange={(val: any) => handleStandardChange(item.key, val)}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      key: \"dataBinding\",\r\n      label: \"数据绑定\",\r\n      children: (\r\n        <div>\r\n          {schema.dataBinding?.map((item: any) => {\r\n            // 只在 format 为 custom 时显示 customFormat 字段\r\n            if (item.key === \"customFormat\") {\r\n              if (selected.props?.dataBinding?.format !== \"custom\") return null;\r\n            }\r\n            // 只在 format 不为 custom 时显示 formatPattern 字段\r\n            if (item.key === \"formatPattern\") {\r\n              if (\r\n                !selected.props?.dataBinding?.format ||\r\n                selected.props?.dataBinding?.format === \"custom\"\r\n              )\r\n                return null;\r\n            }\r\n            let fieldItem = item;\r\n            if (item.key === \"dataSource\") {\r\n              fieldItem = {\r\n                ...item,\r\n                options: dataSources.map((ds: any) => ({\r\n                  label: ds.name,\r\n                  value: ds.key,\r\n                })),\r\n              };\r\n            }\r\n            if (item.key === \"field\") {\r\n              fieldItem = { ...item, options: fieldOptions };\r\n            }\r\n            return (\r\n              <div\r\n                key={item.key}\r\n                style={{\r\n                  marginBottom: 8,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  gap: 8,\r\n                }}\r\n              >\r\n                <span style={{ width: 80 }}>{item.label}：</span>\r\n                <FieldRenderer\r\n                  item={fieldItem}\r\n                  value={selected.props?.dataBinding?.[item.key] ?? item.default}\r\n                  onChange={(val: any) => handleDataBindingChange(item.key, val)}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n} "
        }
    ]
}