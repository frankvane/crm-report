{
    "sourceFile": "src/components/report/ReportDesigner/components/PropertyPanel/FieldRenderer.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1747350658202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747350892759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,11 @@\n       );\r\n     case \"json\":\r\n       return (\r\n         <Input.TextArea\r\n-          value={typeof value === \"string\" ? value : JSON.stringify(value, null, 2)}\r\n+          value={\r\n+            typeof value === \"string\" ? value : JSON.stringify(value, null, 2)\r\n+          }\r\n           onChange={(e) => {\r\n             const val = e.target.value;\r\n             try {\r\n               const parsed = JSON.parse(val);\r\n@@ -89,5 +91,5 @@\n       return <Input value={value} disabled style={{ width: 180 }} />;\r\n     default:\r\n       return null;\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1747357023734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,90 @@\n-import { Input, InputNumber, Select, Switch } from \"antd\";\r\n-\r\n import React from \"react\";\r\n+import { Input, InputNumber, Select, Switch, Button, Table, Space } from \"antd\";\r\n \r\n-export default function FieldRenderer({ item, value, onChange }: any) {\r\n+function ColumnsField({ value = [], onChange, itemSchema, dataSourceFields = [] }: any) {\r\n+  // value: columns数组\r\n+  // itemSchema: 每列的schema\r\n+  // dataSourceFields: 字段下拉选项\r\n+\r\n+  // 处理字段变更\r\n+  const handleFieldChange = (rowIdx: number, key: string, fieldValue: any) => {\r\n+    const newValue = value.map((row: any, idx: number) =>\r\n+      idx === rowIdx ? { ...row, [key]: fieldValue } : row\r\n+    );\r\n+    onChange(newValue);\r\n+  };\r\n+\r\n+  // 新增一行\r\n+  const handleAdd = () => {\r\n+    const emptyRow: any = {};\r\n+    itemSchema.forEach((item: any) => {\r\n+      if (item.type === \"switch\") emptyRow[item.key] = true;\r\n+      else emptyRow[item.key] = undefined;\r\n+    });\r\n+    onChange([...(value || []), emptyRow]);\r\n+  };\r\n+\r\n+  // 删除一行\r\n+  const handleDelete = (rowIdx: number) => {\r\n+    const newValue = value.filter((_: any, idx: number) => idx !== rowIdx);\r\n+    onChange(newValue);\r\n+  };\r\n+\r\n+  // 渲染每个单元格\r\n+  const renderCell = (item: any, row: any, rowIdx: number) => {\r\n+    const commonProps = {\r\n+      value: row[item.key],\r\n+      onChange: (val: any) => handleFieldChange(rowIdx, item.key, val),\r\n+      item,\r\n+    };\r\n+    if (item.type === \"input\") return <Input {...commonProps} />;\r\n+    if (item.type === \"number\") return <InputNumber {...commonProps} />;\r\n+    if (item.type === \"switch\") return <Switch checked={!!row[item.key]} onChange={(val) => handleFieldChange(rowIdx, item.key, val)} />;\r\n+    if (item.type === \"select\") {\r\n+      const options = item.key === \"field\" && dataSourceFields.length > 0 ? dataSourceFields : item.options || [];\r\n+      return <Select {...commonProps} options={options} style={{ minWidth: 80 }} />;\r\n+    }\r\n+    return <Input {...commonProps} />;\r\n+  };\r\n+\r\n+  // 构造表格列\r\n+  const tableColumns = [\r\n+    ...itemSchema.map((item: any) => ({\r\n+      title: item.label,\r\n+      dataIndex: item.key,\r\n+      key: item.key,\r\n+      render: (_: any, row: any, rowIdx: number) => renderCell(item, row, rowIdx),\r\n+    })),\r\n+    {\r\n+      title: \"操作\",\r\n+      key: \"actions\",\r\n+      render: (_: any, _row: any, rowIdx: number) => (\r\n+        <Button danger size=\"small\" onClick={() => handleDelete(rowIdx)}>\r\n+          删除\r\n+        </Button>\r\n+      ),\r\n+    },\r\n+  ];\r\n+\r\n+  return (\r\n+    <div>\r\n+      <Table\r\n+        columns={tableColumns}\r\n+        dataSource={value.map((row: any, idx: number) => ({ ...row, _rowKey: idx }))}\r\n+        rowKey=\"_rowKey\"\r\n+        pagination={false}\r\n+        size=\"small\"\r\n+        bordered\r\n+      />\r\n+      <Space style={{ marginTop: 8 }}>\r\n+        <Button type=\"dashed\" onClick={handleAdd} size=\"small\">添加字段</Button>\r\n+      </Space>\r\n+    </div>\r\n+  );\r\n+}\r\n+\r\n+export default function FieldRenderer({ item, value, onChange, dataSourceFields }: any) {\r\n   switch (item.type) {\r\n     case \"input\":\r\n       return (\r\n         <Input\r\n@@ -58,11 +139,9 @@\n       );\r\n     case \"json\":\r\n       return (\r\n         <Input.TextArea\r\n-          value={\r\n-            typeof value === \"string\" ? value : JSON.stringify(value, null, 2)\r\n-          }\r\n+          value={typeof value === \"string\" ? value : JSON.stringify(value, null, 2)}\r\n           onChange={(e) => {\r\n             const val = e.target.value;\r\n             try {\r\n               const parsed = JSON.parse(val);\r\n@@ -88,8 +167,10 @@\n         />\r\n       );\r\n     case \"text\":\r\n       return <Input value={value} disabled style={{ width: 180 }} />;\r\n+    case \"columns\":\r\n+      return <ColumnsField value={value} onChange={onChange} itemSchema={item.itemSchema} dataSourceFields={dataSourceFields} />;\r\n     default:\r\n       return null;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1747357096039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n+import { Button, Input, InputNumber, Select, Space, Switch, Table } from \"antd\";\r\n+\r\n import React from \"react\";\r\n-import { Input, InputNumber, Select, Switch, Button, Table, Space } from \"antd\";\r\n \r\n function ColumnsField({\r\n   value = [],\r\n   onChange,\r\n"
                },
                {
                    "date": 1747358654288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,19 @@\n \r\n   // 处理字段变更\r\n   const handleFieldChange = (rowIdx: number, key: string, fieldValue: any) => {\r\n     const newValue = value.map((row: any, idx: number) =>\r\n-      idx === rowIdx ? { ...row, [key]: fieldValue } : row\r\n+      idx === rowIdx\r\n+        ? {\r\n+            ...row,\r\n+            [key]:\r\n+              key === \"label\"\r\n+                ? typeof fieldValue === \"string\"\r\n+                  ? fieldValue\r\n+                  : fieldValue?.label || fieldValue?.value || \"\"\r\n+                : fieldValue,\r\n+          }\r\n+        : row\r\n     );\r\n     onChange(newValue);\r\n   };\r\n \r\n@@ -42,9 +52,19 @@\n       value: row[item.key],\r\n       onChange: (val: any) => handleFieldChange(rowIdx, item.key, val),\r\n       item,\r\n     };\r\n-    if (item.type === \"input\") return <Input {...commonProps} />;\r\n+    if (item.type === \"input\")\r\n+      return (\r\n+        <Input\r\n+          {...commonProps}\r\n+          value={\r\n+            typeof row[item.key] === \"string\" || typeof row[item.key] === \"number\"\r\n+              ? row[item.key]\r\n+              : row[item.key]?.label || row[item.key]?.value || \"\"\r\n+          }\r\n+        />\r\n+      );\r\n     if (item.type === \"number\") return <InputNumber {...commonProps} />;\r\n     if (item.type === \"switch\")\r\n       return (\r\n         <Switch\r\n"
                }
            ],
            "date": 1747350658201,
            "name": "Commit-0",
            "content": "import { Input, InputNumber, Select, Switch } from \"antd\";\r\n\r\nimport React from \"react\";\r\n\r\nexport default function FieldRenderer({ item, value, onChange }: any) {\r\n  switch (item.type) {\r\n    case \"input\":\r\n      return (\r\n        <Input\r\n          value={value}\r\n          onChange={(e) => onChange(e.target.value)}\r\n          style={{ width: 180 }}\r\n          disabled={item.disabled}\r\n        />\r\n      );\r\n    case \"number\":\r\n      return (\r\n        <InputNumber\r\n          value={value}\r\n          onChange={onChange}\r\n          style={{ width: 120 }}\r\n          disabled={item.disabled}\r\n        />\r\n      );\r\n    case \"switch\":\r\n      return (\r\n        <Switch\r\n          checked={!!value}\r\n          onChange={onChange}\r\n          disabled={item.disabled}\r\n        />\r\n      );\r\n    case \"select\":\r\n      return (\r\n        <Select\r\n          value={value}\r\n          onChange={onChange}\r\n          style={{ width: 120 }}\r\n          options={item.options || []}\r\n          disabled={item.disabled}\r\n        />\r\n      );\r\n    case \"color\":\r\n      return (\r\n        <Input\r\n          type=\"color\"\r\n          value={value}\r\n          onChange={(e) => onChange(e.target.value)}\r\n          style={{\r\n            width: 40,\r\n            height: 32,\r\n            padding: 0,\r\n            border: \"none\",\r\n            background: \"none\",\r\n          }}\r\n          disabled={item.disabled}\r\n        />\r\n      );\r\n    case \"json\":\r\n      return (\r\n        <Input.TextArea\r\n          value={typeof value === \"string\" ? value : JSON.stringify(value, null, 2)}\r\n          onChange={(e) => {\r\n            const val = e.target.value;\r\n            try {\r\n              const parsed = JSON.parse(val);\r\n              onChange(parsed);\r\n            } catch {\r\n              // 不更新，或可提示错误\r\n            }\r\n          }}\r\n          autoSize={{ minRows: 4, maxRows: 16 }}\r\n          style={{ width: 320 }}\r\n          placeholder=\"请输入合法的 JSON 格式\"\r\n        />\r\n      );\r\n    case \"textarea\":\r\n      return (\r\n        <Input.TextArea\r\n          value={value}\r\n          onChange={(e) => onChange(e.target.value)}\r\n          autoSize={{ minRows: 2, maxRows: 8 }}\r\n          style={{ width: 320 }}\r\n          disabled={item.disabled}\r\n          placeholder={item.placeholder}\r\n        />\r\n      );\r\n    case \"text\":\r\n      return <Input value={value} disabled style={{ width: 180 }} />;\r\n    default:\r\n      return null;\r\n  }\r\n}"
        }
    ]
}