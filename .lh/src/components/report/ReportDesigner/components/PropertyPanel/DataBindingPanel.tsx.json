{
    "sourceFile": "src/components/report/ReportDesigner/components/PropertyPanel/DataBindingPanel.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1747351027566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747351063917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,5 +66,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default DataBindingPanel;\n\\ No newline at end of file\n+export default DataBindingPanel;\r\n"
                },
                {
                    "date": 1747358046832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n             <FieldRenderer\r\n               item={fieldItem}\r\n               value={selected.props?.dataBinding?.[item.key] ?? item.default}\r\n               onChange={(val: any) => handleDataBindingChange(item.key, val)}\r\n+              dataSourceFields={item.type === \"columns\" ? fieldOptions : undefined}\r\n             />\r\n           </div>\r\n         );\r\n       })}\r\n"
                },
                {
                    "date": 1747358360307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n+import { Button, Drawer } from \"antd\";\r\n+import React, { useState } from \"react\";\r\n+\r\n import FieldRenderer from \"./FieldRenderer\";\r\n-import React from \"react\";\r\n \r\n interface DataBindingPanelProps {\r\n   schema: any;\r\n   selected: any;\r\n@@ -15,8 +17,15 @@\n   dataSources,\r\n   fieldOptions,\r\n   handleDataBindingChange,\r\n }) => {\r\n+  // 字段映射抽屉状态\r\n+  const [columnsDrawerOpen, setColumnsDrawerOpen] = useState(false);\r\n+  // 当前 columns 值\r\n+  const columnsValue = selected.props?.dataBinding?.columns ?? [];\r\n+  // columns schema\r\n+  const columnsSchema = schema.dataBinding?.find((item: any) => item.key === \"columns\");\r\n+\r\n   return (\r\n     <div>\r\n       {schema.dataBinding?.map((item: any) => {\r\n         // 只在 format 为 custom 时显示 customFormat 字段\r\n@@ -30,8 +39,59 @@\n             selected.props?.dataBinding?.format === \"custom\"\r\n           )\r\n             return null;\r\n         }\r\n+        // 字段映射（columns）特殊处理\r\n+        if (item.key === \"columns\") {\r\n+          return (\r\n+            <div\r\n+              key={item.key}\r\n+              style={{ marginBottom: 8, display: \"flex\", alignItems: \"center\", gap: 8 }}\r\n+            >\r\n+              <span style={{ width: 80 }}>{item.label}：</span>\r\n+              <Button size=\"small\" onClick={() => setColumnsDrawerOpen(true)}>\r\n+                编辑\r\n+              </Button>\r\n+              <div style={{ flex: 1 }}>\r\n+                {/* 简要信息列表 */}\r\n+                {columnsValue && columnsValue.length > 0 ? (\r\n+                  <ul style={{ margin: 0, padding: 0, listStyle: \"none\" }}>\r\n+                    {columnsValue.map((col: any) => (\r\n+                      <li key={col.field} style={{ fontSize: 12, color: \"#888\" }}>\r\n+                        {col.label || col.field}（{col.field}）\r\n+                        {col.visible === false ? <span style={{ color: '#bbb', marginLeft: 4 }}>[隐藏]</span> : null}\r\n+                      </li>\r\n+                    ))}\r\n+                  </ul>\r\n+                ) : (\r\n+                  <span style={{ color: '#bbb', fontSize: 12 }}>未配置字段</span>\r\n+                )}\r\n+              </div>\r\n+              <Drawer\r\n+                title=\"字段映射配置\"\r\n+                placement=\"right\"\r\n+                open={columnsDrawerOpen}\r\n+                onClose={() => setColumnsDrawerOpen(false)}\r\n+                width={600}\r\n+                destroyOnClose\r\n+                footer={null}\r\n+              >\r\n+                <FieldRenderer\r\n+                  item={columnsSchema}\r\n+                  value={columnsValue}\r\n+                  onChange={(val: any) => handleDataBindingChange(\"columns\", val)}\r\n+                  dataSourceFields={fieldOptions}\r\n+                />\r\n+                <div style={{ textAlign: 'right', marginTop: 16 }}>\r\n+                  <Button onClick={() => setColumnsDrawerOpen(false)} style={{ marginRight: 8 }}>\r\n+                    关闭\r\n+                  </Button>\r\n+                </div>\r\n+              </Drawer>\r\n+            </div>\r\n+          );\r\n+        }\r\n+        // 其他字段正常渲染\r\n         let fieldItem = item;\r\n         if (item.key === \"dataSource\") {\r\n           fieldItem = {\r\n             ...item,\r\n@@ -46,23 +106,16 @@\n         }\r\n         return (\r\n           <div\r\n             key={item.key}\r\n-            style={{\r\n-              marginBottom: 8,\r\n-              display: \"flex\",\r\n-              alignItems: \"center\",\r\n-              gap: 8,\r\n-            }}\r\n+            style={{ marginBottom: 8, display: \"flex\", alignItems: \"center\", gap: 8 }}\r\n           >\r\n             <span style={{ width: 80 }}>{item.label}：</span>\r\n             <FieldRenderer\r\n               item={fieldItem}\r\n               value={selected.props?.dataBinding?.[item.key] ?? item.default}\r\n               onChange={(val: any) => handleDataBindingChange(item.key, val)}\r\n-              dataSourceFields={\r\n-                item.type === \"columns\" ? fieldOptions : undefined\r\n-              }\r\n+              dataSourceFields={item.type === \"columns\" ? fieldOptions : undefined}\r\n             />\r\n           </div>\r\n         );\r\n       })}\r\n"
                },
                {
                    "date": 1747358446322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,12 +63,27 @@\n                 {columnsValue && columnsValue.length > 0 ? (\r\n                   <ul style={{ margin: 0, padding: 0, listStyle: \"none\" }}>\r\n                     {columnsValue.map((col: any) => (\r\n                       <li\r\n-                        key={col.field}\r\n+                        key={\r\n+                          (typeof col.field === 'string' || typeof col.field === 'number')\r\n+                            ? col.field\r\n+                            : (col.field?.label || col.field?.value || '')\r\n+                        }\r\n                         style={{ fontSize: 12, color: \"#888\" }}\r\n                       >\r\n-                        {col.label || col.field}（{col.field}）\r\n+                        {(\r\n+                          typeof col.label === 'string' || typeof col.label === 'number'\r\n+                        )\r\n+                          ? col.label\r\n+                          : (col.label?.label || col.label?.value || '')}\r\n+                        （\r\n+                        {(\r\n+                          typeof col.field === 'string' || typeof col.field === 'number'\r\n+                        )\r\n+                          ? col.field\r\n+                          : (col.field?.label || col.field?.value || '')}\r\n+                        ）\r\n                         {col.visible === false ? (\r\n                           <span style={{ color: \"#bbb\", marginLeft: 4 }}>\r\n                             [隐藏]\r\n                           </span>\r\n"
                }
            ],
            "date": 1747351027566,
            "name": "Commit-0",
            "content": "import FieldRenderer from \"./FieldRenderer\";\r\nimport React from \"react\";\r\n\r\ninterface DataBindingPanelProps {\r\n  schema: any;\r\n  selected: any;\r\n  dataSources: any[];\r\n  fieldOptions: any[];\r\n  handleDataBindingChange: (key: string, value: any) => void;\r\n}\r\n\r\nconst DataBindingPanel: React.FC<DataBindingPanelProps> = ({\r\n  schema,\r\n  selected,\r\n  dataSources,\r\n  fieldOptions,\r\n  handleDataBindingChange,\r\n}) => {\r\n  return (\r\n    <div>\r\n      {schema.dataBinding?.map((item: any) => {\r\n        // 只在 format 为 custom 时显示 customFormat 字段\r\n        if (item.key === \"customFormat\") {\r\n          if (selected.props?.dataBinding?.format !== \"custom\") return null;\r\n        }\r\n        // 只在 format 不为 custom 时显示 formatPattern 字段\r\n        if (item.key === \"formatPattern\") {\r\n          if (\r\n            !selected.props?.dataBinding?.format ||\r\n            selected.props?.dataBinding?.format === \"custom\"\r\n          )\r\n            return null;\r\n        }\r\n        let fieldItem = item;\r\n        if (item.key === \"dataSource\") {\r\n          fieldItem = {\r\n            ...item,\r\n            options: dataSources.map((ds: any) => ({\r\n              label: ds.name,\r\n              value: ds.key,\r\n            })),\r\n          };\r\n        }\r\n        if (item.key === \"field\") {\r\n          fieldItem = { ...item, options: fieldOptions };\r\n        }\r\n        return (\r\n          <div\r\n            key={item.key}\r\n            style={{\r\n              marginBottom: 8,\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              gap: 8,\r\n            }}\r\n          >\r\n            <span style={{ width: 80 }}>{item.label}：</span>\r\n            <FieldRenderer\r\n              item={fieldItem}\r\n              value={selected.props?.dataBinding?.[item.key] ?? item.default}\r\n              onChange={(val: any) => handleDataBindingChange(item.key, val)}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataBindingPanel;"
        }
    ]
}