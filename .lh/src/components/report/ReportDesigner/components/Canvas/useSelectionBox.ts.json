{
    "sourceFile": "src/components/report/ReportDesigner/components/Canvas/useSelectionBox.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1747106264006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747106565967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,12 +79,17 @@\n \r\n   // 框选结束\r\n   const handleSelectionMouseUp = (e?: React.MouseEvent) => {\r\n     if (!selectionBox.active) return;\r\n-    const minX = Math.min(selectionBox.startX, selectionBox.endX);\r\n-    const maxX = Math.max(selectionBox.startX, selectionBox.endX);\r\n-    const minY = Math.min(selectionBox.startY, selectionBox.endY);\r\n-    const maxY = Math.max(selectionBox.startY, selectionBox.endY);\r\n+    const rect = contentRef.current!.getBoundingClientRect();\r\n+    // 用鼠标松开时的点作为 endX/endY\r\n+    const x = e ? e.clientX - rect.left : selectionBox.endX;\r\n+    const y = e ? e.clientY - rect.top : selectionBox.endY;\r\n+\r\n+    const minX = Math.min(selectionBox.startX, x);\r\n+    const maxX = Math.max(selectionBox.startX, x);\r\n+    const minY = Math.min(selectionBox.startY, y);\r\n+    const maxY = Math.max(selectionBox.startY, y);\r\n     const selected = components\r\n       .filter((comp) => {\r\n         if (comp.visible === false) return false;\r\n         const compLeft = comp.x;\r\n"
                },
                {
                    "date": 1747106693272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n+import { useEffect, useState } from \"react\";\r\n+\r\n import type { CanvasComponent } from \"../../types\";\r\n-import { useState } from \"react\";\r\n \r\n interface SelectionBoxState {\r\n   startX: number;\r\n   startY: number;\r\n@@ -31,8 +32,18 @@\n     endY: 0,\r\n     active: false,\r\n   });\r\n \r\n+  // 全局 mouseup 监听，保证鼠标释放时能正确结束框选\r\n+  useEffect(() => {\r\n+    if (!selectionBox.active) return;\r\n+    const handleUp = (e: MouseEvent) => {\r\n+      handleSelectionMouseUp();\r\n+    };\r\n+    window.addEventListener(\"mouseup\", handleUp);\r\n+    return () => window.removeEventListener(\"mouseup\", handleUp);\r\n+  }, [selectionBox.active]);\r\n+\r\n   // 框选开始\r\n   const handleSelectionMouseDown = (e: React.MouseEvent) => {\r\n     if (e.button !== 0 || e.target !== contentRef.current) return;\r\n     const rect = contentRef.current!.getBoundingClientRect();\r\n"
                },
                {
                    "date": 1747108214108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,10 +70,10 @@\n       .filter((comp) => {\r\n         if (comp.visible === false) return false;\r\n         const compLeft = comp.x;\r\n         const compTop = comp.y;\r\n-        const compRight = comp.x + COMPONENT_WIDTH;\r\n-        const compBottom = comp.y + COMPONENT_HEIGHT;\r\n+        const compRight = comp.x + (comp.width ?? COMPONENT_WIDTH);\r\n+        const compBottom = comp.y + (comp.height ?? COMPONENT_HEIGHT);\r\n         return (\r\n           compRight > minX &&\r\n           compLeft < maxX &&\r\n           compBottom > minY &&\r\n@@ -104,10 +104,10 @@\n       .filter((comp) => {\r\n         if (comp.visible === false) return false;\r\n         const compLeft = comp.x;\r\n         const compTop = comp.y;\r\n-        const compRight = comp.x + COMPONENT_WIDTH;\r\n-        const compBottom = comp.y + COMPONENT_HEIGHT;\r\n+        const compRight = comp.x + (comp.width ?? COMPONENT_WIDTH);\r\n+        const compBottom = comp.y + (comp.height ?? COMPONENT_HEIGHT);\r\n         return (\r\n           compRight > minX &&\r\n           compLeft < maxX &&\r\n           compBottom > minY &&\r\n"
                },
                {
                    "date": 1747108220194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,14 +88,14 @@\n     }\r\n   };\r\n \r\n   // 框选结束\r\n-  const handleSelectionMouseUp = (e?: React.MouseEvent) => {\r\n+  const handleSelectionMouseUp = () => {\r\n     if (!selectionBox.active) return;\r\n     const rect = contentRef.current!.getBoundingClientRect();\r\n     // 用鼠标松开时的点作为 endX/endY\r\n-    const x = e ? e.clientX - rect.left : selectionBox.endX;\r\n-    const y = e ? e.clientY - rect.top : selectionBox.endY;\r\n+    const x = selectionBox.endX;\r\n+    const y = selectionBox.endY;\r\n \r\n     const minX = Math.min(selectionBox.startX, x);\r\n     const maxX = Math.max(selectionBox.startX, x);\r\n     const minY = Math.min(selectionBox.startY, y);\r\n@@ -115,9 +115,8 @@\n         );\r\n       })\r\n       .map((comp) => comp.id);\r\n     if (\r\n-      (e && (e.shiftKey || e.ctrlKey)) ||\r\n       (window.event &&\r\n         ((window.event as MouseEvent).shiftKey ||\r\n           (window.event as MouseEvent).ctrlKey))\r\n     ) {\r\n"
                },
                {
                    "date": 1747108228302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,11 +115,11 @@\n         );\r\n       })\r\n       .map((comp) => comp.id);\r\n     if (\r\n-      (window.event &&\r\n-        ((window.event as MouseEvent).shiftKey ||\r\n-          (window.event as MouseEvent).ctrlKey))\r\n+      window.event &&\r\n+      ((window.event as MouseEvent).shiftKey ||\r\n+        (window.event as MouseEvent).ctrlKey)\r\n     ) {\r\n       setSelectedIds((prev) => Array.from(new Set([...prev, ...selected])));\r\n     } else {\r\n       setSelectedIds(selected);\r\n"
                }
            ],
            "date": 1747106264006,
            "name": "Commit-0",
            "content": "import type { CanvasComponent } from \"../../types\";\r\nimport { useState } from \"react\";\r\n\r\ninterface SelectionBoxState {\r\n  startX: number;\r\n  startY: number;\r\n  endX: number;\r\n  endY: number;\r\n  active: boolean;\r\n}\r\n\r\ninterface UseSelectionBoxProps {\r\n  contentRef: React.RefObject<HTMLDivElement>;\r\n  components: CanvasComponent[];\r\n  setSelectedIds: React.Dispatch<React.SetStateAction<string[]>>;\r\n  COMPONENT_WIDTH: number;\r\n  COMPONENT_HEIGHT: number;\r\n}\r\n\r\nexport function useSelectionBox({\r\n  contentRef,\r\n  components,\r\n  setSelectedIds,\r\n  COMPONENT_WIDTH,\r\n  COMPONENT_HEIGHT,\r\n}: UseSelectionBoxProps) {\r\n  const [selectionBox, setSelectionBox] = useState<SelectionBoxState>({\r\n    startX: 0,\r\n    startY: 0,\r\n    endX: 0,\r\n    endY: 0,\r\n    active: false,\r\n  });\r\n\r\n  // 框选开始\r\n  const handleSelectionMouseDown = (e: React.MouseEvent) => {\r\n    if (e.button !== 0 || e.target !== contentRef.current) return;\r\n    const rect = contentRef.current!.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n    setSelectionBox({ startX: x, startY: y, endX: x, endY: y, active: true });\r\n  };\r\n\r\n  // 框选移动\r\n  const handleSelectionMouseMove = (e: React.MouseEvent) => {\r\n    if (!selectionBox.active) return;\r\n    const rect = contentRef.current!.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n    // 先更新选区\r\n    setSelectionBox((prev) => ({ ...prev, endX: x, endY: y }));\r\n\r\n    // 用最新的 startX/startY 和当前 x/y 计算选区\r\n    const minX = Math.min(selectionBox.startX, x);\r\n    const maxX = Math.max(selectionBox.startX, x);\r\n    const minY = Math.min(selectionBox.startY, y);\r\n    const maxY = Math.max(selectionBox.startY, y);\r\n    const selected = components\r\n      .filter((comp) => {\r\n        if (comp.visible === false) return false;\r\n        const compLeft = comp.x;\r\n        const compTop = comp.y;\r\n        const compRight = comp.x + COMPONENT_WIDTH;\r\n        const compBottom = comp.y + COMPONENT_HEIGHT;\r\n        return (\r\n          compRight > minX &&\r\n          compLeft < maxX &&\r\n          compBottom > minY &&\r\n          compTop < maxY\r\n        );\r\n      })\r\n      .map((comp) => comp.id);\r\n    if (e.shiftKey || e.ctrlKey) {\r\n      setSelectedIds((prev) => Array.from(new Set([...prev, ...selected])));\r\n    } else {\r\n      setSelectedIds(selected);\r\n    }\r\n  };\r\n\r\n  // 框选结束\r\n  const handleSelectionMouseUp = (e?: React.MouseEvent) => {\r\n    if (!selectionBox.active) return;\r\n    const minX = Math.min(selectionBox.startX, selectionBox.endX);\r\n    const maxX = Math.max(selectionBox.startX, selectionBox.endX);\r\n    const minY = Math.min(selectionBox.startY, selectionBox.endY);\r\n    const maxY = Math.max(selectionBox.startY, selectionBox.endY);\r\n    const selected = components\r\n      .filter((comp) => {\r\n        if (comp.visible === false) return false;\r\n        const compLeft = comp.x;\r\n        const compTop = comp.y;\r\n        const compRight = comp.x + COMPONENT_WIDTH;\r\n        const compBottom = comp.y + COMPONENT_HEIGHT;\r\n        return (\r\n          compRight > minX &&\r\n          compLeft < maxX &&\r\n          compBottom > minY &&\r\n          compTop < maxY\r\n        );\r\n      })\r\n      .map((comp) => comp.id);\r\n    if (\r\n      (e && (e.shiftKey || e.ctrlKey)) ||\r\n      (window.event &&\r\n        ((window.event as MouseEvent).shiftKey ||\r\n          (window.event as MouseEvent).ctrlKey))\r\n    ) {\r\n      setSelectedIds((prev) => Array.from(new Set([...prev, ...selected])));\r\n    } else {\r\n      setSelectedIds(selected);\r\n    }\r\n    setSelectionBox({ startX: 0, startY: 0, endX: 0, endY: 0, active: false });\r\n  };\r\n\r\n  return {\r\n    selectionBox,\r\n    handleSelectionMouseDown,\r\n    handleSelectionMouseMove,\r\n    handleSelectionMouseUp,\r\n    setSelectionBox,\r\n  };\r\n}\r\n"
        }
    ]
}