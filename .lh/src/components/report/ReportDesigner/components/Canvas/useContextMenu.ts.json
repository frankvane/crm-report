{
    "sourceFile": "src/components/report/ReportDesigner/components/Canvas/useContextMenu.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747125861792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747218441228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n }\r\n \r\n interface UseContextMenuProps {\r\n   components: CanvasComponent[];\r\n-  setSelectedIds: React.Dispatch<React.SetStateAction<string[]>>;\r\n+  setSelectedIds: (ids: string[]) => void;\r\n   handleDelete: (id: string) => void;\r\n   handleCopy: (id: string) => void;\r\n   handleMoveToTop: (id: string) => void;\r\n   handleMoveToBottom: (id: string) => void;\r\n"
                },
                {
                    "date": 1747227961811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +0,0 @@\n- \n\\ No newline at end of file\n"
                }
            ],
            "date": 1747125861792,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from \"react\";\r\n\r\nimport type { CanvasComponent } from \"@/components/report/ReportDesigner/types\";\r\n\r\nexport interface MenuItem {\r\n  label: string;\r\n  onClick: () => void;\r\n}\r\n\r\ninterface UseContextMenuProps {\r\n  components: CanvasComponent[];\r\n  setSelectedIds: React.Dispatch<React.SetStateAction<string[]>>;\r\n  handleDelete: (id: string) => void;\r\n  handleCopy: (id: string) => void;\r\n  handleMoveToTop: (id: string) => void;\r\n  handleMoveToBottom: (id: string) => void;\r\n  handleToggleLock: (id: string) => void;\r\n  handleToggleVisible: (id: string) => void;\r\n}\r\n\r\nexport function useContextMenu({\r\n  components,\r\n  setSelectedIds,\r\n  handleDelete,\r\n  handleCopy,\r\n  handleMoveToTop,\r\n  handleMoveToBottom,\r\n  handleToggleLock,\r\n  handleToggleVisible,\r\n}: UseContextMenuProps) {\r\n  const [contextMenu, setContextMenu] = useState<{\r\n    visible: boolean;\r\n    x: number;\r\n    y: number;\r\n    compId: string | null;\r\n  }>({ visible: false, x: 0, y: 0, compId: null });\r\n\r\n  // 关闭菜单\r\n  const closeContextMenu = () =>\r\n    setContextMenu({ visible: false, x: 0, y: 0, compId: null });\r\n\r\n  // 打开菜单\r\n  const handleContextMenu = (e: React.MouseEvent, compId: string) => {\r\n    e.preventDefault();\r\n    setSelectedIds([compId]);\r\n    setContextMenu({ visible: true, x: e.clientX, y: e.clientY, compId });\r\n  };\r\n\r\n  // 菜单项操作\r\n  const handleMenuCopy = () => {\r\n    if (contextMenu.compId) handleCopy(contextMenu.compId);\r\n    closeContextMenu();\r\n  };\r\n  const handleMenuMoveToTop = () => {\r\n    if (contextMenu.compId) handleMoveToTop(contextMenu.compId);\r\n    closeContextMenu();\r\n  };\r\n  const handleMenuMoveToBottom = () => {\r\n    if (contextMenu.compId) handleMoveToBottom(contextMenu.compId);\r\n    closeContextMenu();\r\n  };\r\n  const handleMenuToggleLock = () => {\r\n    if (contextMenu.compId) handleToggleLock(contextMenu.compId);\r\n    closeContextMenu();\r\n  };\r\n  const handleMenuToggleVisible = () => {\r\n    if (contextMenu.compId) handleToggleVisible(contextMenu.compId);\r\n    closeContextMenu();\r\n  };\r\n  const handleMenuDelete = () => {\r\n    if (contextMenu.compId) handleDelete(contextMenu.compId);\r\n    closeContextMenu();\r\n  };\r\n\r\n  // 监听点击空白处关闭菜单\r\n  useEffect(() => {\r\n    if (!contextMenu.visible) return;\r\n    const onClick = () => closeContextMenu();\r\n    window.addEventListener(\"click\", onClick);\r\n    return () => window.removeEventListener(\"click\", onClick);\r\n  }, [contextMenu.visible]);\r\n\r\n  // 菜单项生成\r\n  let menuItems: MenuItem[] = [];\r\n  if (contextMenu.compId) {\r\n    menuItems = [\r\n      { label: \"删除\", onClick: handleMenuDelete },\r\n      { label: \"复制\", onClick: handleMenuCopy },\r\n      { label: \"置顶\", onClick: handleMenuMoveToTop },\r\n      { label: \"置底\", onClick: handleMenuMoveToBottom },\r\n      {\r\n        label: (() => {\r\n          const comp = components.find((c) => c.id === contextMenu.compId);\r\n          return comp?.locked ? \"解锁\" : \"锁定\";\r\n        })(),\r\n        onClick: handleMenuToggleLock,\r\n      },\r\n      {\r\n        label: (() => {\r\n          const comp = components.find((c) => c.id === contextMenu.compId);\r\n          return comp?.visible === false ? \"显示\" : \"隐藏\";\r\n        })(),\r\n        onClick: handleMenuToggleVisible,\r\n      },\r\n    ];\r\n  }\r\n\r\n  return {\r\n    contextMenu,\r\n    closeContextMenu,\r\n    handleContextMenu,\r\n    menuItems,\r\n  };\r\n}\r\n"
        }
    ]
}