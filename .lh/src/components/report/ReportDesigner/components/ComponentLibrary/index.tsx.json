{
    "sourceFile": "src/components/report/ReportDesigner/components/ComponentLibrary/index.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1747055977560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747124550374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,7 @@\n-import { Divider, Typography } from \"antd\";\r\n-\r\n import React from \"react\";\r\n+import { useCanvasStore } from \"@/store/canvasStore\";\r\n \r\n-const { Title } = Typography;\r\n-\r\n export interface ComponentLibraryItem {\r\n   type: string;\r\n   name: string;\r\n   icon: string;\r\n@@ -14,64 +11,66 @@\n   components: ComponentLibraryItem[];\r\n   onDragStart: (e: React.DragEvent<HTMLDivElement>, type: string) => void;\r\n }\r\n \r\n-const transparentImg =\r\n-  \"data:image/svg+xml;base64,\" +\r\n-  btoa('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1\" height=\"1\"></svg>');\r\n+const ComponentLibrary: React.FC<ComponentLibraryProps> = ({ components, onDragStart }) => {\r\n+  const addComponent = useCanvasStore((state) => state.addComponent);\r\n+  const setSelectedIds = useCanvasStore((state) => state.setSelectedIds);\r\n \r\n-const ComponentLibrary: React.FC<ComponentLibraryProps> = ({\r\n-  components,\r\n-  onDragStart,\r\n-}) => (\r\n-  <div\r\n-    style={{\r\n-      width: 220,\r\n-      background: \"#fff\",\r\n-      borderRight: \"1px solid #f0f0f0\",\r\n-      padding: 0,\r\n-      color: \"#222\",\r\n-      fontFamily: \"inherit\",\r\n-    }}\r\n-  >\r\n-    <div style={{ padding: 20 }}>\r\n-      <Title level={5} style={{ marginTop: 0, color: \"#222\" }}>\r\n-        组件库\r\n-      </Title>\r\n-      <Divider style={{ margin: \"8px 0\" }} />\r\n-      <div style={{ display: \"flex\", flexDirection: \"column\", gap: 12 }}>\r\n-        {components.map((item) => (\r\n-          <div\r\n-            key={item.type}\r\n-            draggable\r\n-            onDragStart={(e) => {\r\n-              const img = new window.Image();\r\n-              img.src = transparentImg;\r\n-              e.dataTransfer.setDragImage(img, 0, 0);\r\n-              onDragStart(e, item.type);\r\n-            }}\r\n-            style={{\r\n-              display: \"flex\",\r\n-              alignItems: \"center\",\r\n-              padding: \"8px 12px\",\r\n-              border: \"1px solid #e5e5e5\",\r\n-              borderRadius: 6,\r\n-              background: \"#fafafa\",\r\n-              cursor: \"grab\",\r\n-              fontSize: 16,\r\n-              color: \"#222\",\r\n-              transition: \"background 0.2s, box-shadow 0.2s\",\r\n-              userSelect: \"none\",\r\n-            }}\r\n-            onMouseOver={(e) => (e.currentTarget.style.background = \"#f0f5ff\")}\r\n-            onMouseOut={(e) => (e.currentTarget.style.background = \"#fafafa\")}\r\n-          >\r\n-            <span style={{ marginRight: 8 }}>{item.icon}</span>\r\n-            {item.name}\r\n-          </div>\r\n-        ))}\r\n-      </div>\r\n+  // 拖拽结束时添加组件\r\n+  const handleDrop = (type: string, x: number, y: number) => {\r\n+    const comp = components.find((c) => c.type === type);\r\n+    if (!comp) return;\r\n+    const id = `${type}_${Date.now()}_${Math.floor(Math.random() * 10000)}`;\r\n+    let schemaProps = {};\r\n+    if (type === \"text\") {\r\n+      schemaProps = {\r\n+        text: \"文本内容\",\r\n+        fontSize: 14,\r\n+        color: \"#222222\",\r\n+        fontWeight: \"normal\",\r\n+        textAlign: \"left\",\r\n+        dataBinding: {\r\n+          source: \"\",\r\n+          field: \"\",\r\n+          format: \"none\",\r\n+          expression: \"\",\r\n+        },\r\n+      };\r\n+    }\r\n+    addComponent({\r\n+      ...comp,\r\n+      ...schemaProps,\r\n+      x,\r\n+      y,\r\n+      locked: false,\r\n+      visible: true,\r\n+      id,\r\n+    });\r\n+    setSelectedIds([id]);\r\n+  };\r\n+\r\n+  return (\r\n+    <div style={{ width: 80, background: \"#fff\", borderRight: \"1px solid #f0f0f0\", padding: \"16px 0\" }}>\r\n+      {components.map((item) => (\r\n+        <div\r\n+          key={item.type}\r\n+          draggable\r\n+          onDragStart={(e) => onDragStart(e, item.type)}\r\n+          style={{\r\n+            display: \"flex\",\r\n+            flexDirection: \"column\",\r\n+            alignItems: \"center\",\r\n+            marginBottom: 24,\r\n+            cursor: \"grab\",\r\n+            userSelect: \"none\",\r\n+          }}\r\n+        >\r\n+          <span style={{ fontSize: 28 }}>{item.icon}</span>\r\n+          <span style={{ fontSize: 13, color: \"#333\", marginTop: 4 }}>{item.name}</span>\r\n+        </div>\r\n+      ))}\r\n     </div>\r\n-  </div>\r\n-);\r\n+  );\r\n+};\r\n \r\n export default ComponentLibrary;\r\n"
                },
                {
                    "date": 1747124562115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,41 +18,8 @@\n }) => {\r\n   const addComponent = useCanvasStore((state) => state.addComponent);\r\n   const setSelectedIds = useCanvasStore((state) => state.setSelectedIds);\r\n \r\n-  // 拖拽结束时添加组件\r\n-  const handleDrop = (type: string, x: number, y: number) => {\r\n-    const comp = components.find((c) => c.type === type);\r\n-    if (!comp) return;\r\n-    const id = `${type}_${Date.now()}_${Math.floor(Math.random() * 10000)}`;\r\n-    let schemaProps = {};\r\n-    if (type === \"text\") {\r\n-      schemaProps = {\r\n-        text: \"文本内容\",\r\n-        fontSize: 14,\r\n-        color: \"#222222\",\r\n-        fontWeight: \"normal\",\r\n-        textAlign: \"left\",\r\n-        dataBinding: {\r\n-          source: \"\",\r\n-          field: \"\",\r\n-          format: \"none\",\r\n-          expression: \"\",\r\n-        },\r\n-      };\r\n-    }\r\n-    addComponent({\r\n-      ...comp,\r\n-      ...schemaProps,\r\n-      x,\r\n-      y,\r\n-      locked: false,\r\n-      visible: true,\r\n-      id,\r\n-    });\r\n-    setSelectedIds([id]);\r\n-  };\r\n-\r\n   return (\r\n     <div\r\n       style={{\r\n         width: 80,\r\n"
                },
                {
                    "date": 1747124576563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import React from \"react\";\r\n-import { useCanvasStore } from \"@/store/canvasStore\";\r\n \r\n export interface ComponentLibraryItem {\r\n   type: string;\r\n   name: string;\r\n@@ -11,24 +10,11 @@\n   components: ComponentLibraryItem[];\r\n   onDragStart: (e: React.DragEvent<HTMLDivElement>, type: string) => void;\r\n }\r\n \r\n-const ComponentLibrary: React.FC<ComponentLibraryProps> = ({\r\n-  components,\r\n-  onDragStart,\r\n-}) => {\r\n-  const addComponent = useCanvasStore((state) => state.addComponent);\r\n-  const setSelectedIds = useCanvasStore((state) => state.setSelectedIds);\r\n-\r\n+const ComponentLibrary: React.FC<ComponentLibraryProps> = ({ components, onDragStart }) => {\r\n   return (\r\n-    <div\r\n-      style={{\r\n-        width: 80,\r\n-        background: \"#fff\",\r\n-        borderRight: \"1px solid #f0f0f0\",\r\n-        padding: \"16px 0\",\r\n-      }}\r\n-    >\r\n+    <div style={{ width: 80, background: \"#fff\", borderRight: \"1px solid #f0f0f0\", padding: \"16px 0\" }}>\r\n       {components.map((item) => (\r\n         <div\r\n           key={item.type}\r\n           draggable\r\n@@ -42,11 +28,9 @@\n             userSelect: \"none\",\r\n           }}\r\n         >\r\n           <span style={{ fontSize: 28 }}>{item.icon}</span>\r\n-          <span style={{ fontSize: 13, color: \"#333\", marginTop: 4 }}>\r\n-            {item.name}\r\n-          </span>\r\n+          <span style={{ fontSize: 13, color: \"#333\", marginTop: 4 }}>{item.name}</span>\r\n         </div>\r\n       ))}\r\n     </div>\r\n   );\r\n"
                }
            ],
            "date": 1747055977560,
            "name": "Commit-0",
            "content": "import { Divider, Typography } from \"antd\";\r\n\r\nimport React from \"react\";\r\n\r\nconst { Title } = Typography;\r\n\r\nexport interface ComponentLibraryItem {\r\n  type: string;\r\n  name: string;\r\n  icon: string;\r\n}\r\n\r\ninterface ComponentLibraryProps {\r\n  components: ComponentLibraryItem[];\r\n  onDragStart: (e: React.DragEvent<HTMLDivElement>, type: string) => void;\r\n}\r\n\r\nconst transparentImg =\r\n  \"data:image/svg+xml;base64,\" +\r\n  btoa('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1\" height=\"1\"></svg>');\r\n\r\nconst ComponentLibrary: React.FC<ComponentLibraryProps> = ({\r\n  components,\r\n  onDragStart,\r\n}) => (\r\n  <div\r\n    style={{\r\n      width: 220,\r\n      background: \"#fff\",\r\n      borderRight: \"1px solid #f0f0f0\",\r\n      padding: 0,\r\n      color: \"#222\",\r\n      fontFamily: \"inherit\",\r\n    }}\r\n  >\r\n    <div style={{ padding: 20 }}>\r\n      <Title level={5} style={{ marginTop: 0, color: \"#222\" }}>\r\n        组件库\r\n      </Title>\r\n      <Divider style={{ margin: \"8px 0\" }} />\r\n      <div style={{ display: \"flex\", flexDirection: \"column\", gap: 12 }}>\r\n        {components.map((item) => (\r\n          <div\r\n            key={item.type}\r\n            draggable\r\n            onDragStart={(e) => {\r\n              const img = new window.Image();\r\n              img.src = transparentImg;\r\n              e.dataTransfer.setDragImage(img, 0, 0);\r\n              onDragStart(e, item.type);\r\n            }}\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              padding: \"8px 12px\",\r\n              border: \"1px solid #e5e5e5\",\r\n              borderRadius: 6,\r\n              background: \"#fafafa\",\r\n              cursor: \"grab\",\r\n              fontSize: 16,\r\n              color: \"#222\",\r\n              transition: \"background 0.2s, box-shadow 0.2s\",\r\n              userSelect: \"none\",\r\n            }}\r\n            onMouseOver={(e) => (e.currentTarget.style.background = \"#f0f5ff\")}\r\n            onMouseOut={(e) => (e.currentTarget.style.background = \"#fafafa\")}\r\n          >\r\n            <span style={{ marginRight: 8 }}>{item.icon}</span>\r\n            {item.name}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ComponentLibrary;\r\n"
        }
    ]
}