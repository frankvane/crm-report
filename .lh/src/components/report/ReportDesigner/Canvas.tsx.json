{
    "sourceFile": "src/components/report/ReportDesigner/Canvas.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1747022364736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747022402536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,13 @@\n-import React from 'react';\r\n+import React from \"react\";\r\n \r\n const Canvas: React.FC = () => {\r\n-  return <div style={{ minHeight: 400, border: '1px dashed #ccc', background: '#fff' }}>设计画布区域</div>;\r\n+  return (\r\n+    <div\r\n\\ No newline at end of file\n+      style={{ minHeight: 400, border: \"1px dashed #ccc\", background: \"#fff\" }}\r\n+    >\r\n+      设计画布区域\r\n+    </div>\r\n+  );\r\n };\r\n \r\n-export default Canvas;\n+export default Canvas;\r\n"
                },
                {
                    "date": 1747022408711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,5 +9,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Canvas;\n\\ No newline at end of file\n+export default Canvas;\r\n"
                },
                {
                    "date": 1747039411837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,112 @@\n-import React from \"react\";\r\n+import React, { useRef, useState } from \"react\";\r\n \r\n-const Canvas: React.FC = () => {\r\n+import type { CanvasComponent } from \"./index\";\r\n+\r\n+interface CanvasProps {\r\n+  components: CanvasComponent[];\r\n+  onDrop: (type: string, x: number, y: number) => void;\r\n+  onComponentMove: (id: string, x: number, y: number) => void;\r\n+  selectedId: string | null;\r\n+  setSelectedId: (id: string) => void;\r\n+}\r\n+\r\n+const Canvas: React.FC<CanvasProps> = ({ components, onDrop, onComponentMove, selectedId, setSelectedId }) => {\r\n+  const [draggingId, setDraggingId] = useState<string | null>(null);\r\n+  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({ x: 0, y: 0 });\r\n+  const canvasRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  // 拖拽新组件到画布\r\n+  const handleDrop = (e: React.DragEvent) => {\r\n+    e.preventDefault();\r\n+    const type = e.dataTransfer.getData(\"type\");\r\n+    if (!type) return;\r\n+    const rect = canvasRef.current?.getBoundingClientRect();\r\n+    if (!rect) return;\r\n+    const x = e.clientX - rect.left - 60; // 居中\r\n+    const y = e.clientY - rect.top - 20;\r\n+    onDrop(type, x, y);\r\n+  };\r\n+\r\n+  // 画布内组件拖拽\r\n+  const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n+    setDraggingId(id);\r\n+    setDragOffset({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n+  };\r\n+  const handleMouseMove = (e: React.MouseEvent) => {\r\n+    if (!draggingId) return;\r\n+    const rect = canvasRef.current?.getBoundingClientRect();\r\n+    if (!rect) return;\r\n+    const x = e.clientX - rect.left - dragOffset.x;\r\n+    const y = e.clientY - rect.top - dragOffset.y;\r\n+    onComponentMove(draggingId, x, y);\r\n+  };\r\n+  const handleMouseUp = () => setDraggingId(null);\r\n+\r\n   return (\r\n     <div\r\n-      style={{ minHeight: 400, border: \"1px dashed #ccc\", background: \"#fff\" }}\r\n+      ref={canvasRef}\r\n+      style={{\r\n+        flex: 1,\r\n+        padding: \"32px 0\",\r\n+        display: \"flex\",\r\n+        justifyContent: \"center\",\r\n+        alignItems: \"flex-start\",\r\n+        minWidth: 0,\r\n+        minHeight: 0,\r\n+        overflow: \"auto\",\r\n+        background: \"#f5f6fa\",\r\n+      }}\r\n+      onDragOver={e => e.preventDefault()}\r\n+      onDrop={handleDrop}\r\n+      onMouseMove={handleMouseMove}\r\n+      onMouseUp={handleMouseUp}\r\n     >\r\n-      设计画布区域\r\n+      <div\r\n+        style={{\r\n+          position: \"relative\",\r\n+          width: 794,\r\n+          height: 1123,\r\n+          background: \"#fff\",\r\n+          border: \"2px solid #bfbfbf\",\r\n+          borderRadius: 12,\r\n+        }}\r\n+      >\r\n+        {components.map((comp) => (\r\n+          <div\r\n+            key={comp.id}\r\n+            style={{\r\n+              position: \"absolute\",\r\n+              left: comp.x,\r\n+              top: comp.y,\r\n+              width: 120,\r\n+              height: 40,\r\n+              border: comp.id === selectedId ? \"2px solid #1890ff\" : \"1px solid #e5e5e5\",\r\n+              borderRadius: 6,\r\n+              background: \"#fafafa\",\r\n+              display: \"flex\",\r\n+              alignItems: \"center\",\r\n+              gap: 8,\r\n+              fontSize: 16,\r\n+              color: \"#333\",\r\n+              cursor: \"move\",\r\n+              zIndex: comp.id === selectedId ? 10 : 1,\r\n+            }}\r\n+            onMouseDown={e => handleMouseDown(comp.id, e)}\r\n+            onClick={() => setSelectedId(comp.id)}\r\n+          >\r\n+            <span style={{ marginLeft: 8 }}>{comp.icon}</span>\r\n+            {/* 这里实际应渲染 TableComponent/TextComponent/ChartComponent，由父组件传递或自行 import */}\r\n+            {comp.type === \"table\"\r\n+              ? \"[表格]\"\r\n+              : comp.type === \"text\"\r\n+              ? \"[文本]\"\r\n+              : comp.type === \"chart\"\r\n+              ? \"[图表]\"\r\n+              : `${comp.name}组件`}\r\n+          </div>\r\n+        ))}\r\n+      </div>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1747039450801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,11 +9,20 @@\n   selectedId: string | null;\r\n   setSelectedId: (id: string) => void;\r\n }\r\n \r\n-const Canvas: React.FC<CanvasProps> = ({ components, onDrop, onComponentMove, selectedId, setSelectedId }) => {\r\n+const Canvas: React.FC<CanvasProps> = ({\r\n+  components,\r\n+  onDrop,\r\n+  onComponentMove,\r\n+  selectedId,\r\n+  setSelectedId,\r\n+}) => {\r\n   const [draggingId, setDraggingId] = useState<string | null>(null);\r\n-  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({ x: 0, y: 0 });\r\n+  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\r\n+    x: 0,\r\n+    y: 0,\r\n+  });\r\n   const canvasRef = useRef<HTMLDivElement>(null);\r\n \r\n   // 拖拽新组件到画布\r\n   const handleDrop = (e: React.DragEvent) => {\r\n@@ -55,9 +64,9 @@\n         minHeight: 0,\r\n         overflow: \"auto\",\r\n         background: \"#f5f6fa\",\r\n       }}\r\n-      onDragOver={e => e.preventDefault()}\r\n+      onDragOver={(e) => e.preventDefault()}\r\n       onDrop={handleDrop}\r\n       onMouseMove={handleMouseMove}\r\n       onMouseUp={handleMouseUp}\r\n     >\r\n@@ -79,9 +88,12 @@\n               left: comp.x,\r\n               top: comp.y,\r\n               width: 120,\r\n               height: 40,\r\n-              border: comp.id === selectedId ? \"2px solid #1890ff\" : \"1px solid #e5e5e5\",\r\n+              border:\r\n+                comp.id === selectedId\r\n+                  ? \"2px solid #1890ff\"\r\n+                  : \"1px solid #e5e5e5\",\r\n               borderRadius: 6,\r\n               background: \"#fafafa\",\r\n               display: \"flex\",\r\n               alignItems: \"center\",\r\n@@ -90,9 +102,9 @@\n               color: \"#333\",\r\n               cursor: \"move\",\r\n               zIndex: comp.id === selectedId ? 10 : 1,\r\n             }}\r\n-            onMouseDown={e => handleMouseDown(comp.id, e)}\r\n+            onMouseDown={(e) => handleMouseDown(comp.id, e)}\r\n             onClick={() => setSelectedId(comp.id)}\r\n           >\r\n             <span style={{ marginLeft: 8 }}>{comp.icon}</span>\r\n             {/* 这里实际应渲染 TableComponent/TextComponent/ChartComponent，由父组件传递或自行 import */}\r\n"
                },
                {
                    "date": 1747039632957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,33 +7,95 @@\n   onDrop: (type: string, x: number, y: number) => void;\r\n   onComponentMove: (id: string, x: number, y: number) => void;\r\n   selectedId: string | null;\r\n   setSelectedId: (id: string) => void;\r\n+  width: number;\r\n+  height: number;\r\n }\r\n \r\n+const SNAP_THRESHOLD = 8; // px 吸附阈值\r\n+const COMPONENT_WIDTH = 120;\r\n+const COMPONENT_HEIGHT = 40;\r\n+\r\n const Canvas: React.FC<CanvasProps> = ({\r\n   components,\r\n   onDrop,\r\n   onComponentMove,\r\n   selectedId,\r\n   setSelectedId,\r\n+  width,\r\n+  height,\r\n }) => {\r\n   const [draggingId, setDraggingId] = useState<string | null>(null);\r\n   const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\r\n     x: 0,\r\n     y: 0,\r\n   });\r\n+  const [guideLines, setGuideLines] = useState<{ x?: number; y?: number } | null>(null);\r\n   const canvasRef = useRef<HTMLDivElement>(null);\r\n \r\n+  // 计算吸附和辅助线\r\n+  function getSnapAndGuides(x: number, y: number, movingId: string) {\r\n+    let snapX = x;\r\n+    let snapY = y;\r\n+    const guide: { x?: number; y?: number } = {};\r\n+    // 画布边缘吸附\r\n+    if (Math.abs(x) < SNAP_THRESHOLD) {\r\n+      snapX = 0;\r\n+      guide.x = 0;\r\n+    }\r\n+    if (Math.abs(y) < SNAP_THRESHOLD) {\r\n+      snapY = 0;\r\n+      guide.y = 0;\r\n+    }\r\n+    if (Math.abs(x + COMPONENT_WIDTH - width) < SNAP_THRESHOLD) {\r\n+      snapX = width - COMPONENT_WIDTH;\r\n+      guide.x = width - COMPONENT_WIDTH + COMPONENT_WIDTH / 2;\r\n+    }\r\n+    if (Math.abs(y + COMPONENT_HEIGHT - height) < SNAP_THRESHOLD) {\r\n+      snapY = height - COMPONENT_HEIGHT;\r\n+      guide.y = height - COMPONENT_HEIGHT + COMPONENT_HEIGHT / 2;\r\n+    }\r\n+    // 与其他组件吸附\r\n+    for (const comp of components) {\r\n+      if (comp.id === movingId) continue;\r\n+      if (Math.abs(x - comp.x) < SNAP_THRESHOLD) {\r\n+        snapX = comp.x;\r\n+        guide.x = comp.x;\r\n+      }\r\n+      if (Math.abs(y - comp.y) < SNAP_THRESHOLD) {\r\n+        snapY = comp.y;\r\n+        guide.y = comp.y;\r\n+      }\r\n+      if (Math.abs(x + COMPONENT_WIDTH - (comp.x + COMPONENT_WIDTH)) < SNAP_THRESHOLD) {\r\n+        snapX = comp.x + COMPONENT_WIDTH - COMPONENT_WIDTH;\r\n+        guide.x = comp.x + COMPONENT_WIDTH / 2;\r\n+      }\r\n+      if (Math.abs(y + COMPONENT_HEIGHT - (comp.y + COMPONENT_HEIGHT)) < SNAP_THRESHOLD) {\r\n+        snapY = comp.y + COMPONENT_HEIGHT - COMPONENT_HEIGHT;\r\n+        guide.y = comp.y + COMPONENT_HEIGHT / 2;\r\n+      }\r\n+      if (Math.abs(x + COMPONENT_WIDTH / 2 - (comp.x + COMPONENT_WIDTH / 2)) < SNAP_THRESHOLD) {\r\n+        snapX = comp.x;\r\n+        guide.x = comp.x + COMPONENT_WIDTH / 2;\r\n+      }\r\n+      if (Math.abs(y + COMPONENT_HEIGHT / 2 - (comp.y + COMPONENT_HEIGHT / 2)) < SNAP_THRESHOLD) {\r\n+        snapY = comp.y;\r\n+        guide.y = comp.y + COMPONENT_HEIGHT / 2;\r\n+      }\r\n+    }\r\n+    return { snapX, snapY, guide };\r\n+  }\r\n+\r\n   // 拖拽新组件到画布\r\n   const handleDrop = (e: React.DragEvent) => {\r\n     e.preventDefault();\r\n     const type = e.dataTransfer.getData(\"type\");\r\n     if (!type) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n     if (!rect) return;\r\n-    const x = e.clientX - rect.left - 60; // 居中\r\n-    const y = e.clientY - rect.top - 20;\r\n+    const x = e.clientX - rect.left - COMPONENT_WIDTH / 2;\r\n+    const y = e.clientY - rect.top - COMPONENT_HEIGHT / 2;\r\n     onDrop(type, x, y);\r\n   };\r\n \r\n   // 画布内组件拖拽\r\n@@ -44,13 +106,20 @@\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n     if (!rect) return;\r\n-    const x = e.clientX - rect.left - dragOffset.x;\r\n-    const y = e.clientY - rect.top - dragOffset.y;\r\n-    onComponentMove(draggingId, x, y);\r\n+    const comp = components.find(c => c.id === draggingId);\r\n+    if (!comp) return;\r\n+    const rawX = e.clientX - rect.left - dragOffset.x;\r\n+    const rawY = e.clientY - rect.top - dragOffset.y;\r\n+    const { snapX, snapY, guide } = getSnapAndGuides(rawX, rawY, draggingId);\r\n+    setGuideLines(guide);\r\n+    onComponentMove(draggingId, snapX, snapY);\r\n   };\r\n-  const handleMouseUp = () => setDraggingId(null);\r\n+  const handleMouseUp = () => {\r\n+    setDraggingId(null);\r\n+    setGuideLines(null);\r\n+  };\r\n \r\n   return (\r\n     <div\r\n       ref={canvasRef}\r\n@@ -72,24 +141,53 @@\n     >\r\n       <div\r\n         style={{\r\n           position: \"relative\",\r\n-          width: 794,\r\n-          height: 1123,\r\n+          width: width,\r\n+          height: height,\r\n           background: \"#fff\",\r\n           border: \"2px solid #bfbfbf\",\r\n           borderRadius: 12,\r\n         }}\r\n       >\r\n+        {/* 辅助线渲染 */}\r\n+        {guideLines?.x !== undefined && (\r\n+          <div\r\n+            style={{\r\n+              position: \"absolute\",\r\n+              left: guideLines.x - 1,\r\n+              top: 0,\r\n+              width: 1,\r\n+              height: \"100%\",\r\n+              borderLeft: \"2px solid #1890ff\",\r\n+              zIndex: 99,\r\n+              pointerEvents: \"none\",\r\n+            }}\r\n+          />\r\n+        )}\r\n+        {guideLines?.y !== undefined && (\r\n+          <div\r\n+            style={{\r\n+              position: \"absolute\",\r\n+              top: guideLines.y - 1,\r\n+              left: 0,\r\n+              height: 1,\r\n+              width: \"100%\",\r\n+              borderTop: \"2px solid #1890ff\",\r\n+              zIndex: 99,\r\n+              pointerEvents: \"none\",\r\n+            }}\r\n+          />\r\n+        )}\r\n         {components.map((comp) => (\r\n           <div\r\n             key={comp.id}\r\n             style={{\r\n               position: \"absolute\",\r\n               left: comp.x,\r\n               top: comp.y,\r\n-              width: 120,\r\n-              height: 40,\r\n+              width: COMPONENT_WIDTH,\r\n+              height: COMPONENT_HEIGHT,\r\n               border:\r\n                 comp.id === selectedId\r\n                   ? \"2px solid #1890ff\"\r\n                   : \"1px solid #e5e5e5\",\r\n"
                },
                {
                    "date": 1747039745655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,10 @@\n const SNAP_THRESHOLD = 8; // px 吸附阈值\r\n const COMPONENT_WIDTH = 120;\r\n const COMPONENT_HEIGHT = 40;\r\n \r\n+const RULER_STEP = 40; // 刻度尺步长 px\r\n+\r\n const Canvas: React.FC<CanvasProps> = ({\r\n   components,\r\n   onDrop,\r\n   onComponentMove,\r\n@@ -134,8 +136,12 @@\n     setDraggingId(null);\r\n     setGuideLines(null);\r\n   };\r\n \r\n+  // 计算高亮刻度\r\n+  const highlightX = guideLines?.x !== undefined ? guideLines.x : undefined;\r\n+  const highlightY = guideLines?.y !== undefined ? guideLines.y : undefined;\r\n+\r\n   return (\r\n     <div\r\n       ref={canvasRef}\r\n       style={{\r\n@@ -163,8 +169,79 @@\n           border: \"2px solid #bfbfbf\",\r\n           borderRadius: 12,\r\n         }}\r\n       >\r\n+        {/* 顶部刻度尺 */}\r\n+        <div\r\n+          style={{\r\n+            position: \"absolute\",\r\n+            left: 24,\r\n+            top: 0,\r\n+            width: width - 24,\r\n+            height: 24,\r\n+            background: \"linear-gradient(to right, #f5f6fa 80%, transparent)\",\r\n+            zIndex: 2,\r\n+            display: \"flex\",\r\n+          }}\r\n+        >\r\n+          {Array.from({ length: Math.ceil((width - 24) / RULER_STEP) }).map((_, i) => {\r\n+            const px = i * RULER_STEP;\r\n+            const isHighlight = highlightX !== undefined && Math.abs(px - highlightX) < RULER_STEP / 2;\r\n+            return (\r\n+              <div\r\n+                key={i}\r\n+                style={{\r\n+                  width: RULER_STEP,\r\n+                  height: 24,\r\n+                  borderRight: \"1px solid #eee\",\r\n+                  color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n+                  fontSize: 12,\r\n+                  textAlign: \"center\",\r\n+                  lineHeight: \"24px\",\r\n+                  background: isHighlight ? \"#e6f7ff\" : undefined,\r\n+                  transition: \"background 0.2s, color 0.2s\",\r\n+                }}\r\n+              >\r\n+                {px}\r\n+              </div>\r\n+            );\r\n+          })}\r\n+        </div>\r\n+        {/* 左侧刻度尺 */}\r\n+        <div\r\n+          style={{\r\n+            position: \"absolute\",\r\n+            left: 0,\r\n+            top: 24,\r\n+            width: 24,\r\n+            height: height - 24,\r\n+            background: \"linear-gradient(to bottom, #f5f6fa 80%, transparent)\",\r\n+            zIndex: 2,\r\n+          }}\r\n+        >\r\n+          {Array.from({ length: Math.ceil((height - 24) / RULER_STEP) }).map((_, i) => {\r\n+            const py = i * RULER_STEP;\r\n+            const isHighlight = highlightY !== undefined && Math.abs(py - highlightY) < RULER_STEP / 2;\r\n+            return (\r\n+              <div\r\n+                key={i}\r\n+                style={{\r\n+                  height: RULER_STEP,\r\n+                  width: 24,\r\n+                  borderBottom: \"1px solid #eee\",\r\n+                  color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n+                  fontSize: 12,\r\n+                  textAlign: \"center\",\r\n+                  lineHeight: \"40px\",\r\n+                  background: isHighlight ? \"#e6f7ff\" : undefined,\r\n+                  transition: \"background 0.2s, color 0.2s\",\r\n+                }}\r\n+              >\r\n+                {py}\r\n+              </div>\r\n+            );\r\n+          })}\r\n+        </div>\r\n         {/* 辅助线渲染 */}\r\n         {guideLines?.x !== undefined && (\r\n           <div\r\n             style={{\r\n"
                },
                {
                    "date": 1747039771017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,12 @@\n   const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\r\n     x: 0,\r\n     y: 0,\r\n   });\r\n-  const [guideLines, setGuideLines] = useState<{ x?: number; y?: number } | null>(null);\r\n+  const [guideLines, setGuideLines] = useState<{\r\n+    x?: number;\r\n+    y?: number;\r\n+  } | null>(null);\r\n   const canvasRef = useRef<HTMLDivElement>(null);\r\n \r\n   // 计算吸附和辅助线\r\n   function getSnapAndGuides(x: number, y: number, movingId: string) {\r\n@@ -67,21 +70,33 @@\n       if (Math.abs(y - comp.y) < SNAP_THRESHOLD) {\r\n         snapY = comp.y;\r\n         guide.y = comp.y;\r\n       }\r\n-      if (Math.abs(x + COMPONENT_WIDTH - (comp.x + COMPONENT_WIDTH)) < SNAP_THRESHOLD) {\r\n+      if (\r\n+        Math.abs(x + COMPONENT_WIDTH - (comp.x + COMPONENT_WIDTH)) <\r\n+        SNAP_THRESHOLD\r\n+      ) {\r\n         snapX = comp.x + COMPONENT_WIDTH - COMPONENT_WIDTH;\r\n         guide.x = comp.x + COMPONENT_WIDTH / 2;\r\n       }\r\n-      if (Math.abs(y + COMPONENT_HEIGHT - (comp.y + COMPONENT_HEIGHT)) < SNAP_THRESHOLD) {\r\n+      if (\r\n+        Math.abs(y + COMPONENT_HEIGHT - (comp.y + COMPONENT_HEIGHT)) <\r\n+        SNAP_THRESHOLD\r\n+      ) {\r\n         snapY = comp.y + COMPONENT_HEIGHT - COMPONENT_HEIGHT;\r\n         guide.y = comp.y + COMPONENT_HEIGHT / 2;\r\n       }\r\n-      if (Math.abs(x + COMPONENT_WIDTH / 2 - (comp.x + COMPONENT_WIDTH / 2)) < SNAP_THRESHOLD) {\r\n+      if (\r\n+        Math.abs(x + COMPONENT_WIDTH / 2 - (comp.x + COMPONENT_WIDTH / 2)) <\r\n+        SNAP_THRESHOLD\r\n+      ) {\r\n         snapX = comp.x;\r\n         guide.x = comp.x + COMPONENT_WIDTH / 2;\r\n       }\r\n-      if (Math.abs(y + COMPONENT_HEIGHT / 2 - (comp.y + COMPONENT_HEIGHT / 2)) < SNAP_THRESHOLD) {\r\n+      if (\r\n+        Math.abs(y + COMPONENT_HEIGHT / 2 - (comp.y + COMPONENT_HEIGHT / 2)) <\r\n+        SNAP_THRESHOLD\r\n+      ) {\r\n         snapY = comp.y;\r\n         guide.y = comp.y + COMPONENT_HEIGHT / 2;\r\n       }\r\n     }\r\n@@ -108,9 +123,9 @@\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n     if (!rect) return;\r\n-    const comp = components.find(c => c.id === draggingId);\r\n+    const comp = components.find((c) => c.id === draggingId);\r\n     if (!comp) return;\r\n     const rawX = e.clientX - rect.left - dragOffset.x;\r\n     const rawY = e.clientY - rect.top - dragOffset.y;\r\n     const { snapX, snapY, guide } = getSnapAndGuides(rawX, rawY, draggingId);\r\n@@ -167,30 +182,34 @@\n             zIndex: 2,\r\n             display: \"flex\",\r\n           }}\r\n         >\r\n-          {Array.from({ length: Math.ceil((width - 24) / RULER_STEP) }).map((_, i) => {\r\n-            const px = i * RULER_STEP;\r\n-            const isHighlight = highlightX !== undefined && Math.abs(px - highlightX) < RULER_STEP / 2;\r\n-            return (\r\n-              <div\r\n-                key={i}\r\n-                style={{\r\n-                  width: RULER_STEP,\r\n-                  height: 24,\r\n-                  borderRight: \"1px solid #eee\",\r\n-                  color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n-                  fontSize: 12,\r\n-                  textAlign: \"center\",\r\n-                  lineHeight: \"24px\",\r\n-                  background: isHighlight ? \"#e6f7ff\" : undefined,\r\n-                  transition: \"background 0.2s, color 0.2s\",\r\n-                }}\r\n-              >\r\n-                {px}\r\n-              </div>\r\n-            );\r\n-          })}\r\n+          {Array.from({ length: Math.ceil((width - 24) / RULER_STEP) }).map(\r\n+            (_, i) => {\r\n+              const px = i * RULER_STEP;\r\n+              const isHighlight =\r\n+                highlightX !== undefined &&\r\n+                Math.abs(px - highlightX) < RULER_STEP / 2;\r\n+              return (\r\n+                <div\r\n+                  key={i}\r\n+                  style={{\r\n+                    width: RULER_STEP,\r\n+                    height: 24,\r\n+                    borderRight: \"1px solid #eee\",\r\n+                    color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n+                    fontSize: 12,\r\n+                    textAlign: \"center\",\r\n+                    lineHeight: \"24px\",\r\n+                    background: isHighlight ? \"#e6f7ff\" : undefined,\r\n+                    transition: \"background 0.2s, color 0.2s\",\r\n+                  }}\r\n+                >\r\n+                  {px}\r\n+                </div>\r\n+              );\r\n+            }\r\n+          )}\r\n         </div>\r\n         {/* 左侧刻度尺 */}\r\n         <div\r\n           style={{\r\n@@ -202,30 +221,34 @@\n             background: \"linear-gradient(to bottom, #f5f6fa 80%, transparent)\",\r\n             zIndex: 2,\r\n           }}\r\n         >\r\n-          {Array.from({ length: Math.ceil((height - 24) / RULER_STEP) }).map((_, i) => {\r\n-            const py = i * RULER_STEP;\r\n-            const isHighlight = highlightY !== undefined && Math.abs(py - highlightY) < RULER_STEP / 2;\r\n-            return (\r\n-              <div\r\n-                key={i}\r\n-                style={{\r\n-                  height: RULER_STEP,\r\n-                  width: 24,\r\n-                  borderBottom: \"1px solid #eee\",\r\n-                  color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n-                  fontSize: 12,\r\n-                  textAlign: \"center\",\r\n-                  lineHeight: \"40px\",\r\n-                  background: isHighlight ? \"#e6f7ff\" : undefined,\r\n-                  transition: \"background 0.2s, color 0.2s\",\r\n-                }}\r\n-              >\r\n-                {py}\r\n-              </div>\r\n-            );\r\n-          })}\r\n+          {Array.from({ length: Math.ceil((height - 24) / RULER_STEP) }).map(\r\n+            (_, i) => {\r\n+              const py = i * RULER_STEP;\r\n+              const isHighlight =\r\n+                highlightY !== undefined &&\r\n+                Math.abs(py - highlightY) < RULER_STEP / 2;\r\n+              return (\r\n+                <div\r\n+                  key={i}\r\n+                  style={{\r\n+                    height: RULER_STEP,\r\n+                    width: 24,\r\n+                    borderBottom: \"1px solid #eee\",\r\n+                    color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n+                    fontSize: 12,\r\n+                    textAlign: \"center\",\r\n+                    lineHeight: \"40px\",\r\n+                    background: isHighlight ? \"#e6f7ff\" : undefined,\r\n+                    transition: \"background 0.2s, color 0.2s\",\r\n+                  }}\r\n+                >\r\n+                  {py}\r\n+                </div>\r\n+              );\r\n+            }\r\n+          )}\r\n         </div>\r\n         {/* 辅助线渲染 */}\r\n         {guideLines?.x !== undefined && (\r\n           <div\r\n"
                },
                {
                    "date": 1747039856001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n \r\n const SNAP_THRESHOLD = 8; // px 吸附阈值\r\n const COMPONENT_WIDTH = 120;\r\n const COMPONENT_HEIGHT = 40;\r\n-\r\n const RULER_STEP = 40; // 刻度尺步长 px\r\n+const RULER_SIZE = 24; // 刻度尺宽度 px\r\n \r\n const Canvas: React.FC<CanvasProps> = ({\r\n   components,\r\n   onDrop,\r\n@@ -51,15 +51,15 @@\n     if (Math.abs(y) < SNAP_THRESHOLD) {\r\n       snapY = 0;\r\n       guide.y = 0;\r\n     }\r\n-    if (Math.abs(x + COMPONENT_WIDTH - width) < SNAP_THRESHOLD) {\r\n-      snapX = width - COMPONENT_WIDTH;\r\n-      guide.x = width - COMPONENT_WIDTH + COMPONENT_WIDTH / 2;\r\n+    if (Math.abs(x + COMPONENT_WIDTH - (width - RULER_SIZE)) < SNAP_THRESHOLD) {\r\n+      snapX = width - RULER_SIZE - COMPONENT_WIDTH;\r\n+      guide.x = width - RULER_SIZE - COMPONENT_WIDTH + COMPONENT_WIDTH / 2;\r\n     }\r\n-    if (Math.abs(y + COMPONENT_HEIGHT - height) < SNAP_THRESHOLD) {\r\n-      snapY = height - COMPONENT_HEIGHT;\r\n-      guide.y = height - COMPONENT_HEIGHT + COMPONENT_HEIGHT / 2;\r\n+    if (Math.abs(y + COMPONENT_HEIGHT - (height - RULER_SIZE)) < SNAP_THRESHOLD) {\r\n+      snapY = height - RULER_SIZE - COMPONENT_HEIGHT;\r\n+      guide.y = height - RULER_SIZE - COMPONENT_HEIGHT + COMPONENT_HEIGHT / 2;\r\n     }\r\n     // 与其他组件吸附\r\n     for (const comp of components) {\r\n       if (comp.id === movingId) continue;\r\n@@ -109,10 +109,10 @@\n     const type = e.dataTransfer.getData(\"type\");\r\n     if (!type) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n     if (!rect) return;\r\n-    const x = e.clientX - rect.left - COMPONENT_WIDTH / 2;\r\n-    const y = e.clientY - rect.top - COMPONENT_HEIGHT / 2;\r\n+    const x = e.clientX - rect.left - RULER_SIZE - COMPONENT_WIDTH / 2;\r\n+    const y = e.clientY - rect.top - RULER_SIZE - COMPONENT_HEIGHT / 2;\r\n     onDrop(type, x, y);\r\n   };\r\n \r\n   // 画布内组件拖拽\r\n@@ -125,10 +125,10 @@\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n     if (!rect) return;\r\n     const comp = components.find((c) => c.id === draggingId);\r\n     if (!comp) return;\r\n-    const rawX = e.clientX - rect.left - dragOffset.x;\r\n-    const rawY = e.clientY - rect.top - dragOffset.y;\r\n+    const rawX = e.clientX - rect.left - RULER_SIZE - dragOffset.x;\r\n+    const rawY = e.clientY - rect.top - RULER_SIZE - dragOffset.y;\r\n     const { snapX, snapY, guide } = getSnapAndGuides(rawX, rawY, draggingId);\r\n     setGuideLines(guide);\r\n     onComponentMove(draggingId, snapX, snapY);\r\n   };\r\n@@ -173,18 +173,18 @@\n         {/* 顶部刻度尺 */}\r\n         <div\r\n           style={{\r\n             position: \"absolute\",\r\n-            left: 24,\r\n+            left: RULER_SIZE,\r\n             top: 0,\r\n-            width: width - 24,\r\n-            height: 24,\r\n+            width: width - RULER_SIZE,\r\n+            height: RULER_SIZE,\r\n             background: \"linear-gradient(to right, #f5f6fa 80%, transparent)\",\r\n-            zIndex: 2,\r\n+            zIndex: 100,\r\n             display: \"flex\",\r\n           }}\r\n         >\r\n-          {Array.from({ length: Math.ceil((width - 24) / RULER_STEP) }).map(\r\n+          {Array.from({ length: Math.ceil((width - RULER_SIZE) / RULER_STEP) }).map(\r\n             (_, i) => {\r\n               const px = i * RULER_STEP;\r\n               const isHighlight =\r\n                 highlightX !== undefined &&\r\n@@ -193,14 +193,14 @@\n                 <div\r\n                   key={i}\r\n                   style={{\r\n                     width: RULER_STEP,\r\n-                    height: 24,\r\n+                    height: RULER_SIZE,\r\n                     borderRight: \"1px solid #eee\",\r\n                     color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n                     fontSize: 12,\r\n                     textAlign: \"center\",\r\n-                    lineHeight: \"24px\",\r\n+                    lineHeight: `${RULER_SIZE}px`,\r\n                     background: isHighlight ? \"#e6f7ff\" : undefined,\r\n                     transition: \"background 0.2s, color 0.2s\",\r\n                   }}\r\n                 >\r\n@@ -214,16 +214,16 @@\n         <div\r\n           style={{\r\n             position: \"absolute\",\r\n             left: 0,\r\n-            top: 24,\r\n-            width: 24,\r\n-            height: height - 24,\r\n+            top: RULER_SIZE,\r\n+            width: RULER_SIZE,\r\n+            height: height - RULER_SIZE,\r\n             background: \"linear-gradient(to bottom, #f5f6fa 80%, transparent)\",\r\n-            zIndex: 2,\r\n+            zIndex: 100,\r\n           }}\r\n         >\r\n-          {Array.from({ length: Math.ceil((height - 24) / RULER_STEP) }).map(\r\n+          {Array.from({ length: Math.ceil((height - RULER_SIZE) / RULER_STEP) }).map(\r\n             (_, i) => {\r\n               const py = i * RULER_STEP;\r\n               const isHighlight =\r\n                 highlightY !== undefined &&\r\n@@ -232,14 +232,14 @@\n                 <div\r\n                   key={i}\r\n                   style={{\r\n                     height: RULER_STEP,\r\n-                    width: 24,\r\n+                    width: RULER_SIZE,\r\n                     borderBottom: \"1px solid #eee\",\r\n                     color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n                     fontSize: 12,\r\n                     textAlign: \"center\",\r\n-                    lineHeight: \"40px\",\r\n+                    lineHeight: `${RULER_STEP}px`,\r\n                     background: isHighlight ? \"#e6f7ff\" : undefined,\r\n                     transition: \"background 0.2s, color 0.2s\",\r\n                   }}\r\n                 >\r\n@@ -248,74 +248,85 @@\n               );\r\n             }\r\n           )}\r\n         </div>\r\n-        {/* 辅助线渲染 */}\r\n-        {guideLines?.x !== undefined && (\r\n-          <div\r\n-            style={{\r\n-              position: \"absolute\",\r\n-              left: guideLines.x - 1,\r\n-              top: 0,\r\n-              width: 1,\r\n-              height: \"100%\",\r\n-              borderLeft: \"2px solid #1890ff\",\r\n-              zIndex: 99,\r\n-              pointerEvents: \"none\",\r\n-            }}\r\n-          />\r\n-        )}\r\n-        {guideLines?.y !== undefined && (\r\n-          <div\r\n-            style={{\r\n-              position: \"absolute\",\r\n-              top: guideLines.y - 1,\r\n-              left: 0,\r\n-              height: 1,\r\n-              width: \"100%\",\r\n-              borderTop: \"2px solid #1890ff\",\r\n-              zIndex: 99,\r\n-              pointerEvents: \"none\",\r\n-            }}\r\n-          />\r\n-        )}\r\n-        {components.map((comp) => (\r\n-          <div\r\n-            key={comp.id}\r\n-            style={{\r\n-              position: \"absolute\",\r\n-              left: comp.x,\r\n-              top: comp.y,\r\n-              width: COMPONENT_WIDTH,\r\n-              height: COMPONENT_HEIGHT,\r\n-              border:\r\n-                comp.id === selectedId\r\n-                  ? \"2px solid #1890ff\"\r\n-                  : \"1px solid #e5e5e5\",\r\n-              borderRadius: 6,\r\n-              background: \"#fafafa\",\r\n-              display: \"flex\",\r\n-              alignItems: \"center\",\r\n-              gap: 8,\r\n-              fontSize: 16,\r\n-              color: \"#333\",\r\n-              cursor: \"move\",\r\n-              zIndex: comp.id === selectedId ? 10 : 1,\r\n-            }}\r\n-            onMouseDown={(e) => handleMouseDown(comp.id, e)}\r\n-            onClick={() => setSelectedId(comp.id)}\r\n-          >\r\n-            <span style={{ marginLeft: 8 }}>{comp.icon}</span>\r\n-            {/* 这里实际应渲染 TableComponent/TextComponent/ChartComponent，由父组件传递或自行 import */}\r\n-            {comp.type === \"table\"\r\n-              ? \"[表格]\"\r\n-              : comp.type === \"text\"\r\n-              ? \"[文本]\"\r\n-              : comp.type === \"chart\"\r\n-              ? \"[图表]\"\r\n-              : `${comp.name}组件`}\r\n-          </div>\r\n-        ))}\r\n+        {/* 内容区整体偏移，预留刻度尺空间 */}\r\n+        <div\r\n+          style={{\r\n+            position: \"absolute\",\r\n+            left: RULER_SIZE,\r\n+            top: RULER_SIZE,\r\n+            width: width - RULER_SIZE,\r\n+            height: height - RULER_SIZE,\r\n+          }}\r\n+        >\r\n+          {/* 辅助线渲染 */}\r\n+          {guideLines?.x !== undefined && (\r\n+            <div\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                left: guideLines.x,\r\n+                top: 0,\r\n+                width: 1,\r\n+                height: \"100%\",\r\n+                borderLeft: \"2px solid #1890ff\",\r\n+                zIndex: 99,\r\n+                pointerEvents: \"none\",\r\n+              }}\r\n+            />\r\n+          )}\r\n+          {guideLines?.y !== undefined && (\r\n+            <div\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                top: guideLines.y,\r\n+                left: 0,\r\n+                height: 1,\r\n+                width: \"100%\",\r\n+                borderTop: \"2px solid #1890ff\",\r\n+                zIndex: 99,\r\n+                pointerEvents: \"none\",\r\n+              }}\r\n+            />\r\n+          )}\r\n+          {components.map((comp) => (\r\n+            <div\r\n+              key={comp.id}\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                left: comp.x,\r\n+                top: comp.y,\r\n+                width: COMPONENT_WIDTH,\r\n+                height: COMPONENT_HEIGHT,\r\n+                border:\r\n+                  comp.id === selectedId\r\n+                    ? \"2px solid #1890ff\"\r\n+                    : \"1px solid #e5e5e5\",\r\n+                borderRadius: 6,\r\n+                background: \"#fafafa\",\r\n+                display: \"flex\",\r\n+                alignItems: \"center\",\r\n+                gap: 8,\r\n+                fontSize: 16,\r\n+                color: \"#333\",\r\n+                cursor: \"move\",\r\n+                zIndex: comp.id === selectedId ? 10 : 1,\r\n+              }}\r\n+              onMouseDown={(e) => handleMouseDown(comp.id, e)}\r\n+              onClick={() => setSelectedId(comp.id)}\r\n+            >\r\n+              <span style={{ marginLeft: 8 }}>{comp.icon}</span>\r\n+              {/* 这里实际应渲染 TableComponent/TextComponent/ChartComponent，由父组件传递或自行 import */}\r\n+              {comp.type === \"table\"\r\n+                ? \"[表格]\"\r\n+                : comp.type === \"text\"\r\n+                ? \"[文本]\"\r\n+                : comp.type === \"chart\"\r\n+                ? \"[图表]\"\r\n+                : `${comp.name}组件`}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1747039919745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,152 +1,17 @@\n-import React, { useRef, useState } from \"react\";\r\n+import React from \"react\";\r\n \r\n-import type { CanvasComponent } from \"./index\";\r\n-\r\n interface CanvasProps {\r\n-  components: CanvasComponent[];\r\n-  onDrop: (type: string, x: number, y: number) => void;\r\n-  onComponentMove: (id: string, x: number, y: number) => void;\r\n-  selectedId: string | null;\r\n-  setSelectedId: (id: string) => void;\r\n   width: number;\r\n   height: number;\r\n }\r\n \r\n-const SNAP_THRESHOLD = 8; // px 吸附阈值\r\n-const COMPONENT_WIDTH = 120;\r\n-const COMPONENT_HEIGHT = 40;\r\n-const RULER_STEP = 40; // 刻度尺步长 px\r\n-const RULER_SIZE = 24; // 刻度尺宽度 px\r\n+const RULER_STEP = 40;\r\n+const RULER_SIZE = 24;\r\n \r\n-const Canvas: React.FC<CanvasProps> = ({\r\n-  components,\r\n-  onDrop,\r\n-  onComponentMove,\r\n-  selectedId,\r\n-  setSelectedId,\r\n-  width,\r\n-  height,\r\n-}) => {\r\n-  const [draggingId, setDraggingId] = useState<string | null>(null);\r\n-  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\r\n-    x: 0,\r\n-    y: 0,\r\n-  });\r\n-  const [guideLines, setGuideLines] = useState<{\r\n-    x?: number;\r\n-    y?: number;\r\n-  } | null>(null);\r\n-  const canvasRef = useRef<HTMLDivElement>(null);\r\n-\r\n-  // 计算吸附和辅助线\r\n-  function getSnapAndGuides(x: number, y: number, movingId: string) {\r\n-    let snapX = x;\r\n-    let snapY = y;\r\n-    const guide: { x?: number; y?: number } = {};\r\n-    // 画布边缘吸附\r\n-    if (Math.abs(x) < SNAP_THRESHOLD) {\r\n-      snapX = 0;\r\n-      guide.x = 0;\r\n-    }\r\n-    if (Math.abs(y) < SNAP_THRESHOLD) {\r\n-      snapY = 0;\r\n-      guide.y = 0;\r\n-    }\r\n-    if (Math.abs(x + COMPONENT_WIDTH - (width - RULER_SIZE)) < SNAP_THRESHOLD) {\r\n-      snapX = width - RULER_SIZE - COMPONENT_WIDTH;\r\n-      guide.x = width - RULER_SIZE - COMPONENT_WIDTH + COMPONENT_WIDTH / 2;\r\n-    }\r\n-    if (\r\n-      Math.abs(y + COMPONENT_HEIGHT - (height - RULER_SIZE)) < SNAP_THRESHOLD\r\n-    ) {\r\n-      snapY = height - RULER_SIZE - COMPONENT_HEIGHT;\r\n-      guide.y = height - RULER_SIZE - COMPONENT_HEIGHT + COMPONENT_HEIGHT / 2;\r\n-    }\r\n-    // 与其他组件吸附\r\n-    for (const comp of components) {\r\n-      if (comp.id === movingId) continue;\r\n-      if (Math.abs(x - comp.x) < SNAP_THRESHOLD) {\r\n-        snapX = comp.x;\r\n-        guide.x = comp.x;\r\n-      }\r\n-      if (Math.abs(y - comp.y) < SNAP_THRESHOLD) {\r\n-        snapY = comp.y;\r\n-        guide.y = comp.y;\r\n-      }\r\n-      if (\r\n-        Math.abs(x + COMPONENT_WIDTH - (comp.x + COMPONENT_WIDTH)) <\r\n-        SNAP_THRESHOLD\r\n-      ) {\r\n-        snapX = comp.x + COMPONENT_WIDTH - COMPONENT_WIDTH;\r\n-        guide.x = comp.x + COMPONENT_WIDTH / 2;\r\n-      }\r\n-      if (\r\n-        Math.abs(y + COMPONENT_HEIGHT - (comp.y + COMPONENT_HEIGHT)) <\r\n-        SNAP_THRESHOLD\r\n-      ) {\r\n-        snapY = comp.y + COMPONENT_HEIGHT - COMPONENT_HEIGHT;\r\n-        guide.y = comp.y + COMPONENT_HEIGHT / 2;\r\n-      }\r\n-      if (\r\n-        Math.abs(x + COMPONENT_WIDTH / 2 - (comp.x + COMPONENT_WIDTH / 2)) <\r\n-        SNAP_THRESHOLD\r\n-      ) {\r\n-        snapX = comp.x;\r\n-        guide.x = comp.x + COMPONENT_WIDTH / 2;\r\n-      }\r\n-      if (\r\n-        Math.abs(y + COMPONENT_HEIGHT / 2 - (comp.y + COMPONENT_HEIGHT / 2)) <\r\n-        SNAP_THRESHOLD\r\n-      ) {\r\n-        snapY = comp.y;\r\n-        guide.y = comp.y + COMPONENT_HEIGHT / 2;\r\n-      }\r\n-    }\r\n-    return { snapX, snapY, guide };\r\n-  }\r\n-\r\n-  // 拖拽新组件到画布\r\n-  const handleDrop = (e: React.DragEvent) => {\r\n-    e.preventDefault();\r\n-    const type = e.dataTransfer.getData(\"type\");\r\n-    if (!type) return;\r\n-    const rect = canvasRef.current?.getBoundingClientRect();\r\n-    if (!rect) return;\r\n-    const x = e.clientX - rect.left - RULER_SIZE - COMPONENT_WIDTH / 2;\r\n-    const y = e.clientY - rect.top - RULER_SIZE - COMPONENT_HEIGHT / 2;\r\n-    onDrop(type, x, y);\r\n-  };\r\n-\r\n-  // 画布内组件拖拽\r\n-  const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n-    setDraggingId(id);\r\n-    setDragOffset({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n-  };\r\n-  const handleMouseMove = (e: React.MouseEvent) => {\r\n-    if (!draggingId) return;\r\n-    const rect = canvasRef.current?.getBoundingClientRect();\r\n-    if (!rect) return;\r\n-    const comp = components.find((c) => c.id === draggingId);\r\n-    if (!comp) return;\r\n-    const rawX = e.clientX - rect.left - RULER_SIZE - dragOffset.x;\r\n-    const rawY = e.clientY - rect.top - RULER_SIZE - dragOffset.y;\r\n-    const { snapX, snapY, guide } = getSnapAndGuides(rawX, rawY, draggingId);\r\n-    setGuideLines(guide);\r\n-    onComponentMove(draggingId, snapX, snapY);\r\n-  };\r\n-  const handleMouseUp = () => {\r\n-    setDraggingId(null);\r\n-    setGuideLines(null);\r\n-  };\r\n-\r\n-  // 计算高亮刻度\r\n-  const highlightX = guideLines?.x !== undefined ? guideLines.x : undefined;\r\n-  const highlightY = guideLines?.y !== undefined ? guideLines.y : undefined;\r\n-\r\n+const Canvas: React.FC<CanvasProps> = ({ width, height }) => {\r\n   return (\r\n     <div\r\n-      ref={canvasRef}\r\n       style={{\r\n         flex: 1,\r\n         padding: \"32px 0\",\r\n         display: \"flex\",\r\n@@ -156,12 +21,8 @@\n         minHeight: 0,\r\n         overflow: \"auto\",\r\n         background: \"#f5f6fa\",\r\n       }}\r\n-      onDragOver={(e) => e.preventDefault()}\r\n-      onDrop={handleDrop}\r\n-      onMouseMove={handleMouseMove}\r\n-      onMouseUp={handleMouseUp}\r\n     >\r\n       <div\r\n         style={{\r\n           position: \"relative\",\r\n@@ -179,39 +40,31 @@\n             left: RULER_SIZE,\r\n             top: 0,\r\n             width: width - RULER_SIZE,\r\n             height: RULER_SIZE,\r\n-            background: \"linear-gradient(to right, #f5f6fa 80%, transparent)\",\r\n-            zIndex: 100,\r\n+            background: \"#e6f7ff\",\r\n+            zIndex: 1000,\r\n             display: \"flex\",\r\n           }}\r\n         >\r\n-          {Array.from({\r\n-            length: Math.ceil((width - RULER_SIZE) / RULER_STEP),\r\n-          }).map((_, i) => {\r\n-            const px = i * RULER_STEP;\r\n-            const isHighlight =\r\n-              highlightX !== undefined &&\r\n-              Math.abs(px - highlightX) < RULER_STEP / 2;\r\n-            return (\r\n-              <div\r\n-                key={i}\r\n-                style={{\r\n-                  width: RULER_STEP,\r\n-                  height: RULER_SIZE,\r\n-                  borderRight: \"1px solid #eee\",\r\n-                  color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n-                  fontSize: 12,\r\n-                  textAlign: \"center\",\r\n-                  lineHeight: `${RULER_SIZE}px`,\r\n-                  background: isHighlight ? \"#e6f7ff\" : undefined,\r\n-                  transition: \"background 0.2s, color 0.2s\",\r\n-                }}\r\n-              >\r\n-                {px}\r\n-              </div>\r\n-            );\r\n-          })}\r\n+          {Array.from({ length: Math.ceil((width - RULER_SIZE) / RULER_STEP) }).map((_, i) => (\r\n+            <div\r\n+              key={i}\r\n+              style={{\r\n+                width: RULER_STEP,\r\n+                height: RULER_SIZE,\r\n+                borderRight: \"1px solid #1890ff\",\r\n+                color: \"#1890ff\",\r\n+                fontSize: 12,\r\n+                textAlign: \"center\",\r\n+                lineHeight: `${RULER_SIZE}px`,\r\n+                background: i % 2 === 0 ? \"#e6f7ff\" : \"#bae7ff\",\r\n+                zIndex: 1000,\r\n+              }}\r\n+            >\r\n+              {i * RULER_STEP}\r\n+            </div>\r\n+          ))}\r\n         </div>\r\n         {/* 左侧刻度尺 */}\r\n         <div\r\n           style={{\r\n@@ -219,116 +72,56 @@\n             left: 0,\r\n             top: RULER_SIZE,\r\n             width: RULER_SIZE,\r\n             height: height - RULER_SIZE,\r\n-            background: \"linear-gradient(to bottom, #f5f6fa 80%, transparent)\",\r\n-            zIndex: 100,\r\n+            background: \"#e6f7ff\",\r\n+            zIndex: 1000,\r\n           }}\r\n         >\r\n-          {Array.from({\r\n-            length: Math.ceil((height - RULER_SIZE) / RULER_STEP),\r\n-          }).map((_, i) => {\r\n-            const py = i * RULER_STEP;\r\n-            const isHighlight =\r\n-              highlightY !== undefined &&\r\n-              Math.abs(py - highlightY) < RULER_STEP / 2;\r\n-            return (\r\n-              <div\r\n-                key={i}\r\n-                style={{\r\n-                  height: RULER_STEP,\r\n-                  width: RULER_SIZE,\r\n-                  borderBottom: \"1px solid #eee\",\r\n-                  color: isHighlight ? \"#1890ff\" : \"#bbb\",\r\n-                  fontSize: 12,\r\n-                  textAlign: \"center\",\r\n-                  lineHeight: `${RULER_STEP}px`,\r\n-                  background: isHighlight ? \"#e6f7ff\" : undefined,\r\n-                  transition: \"background 0.2s, color 0.2s\",\r\n-                }}\r\n-              >\r\n-                {py}\r\n-              </div>\r\n-            );\r\n-          })}\r\n+          {Array.from({ length: Math.ceil((height - RULER_SIZE) / RULER_STEP) }).map((_, i) => (\r\n+            <div\r\n+              key={i}\r\n+              style={{\r\n+                height: RULER_STEP,\r\n+                width: RULER_SIZE,\r\n+                borderBottom: \"1px solid #1890ff\",\r\n+                color: \"#1890ff\",\r\n+                fontSize: 12,\r\n+                textAlign: \"center\",\r\n+                lineHeight: `${RULER_STEP}px`,\r\n+                background: i % 2 === 0 ? \"#e6f7ff\" : \"#bae7ff\",\r\n+                zIndex: 1000,\r\n+              }}\r\n+            >\r\n+              {i * RULER_STEP}\r\n+            </div>\r\n+          ))}\r\n         </div>\r\n-        {/* 内容区整体偏移，预留刻度尺空间 */}\r\n+        {/* 静态辅助线 */}\r\n         <div\r\n           style={{\r\n             position: \"absolute\",\r\n-            left: RULER_SIZE,\r\n+            left: RULER_SIZE + 100,\r\n             top: RULER_SIZE,\r\n-            width: width - RULER_SIZE,\r\n+            width: 2,\r\n             height: height - RULER_SIZE,\r\n+            background: \"#ff4d4f\",\r\n+            zIndex: 9999,\r\n+            pointerEvents: \"none\",\r\n           }}\r\n-        >\r\n-          {/* 辅助线渲染 */}\r\n-          {guideLines?.x !== undefined && (\r\n-            <div\r\n-              style={{\r\n-                position: \"absolute\",\r\n-                left: guideLines.x,\r\n-                top: 0,\r\n-                width: 1,\r\n-                height: \"100%\",\r\n-                borderLeft: \"2px solid #1890ff\",\r\n-                zIndex: 99,\r\n-                pointerEvents: \"none\",\r\n-              }}\r\n-            />\r\n-          )}\r\n-          {guideLines?.y !== undefined && (\r\n-            <div\r\n-              style={{\r\n-                position: \"absolute\",\r\n-                top: guideLines.y,\r\n-                left: 0,\r\n-                height: 1,\r\n-                width: \"100%\",\r\n-                borderTop: \"2px solid #1890ff\",\r\n-                zIndex: 99,\r\n-                pointerEvents: \"none\",\r\n-              }}\r\n-            />\r\n-          )}\r\n-          {components.map((comp) => (\r\n-            <div\r\n-              key={comp.id}\r\n-              style={{\r\n-                position: \"absolute\",\r\n-                left: comp.x,\r\n-                top: comp.y,\r\n-                width: COMPONENT_WIDTH,\r\n-                height: COMPONENT_HEIGHT,\r\n-                border:\r\n-                  comp.id === selectedId\r\n-                    ? \"2px solid #1890ff\"\r\n-                    : \"1px solid #e5e5e5\",\r\n-                borderRadius: 6,\r\n-                background: \"#fafafa\",\r\n-                display: \"flex\",\r\n-                alignItems: \"center\",\r\n-                gap: 8,\r\n-                fontSize: 16,\r\n-                color: \"#333\",\r\n-                cursor: \"move\",\r\n-                zIndex: comp.id === selectedId ? 10 : 1,\r\n-              }}\r\n-              onMouseDown={(e) => handleMouseDown(comp.id, e)}\r\n-              onClick={() => setSelectedId(comp.id)}\r\n-            >\r\n-              <span style={{ marginLeft: 8 }}>{comp.icon}</span>\r\n-              {/* 这里实际应渲染 TableComponent/TextComponent/ChartComponent，由父组件传递或自行 import */}\r\n-              {comp.type === \"table\"\r\n-                ? \"[表格]\"\r\n-                : comp.type === \"text\"\r\n-                ? \"[文本]\"\r\n-                : comp.type === \"chart\"\r\n-                ? \"[图表]\"\r\n-                : `${comp.name}组件`}\r\n-            </div>\r\n-          ))}\r\n-        </div>\r\n+        />\r\n+        <div\r\n+          style={{\r\n+            position: \"absolute\",\r\n+            left: RULER_SIZE,\r\n+            top: RULER_SIZE + 120,\r\n+            width: width - RULER_SIZE,\r\n+            height: 2,\r\n+            background: \"#ff4d4f\",\r\n+            zIndex: 9999,\r\n+            pointerEvents: \"none\",\r\n+          }}\r\n+        />\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1747040354135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,123 @@\n-import React from \"react\";\r\n+import React, { useState, useRef } from \"react\";\r\n+import type { CanvasComponent } from \"./index\";\r\n \r\n interface CanvasProps {\r\n+  components: CanvasComponent[];\r\n+  onDrop: (type: string, x: number, y: number) => void;\r\n+  onComponentMove: (id: string, x: number, y: number) => void;\r\n+  selectedId: string | null;\r\n+  setSelectedId: (id: string) => void;\r\n   width: number;\r\n   height: number;\r\n }\r\n \r\n+const SNAP_THRESHOLD = 8; // px 吸附阈值\r\n+const COMPONENT_WIDTH = 120;\r\n+const COMPONENT_HEIGHT = 40;\r\n const RULER_STEP = 40;\r\n const RULER_SIZE = 24;\r\n \r\n-const Canvas: React.FC<CanvasProps> = ({ width, height }) => {\r\n+const Canvas: React.FC<CanvasProps> = ({ components, onDrop, onComponentMove, selectedId, setSelectedId, width, height }) => {\r\n+  const [draggingId, setDraggingId] = useState<string | null>(null);\r\n+  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({ x: 0, y: 0 });\r\n+  const [guideLines, setGuideLines] = useState<{ x?: number; y?: number } | null>(null);\r\n+  const canvasRef = useRef<HTMLDivElement>(null);\r\n+\r\n+  // 计算吸附和辅助线\r\n+  function getSnapAndGuides(x: number, y: number, movingId: string) {\r\n+    let snapX = x;\r\n+    let snapY = y;\r\n+    const guide: { x?: number; y?: number } = {};\r\n+    // 画布边缘吸附\r\n+    if (Math.abs(x) < SNAP_THRESHOLD) {\r\n+      snapX = 0;\r\n+      guide.x = 0;\r\n+    }\r\n+    if (Math.abs(y) < SNAP_THRESHOLD) {\r\n+      snapY = 0;\r\n+      guide.y = 0;\r\n+    }\r\n+    if (Math.abs(x + COMPONENT_WIDTH - (width - RULER_SIZE)) < SNAP_THRESHOLD) {\r\n+      snapX = width - RULER_SIZE - COMPONENT_WIDTH;\r\n+      guide.x = width - RULER_SIZE - COMPONENT_WIDTH + COMPONENT_WIDTH / 2;\r\n+    }\r\n+    if (Math.abs(y + COMPONENT_HEIGHT - (height - RULER_SIZE)) < SNAP_THRESHOLD) {\r\n+      snapY = height - RULER_SIZE - COMPONENT_HEIGHT;\r\n+      guide.y = height - RULER_SIZE - COMPONENT_HEIGHT + COMPONENT_HEIGHT / 2;\r\n+    }\r\n+    // 与其他组件吸附\r\n+    for (const comp of components) {\r\n+      if (comp.id === movingId) continue;\r\n+      if (Math.abs(x - comp.x) < SNAP_THRESHOLD) {\r\n+        snapX = comp.x;\r\n+        guide.x = comp.x;\r\n+      }\r\n+      if (Math.abs(y - comp.y) < SNAP_THRESHOLD) {\r\n+        snapY = comp.y;\r\n+        guide.y = comp.y;\r\n+      }\r\n+      if (Math.abs(x + COMPONENT_WIDTH - (comp.x + COMPONENT_WIDTH)) < SNAP_THRESHOLD) {\r\n+        snapX = comp.x + COMPONENT_WIDTH - COMPONENT_WIDTH;\r\n+        guide.x = comp.x + COMPONENT_WIDTH / 2;\r\n+      }\r\n+      if (Math.abs(y + COMPONENT_HEIGHT - (comp.y + COMPONENT_HEIGHT)) < SNAP_THRESHOLD) {\r\n+        snapY = comp.y + COMPONENT_HEIGHT - COMPONENT_HEIGHT;\r\n+        guide.y = comp.y + COMPONENT_HEIGHT / 2;\r\n+      }\r\n+      if (Math.abs(x + COMPONENT_WIDTH / 2 - (comp.x + COMPONENT_WIDTH / 2)) < SNAP_THRESHOLD) {\r\n+        snapX = comp.x;\r\n+        guide.x = comp.x + COMPONENT_WIDTH / 2;\r\n+      }\r\n+      if (Math.abs(y + COMPONENT_HEIGHT / 2 - (comp.y + COMPONENT_HEIGHT / 2)) < SNAP_THRESHOLD) {\r\n+        snapY = comp.y;\r\n+        guide.y = comp.y + COMPONENT_HEIGHT / 2;\r\n+      }\r\n+    }\r\n+    return { snapX, snapY, guide };\r\n+  }\r\n+\r\n+  // 拖拽新组件到画布\r\n+  const handleDrop = (e: React.DragEvent) => {\r\n+    e.preventDefault();\r\n+    const type = e.dataTransfer.getData(\"type\");\r\n+    if (!type) return;\r\n+    const rect = canvasRef.current?.getBoundingClientRect();\r\n+    if (!rect) return;\r\n+    const x = e.clientX - rect.left - RULER_SIZE - COMPONENT_WIDTH / 2;\r\n+    const y = e.clientY - rect.top - RULER_SIZE - COMPONENT_HEIGHT / 2;\r\n+    onDrop(type, x, y);\r\n+  };\r\n+\r\n+  // 画布内组件拖拽\r\n+  const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n+    setDraggingId(id);\r\n+    setDragOffset({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n+  };\r\n+  const handleMouseMove = (e: React.MouseEvent) => {\r\n+    if (!draggingId) return;\r\n+    const rect = canvasRef.current?.getBoundingClientRect();\r\n+    if (!rect) return;\r\n+    const comp = components.find(c => c.id === draggingId);\r\n+    if (!comp) return;\r\n+    const rawX = e.clientX - rect.left - RULER_SIZE - dragOffset.x;\r\n+    const rawY = e.clientY - rect.top - RULER_SIZE - dragOffset.y;\r\n+    const { snapX, snapY, guide } = getSnapAndGuides(rawX, rawY, draggingId);\r\n+    setGuideLines(guide);\r\n+    onComponentMove(draggingId, snapX, snapY);\r\n+  };\r\n+  const handleMouseUp = () => {\r\n+    setDraggingId(null);\r\n+    setGuideLines(null);\r\n+  };\r\n+\r\n+  // 计算高亮刻度\r\n+  const highlightX = guideLines?.x !== undefined ? guideLines.x : undefined;\r\n+  const highlightY = guideLines?.y !== undefined ? guideLines.y : undefined;\r\n+\r\n   return (\r\n     <div\r\n+      ref={canvasRef}\r\n       style={{\r\n         flex: 1,\r\n         padding: \"32px 0\",\r\n         display: \"flex\",\r\n@@ -21,8 +127,12 @@\n         minHeight: 0,\r\n         overflow: \"auto\",\r\n         background: \"#f5f6fa\",\r\n       }}\r\n+      onDragOver={e => e.preventDefault()}\r\n+      onDrop={handleDrop}\r\n+      onMouseMove={handleMouseMove}\r\n+      onMouseUp={handleMouseUp}\r\n     >\r\n       <div\r\n         style={{\r\n           position: \"relative\",\r\n@@ -45,11 +155,9 @@\n             zIndex: 1000,\r\n             display: \"flex\",\r\n           }}\r\n         >\r\n-          {Array.from({\r\n-            length: Math.ceil((width - RULER_SIZE) / RULER_STEP),\r\n-          }).map((_, i) => (\r\n+          {Array.from({ length: Math.ceil((width - RULER_SIZE) / RULER_STEP) }).map((_, i) => (\r\n             <div\r\n               key={i}\r\n               style={{\r\n                 width: RULER_STEP,\r\n@@ -78,11 +186,9 @@\n             background: \"#e6f7ff\",\r\n             zIndex: 1000,\r\n           }}\r\n         >\r\n-          {Array.from({\r\n-            length: Math.ceil((height - RULER_SIZE) / RULER_STEP),\r\n-          }).map((_, i) => (\r\n+          {Array.from({ length: Math.ceil((height - RULER_SIZE) / RULER_STEP) }).map((_, i) => (\r\n             <div\r\n               key={i}\r\n               style={{\r\n                 height: RULER_STEP,\r\n@@ -99,33 +205,75 @@\n               {i * RULER_STEP}\r\n             </div>\r\n           ))}\r\n         </div>\r\n-        {/* 静态辅助线 */}\r\n+        {/* 内容区整体偏移，预留刻度尺空间 */}\r\n         <div\r\n           style={{\r\n             position: \"absolute\",\r\n-            left: RULER_SIZE + 100,\r\n+            left: RULER_SIZE,\r\n             top: RULER_SIZE,\r\n-            width: 2,\r\n+            width: width - RULER_SIZE,\r\n             height: height - RULER_SIZE,\r\n-            background: \"#ff4d4f\",\r\n-            zIndex: 9999,\r\n-            pointerEvents: \"none\",\r\n           }}\r\n-        />\r\n-        <div\r\n-          style={{\r\n-            position: \"absolute\",\r\n-            left: RULER_SIZE,\r\n-            top: RULER_SIZE + 120,\r\n-            width: width - RULER_SIZE,\r\n-            height: 2,\r\n-            background: \"#ff4d4f\",\r\n-            zIndex: 9999,\r\n-            pointerEvents: \"none\",\r\n-          }}\r\n-        />\r\n+        >\r\n+          {/* 辅助线渲染 */}\r\n+          {guideLines?.x !== undefined && (\r\n+            <div\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                left: guideLines.x,\r\n+                top: 0,\r\n+                width: 1,\r\n+                height: \"100%\",\r\n+                borderLeft: \"2px solid #1890ff\",\r\n+                zIndex: 9999,\r\n+                pointerEvents: \"none\",\r\n+              }}\r\n+            />\r\n+          )}\r\n+          {guideLines?.y !== undefined && (\r\n+            <div\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                top: guideLines.y,\r\n+                left: 0,\r\n+                height: 1,\r\n+                width: \"100%\",\r\n+                borderTop: \"2px solid #1890ff\",\r\n+                zIndex: 9999,\r\n+                pointerEvents: \"none\",\r\n+              }}\r\n+            />\r\n+          )}\r\n+          {components.map((comp) => (\r\n+            <div\r\n+              key={comp.id}\r\n+              style={{\r\n+                position: \"absolute\",\r\n+                left: comp.x,\r\n+                top: comp.y,\r\n+                width: COMPONENT_WIDTH,\r\n+                height: COMPONENT_HEIGHT,\r\n+                border: comp.id === selectedId ? \"2px solid #1890ff\" : \"1px solid #e5e5e5\",\r\n+                borderRadius: 6,\r\n+                background: \"#fafafa\",\r\n+                display: \"flex\",\r\n+                alignItems: \"center\",\r\n+                gap: 8,\r\n+                fontSize: 16,\r\n+                color: \"#333\",\r\n+                cursor: \"move\",\r\n+                zIndex: comp.id === selectedId ? 10 : 1,\r\n+              }}\r\n+              onMouseDown={e => handleMouseDown(comp.id, e)}\r\n+              onClick={() => setSelectedId(comp.id)}\r\n+            >\r\n+              <span style={{ marginLeft: 8 }}>{comp.icon}</span>\r\n+              {comp.name}\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n       </div>\r\n     </div>\r\n   );\r\n };\r\n"
                }
            ],
            "date": 1747022364736,
            "name": "Commit-0",
            "content": "import React from 'react';\r\n\r\nconst Canvas: React.FC = () => {\r\n  return <div style={{ minHeight: 400, border: '1px dashed #ccc', background: '#fff' }}>设计画布区域</div>;\r\n};\r\n\r\nexport default Canvas;"
        }
    ]
}