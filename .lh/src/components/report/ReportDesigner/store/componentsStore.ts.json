{
    "sourceFile": "src/components/report/ReportDesigner/store/componentsStore.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747498279869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747498515985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n }\r\n \r\n export const useComponentsStore = create<ComponentsState>()(\r\n   devtools(\r\n-    immer((set, get) => ({\r\n+    immer((set) => ({\r\n       components: [],\r\n       setComponents: (components) => set({ components }),\r\n       addComponent: (component) =>\r\n         set((state) => {\r\n"
                },
                {
                    "date": 1747498536810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n }\r\n \r\n export const useComponentsStore = create<ComponentsState>()(\r\n   devtools(\r\n-    immer((set) => ({\r\n+    immer<ComponentsState>((set) => ({\r\n       components: [],\r\n       setComponents: (components) => set({ components }),\r\n       addComponent: (component) =>\r\n         set((state) => {\r\n"
                }
            ],
            "date": 1747498279869,
            "name": "Commit-0",
            "content": "import { ReportComponent } from \"@report/ReportDesigner/types/component\";\r\nimport { create } from \"zustand\";\r\nimport { devtools } from \"zustand/middleware\";\r\nimport { immer } from \"zustand/middleware/immer\";\r\n\r\ninterface ComponentsState {\r\n  components: ReportComponent[];\r\n  setComponents: (components: ReportComponent[]) => void;\r\n  addComponent: (component: ReportComponent) => void;\r\n  updateComponent: (id: string, data: Partial<ReportComponent>) => void;\r\n  removeComponent: (id: string) => void;\r\n  batchUpdateComponent: (ids: string[], data: Partial<ReportComponent>) => void;\r\n  batchRemoveComponent: (ids: string[]) => void;\r\n  batchLockComponent: (ids: string[], locked: boolean) => void;\r\n  batchVisibleComponent: (ids: string[], visible: boolean) => void;\r\n  copyComponent: (id: string) => void;\r\n  moveComponentZIndex: (\r\n    id: string,\r\n    type: \"top\" | \"bottom\" | \"up\" | \"down\"\r\n  ) => void;\r\n}\r\n\r\nexport const useComponentsStore = create<ComponentsState>()(\r\n  devtools(\r\n    immer((set, get) => ({\r\n      components: [],\r\n      setComponents: (components) => set({ components }),\r\n      addComponent: (component) =>\r\n        set((state) => {\r\n          // 自动生成 name\r\n          if (!component.name) {\r\n            const type = component.type || \"Component\";\r\n            const sameType = state.components.filter((c) => c.type === type);\r\n            const maxIndex = sameType.reduce((max, c) => {\r\n              const match =\r\n                c.name && c.name.match(new RegExp(`^${type}(\\\\d+)$`));\r\n              return match ? Math.max(max, parseInt(match[1], 10)) : max;\r\n            }, 0);\r\n            component.name = `${type}${maxIndex + 1}`;\r\n          }\r\n          const maxZ =\r\n            state.components.length > 0\r\n              ? Math.max(...state.components.map((c) => c.zindex ?? 1))\r\n              : 0;\r\n          component.zindex = maxZ + 1;\r\n          state.components.push(component);\r\n        }),\r\n      updateComponent: (id, data) =>\r\n        set((state) => {\r\n          const idx = state.components.findIndex((c) => c.id === id);\r\n          if (idx !== -1) {\r\n            state.components[idx] = { ...state.components[idx], ...data };\r\n          }\r\n        }),\r\n      removeComponent: (id) =>\r\n        set((state) => {\r\n          state.components = state.components.filter((c) => c.id !== id);\r\n        }),\r\n      batchUpdateComponent: (ids, data) =>\r\n        set((state) => {\r\n          state.components.forEach((c) => {\r\n            if (ids.includes(c.id)) Object.assign(c, data);\r\n          });\r\n        }),\r\n      batchRemoveComponent: (ids) =>\r\n        set((state) => {\r\n          state.components = state.components.filter(\r\n            (c) => !ids.includes(c.id)\r\n          );\r\n        }),\r\n      batchLockComponent: (ids, locked) =>\r\n        set((state) => {\r\n          state.components.forEach((c) => {\r\n            if (ids.includes(c.id)) c.locked = locked;\r\n          });\r\n        }),\r\n      batchVisibleComponent: (ids, visible) =>\r\n        set((state) => {\r\n          state.components.forEach((c) => {\r\n            if (ids.includes(c.id)) c.visible = visible;\r\n          });\r\n        }),\r\n      copyComponent: (id) =>\r\n        set((state) => {\r\n          const comp = state.components.find((c) => c.id === id);\r\n          if (!comp) return;\r\n          const newComp = { ...comp, id: `${comp.id}_copy_${Date.now()}` };\r\n          state.components.push(newComp);\r\n        }),\r\n      moveComponentZIndex: (id, type) =>\r\n        set((state) => {\r\n          const comps = state.components;\r\n          const idx = comps.findIndex((c) => c.id === id);\r\n          if (idx === -1) return;\r\n          const comp = comps[idx];\r\n          const sorted = comps\r\n            .slice()\r\n            .sort((a, b) => (a.zindex ?? 1) - (b.zindex ?? 1));\r\n          const zList = sorted.map((c) => c.zindex ?? 1);\r\n          let newZ = comp.zindex ?? 1;\r\n          if (type === \"top\") {\r\n            newZ = Math.max(...zList) + 1;\r\n          } else if (type === \"bottom\") {\r\n            newZ = Math.min(...zList) - 1;\r\n          } else if (type === \"up\") {\r\n            const above = sorted.find(\r\n              (c) => (c.zindex ?? 1) > (comp.zindex ?? 1)\r\n            );\r\n            if (above) {\r\n              const tmp = above.zindex;\r\n              above.zindex = comp.zindex;\r\n              newZ = tmp;\r\n            }\r\n          } else if (type === \"down\") {\r\n            const below = [...sorted]\r\n              .reverse()\r\n              .find((c) => (c.zindex ?? 1) < (comp.zindex ?? 1));\r\n            if (below) {\r\n              const tmp = below.zindex;\r\n              below.zindex = comp.zindex;\r\n              newZ = tmp;\r\n            }\r\n          }\r\n          comp.zindex = newZ;\r\n          const uniq = Array.from(\r\n            new Set(comps.map((c) => c.zindex ?? 1))\r\n          ).sort((a, b) => a - b);\r\n          uniq.forEach((z, i) => {\r\n            comps\r\n              .filter((c) => c.zindex === z)\r\n              .forEach((c) => (c.zindex = i + 1));\r\n          });\r\n        }),\r\n    }))\r\n  )\r\n);\r\n"
        }
    ]
}