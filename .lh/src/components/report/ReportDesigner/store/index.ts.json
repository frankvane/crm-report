{
    "sourceFile": "src/components/report/ReportDesigner/store/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1747228066107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747228071943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,32 @@\n import { ReportComponent } from \"../types/component\";\r\n import { ReportDesignerState } from \"../types/store\";\r\n import { create } from \"zustand\";\r\n \r\n-export const useReportDesignerStore = create<ReportDesignerState>(\r\n-  (set, get) => ({\r\n-    components: [],\r\n-    selectedIds: [],\r\n-    canvasConfig: {\r\n-      gridSize: 20,\r\n-      showGrid: true,\r\n-      snapToGrid: true,\r\n-    },\r\n-    setComponents: (components: ReportComponent[]) => set({ components }),\r\n-    addComponent: (component: ReportComponent) =>\r\n-      set((state) => ({ components: [...state.components, component] })),\r\n-    updateComponent: (id: string, data: Partial<ReportComponent>) =>\r\n-      set((state) => ({\r\n-        components: state.components.map((c) =>\r\n-          c.id === id ? { ...c, ...data } : c\r\n-        ),\r\n-      })),\r\n-    removeComponent: (id: string) =>\r\n-      set((state) => ({\r\n-        components: state.components.filter((c) => c.id !== id),\r\n-        selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n-      })),\r\n-    setSelectedIds: (ids: string[]) => set({ selectedIds: ids }),\r\n-    setCanvasConfig: (config) =>\r\n-      set((state) => ({\r\n-        canvasConfig: { ...state.canvasConfig, ...config },\r\n-      })),\r\n-  })\r\n-);\r\n+export const useReportDesignerStore = create<ReportDesignerState>((set) => ({\r\n+  components: [],\r\n+  selectedIds: [],\r\n+  canvasConfig: {\r\n+    gridSize: 20,\r\n+    showGrid: true,\r\n+    snapToGrid: true,\r\n+  },\r\n+  setComponents: (components: ReportComponent[]) => set({ components }),\r\n+  addComponent: (component: ReportComponent) =>\r\n+    set((state) => ({ components: [...state.components, component] })),\r\n+  updateComponent: (id: string, data: Partial<ReportComponent>) =>\r\n+    set((state) => ({\r\n+      components: state.components.map((c) =>\r\n+        c.id === id ? { ...c, ...data } : c\r\n+      ),\r\n+    })),\r\n+  removeComponent: (id: string) =>\r\n+    set((state) => ({\r\n+      components: state.components.filter((c) => c.id !== id),\r\n+      selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n+    })),\r\n+  setSelectedIds: (ids: string[]) => set({ selectedIds: ids }),\r\n+  setCanvasConfig: (config) =>\r\n+    set((state) => ({\r\n+      canvasConfig: { ...state.canvasConfig, ...config },\r\n+    })),\r\n+}));\r\n"
                },
                {
                    "date": 1747228388548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import { ReportComponent } from \"../types/component\";\r\n-import { ReportDesignerState } from \"../types/store\";\r\n+import { ReportComponent } from \"@report/ReportDesigner/types/component\";\r\n+import { ReportDesignerState } from \"@report/ReportDesigner/types/store\";\r\n import { create } from \"zustand\";\r\n \r\n export const useReportDesignerStore = create<ReportDesignerState>((set) => ({\r\n   components: [],\r\n"
                },
                {
                    "date": 1747231689789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { ReportComponent } from \"@report/ReportDesigner/types/component\";\r\n import { ReportDesignerState } from \"@report/ReportDesigner/types/store\";\r\n import { create } from \"zustand\";\r\n \r\n-export const useReportDesignerStore = create<ReportDesignerState>((set) => ({\r\n+export const useReportDesignerStore = create<ReportDesignerState>((set, get) => ({\r\n   components: [],\r\n   selectedIds: [],\r\n   canvasConfig: {\r\n     gridSize: 20,\r\n@@ -23,9 +23,16 @@\n     set((state) => ({\r\n       components: state.components.filter((c) => c.id !== id),\r\n       selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n     })),\r\n-  setSelectedIds: (ids: string[]) => set({ selectedIds: ids }),\r\n+  setSelectedIds: (ids: string[]) => {\r\n+    console.log(\"setSelectedIds调用，参数:\", ids);\r\n+    set({ selectedIds: ids });\r\n+    // 立即打印store中的selectedIds\r\n+    setTimeout(() => {\r\n+      console.log(\"setSelectedIds后，store.selectedIds:\", get().selectedIds);\r\n+    }, 0);\r\n+  },\r\n   setCanvasConfig: (config) =>\r\n     set((state) => ({\r\n       canvasConfig: { ...state.canvasConfig, ...config },\r\n     })),\r\n"
                },
                {
                    "date": 1747231856880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,41 @@\n import { ReportComponent } from \"@report/ReportDesigner/types/component\";\r\n import { ReportDesignerState } from \"@report/ReportDesigner/types/store\";\r\n import { create } from \"zustand\";\r\n \r\n-export const useReportDesignerStore = create<ReportDesignerState>((set, get) => ({\r\n-  components: [],\r\n-  selectedIds: [],\r\n-  canvasConfig: {\r\n-    gridSize: 20,\r\n-    showGrid: true,\r\n-    snapToGrid: true,\r\n-  },\r\n-  setComponents: (components: ReportComponent[]) => set({ components }),\r\n-  addComponent: (component: ReportComponent) =>\r\n-    set((state) => ({ components: [...state.components, component] })),\r\n-  updateComponent: (id: string, data: Partial<ReportComponent>) =>\r\n-    set((state) => ({\r\n-      components: state.components.map((c) =>\r\n-        c.id === id ? { ...c, ...data } : c\r\n-      ),\r\n-    })),\r\n-  removeComponent: (id: string) =>\r\n-    set((state) => ({\r\n-      components: state.components.filter((c) => c.id !== id),\r\n-      selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n-    })),\r\n-  setSelectedIds: (ids: string[]) => {\r\n-    console.log(\"setSelectedIds调用，参数:\", ids);\r\n-    set({ selectedIds: ids });\r\n-    // 立即打印store中的selectedIds\r\n-    setTimeout(() => {\r\n-      console.log(\"setSelectedIds后，store.selectedIds:\", get().selectedIds);\r\n-    }, 0);\r\n-  },\r\n-  setCanvasConfig: (config) =>\r\n-    set((state) => ({\r\n-      canvasConfig: { ...state.canvasConfig, ...config },\r\n-    })),\r\n-}));\r\n+export const useReportDesignerStore = create<ReportDesignerState>(\r\n+  (set, get) => ({\r\n+    components: [],\r\n+    selectedIds: [],\r\n+    canvasConfig: {\r\n+      gridSize: 20,\r\n+      showGrid: true,\r\n+      snapToGrid: true,\r\n+    },\r\n+    setComponents: (components: ReportComponent[]) => set({ components }),\r\n+    addComponent: (component: ReportComponent) =>\r\n+      set((state) => ({ components: [...state.components, component] })),\r\n+    updateComponent: (id: string, data: Partial<ReportComponent>) =>\r\n+      set((state) => ({\r\n+        components: state.components.map((c) =>\r\n+          c.id === id ? { ...c, ...data } : c\r\n+        ),\r\n+      })),\r\n+    removeComponent: (id: string) =>\r\n+      set((state) => ({\r\n+        components: state.components.filter((c) => c.id !== id),\r\n+        selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n+      })),\r\n+    setSelectedIds: (ids: string[]) => {\r\n+      console.log(\"setSelectedIds调用，参数:\", ids);\r\n+      set({ selectedIds: ids });\r\n+      // 立即打印store中的selectedIds\r\n+      setTimeout(() => {\r\n+        console.log(\"setSelectedIds后，store.selectedIds:\", get().selectedIds);\r\n+      }, 0);\r\n+    },\r\n+    setCanvasConfig: (config) =>\r\n+      set((state) => ({\r\n+        canvasConfig: { ...state.canvasConfig, ...config },\r\n+      })),\r\n+  })\r\n+);\r\n"
                },
                {
                    "date": 1747234368787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,12 @@\n         components: state.components.filter((c) => c.id !== id),\r\n         selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n       })),\r\n     setSelectedIds: (ids: string[]) => {\r\n-      console.log(\"setSelectedIds调用，参数:\", ids);\r\n+      console.log(\"[store] setSelectedIds调用，参数:\", ids);\r\n       set({ selectedIds: ids });\r\n-      // 立即打印store中的selectedIds\r\n       setTimeout(() => {\r\n-        console.log(\"setSelectedIds后，store.selectedIds:\", get().selectedIds);\r\n+        console.log(\"[store] setSelectedIds后，store.selectedIds:\", get().selectedIds);\r\n       }, 0);\r\n     },\r\n     setCanvasConfig: (config) =>\r\n       set((state) => ({\r\n"
                },
                {
                    "date": 1747274976291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,40 +1,161 @@\n-import { ReportComponent } from \"@report/ReportDesigner/types/component\";\r\n-import { ReportDesignerState } from \"@report/ReportDesigner/types/store\";\r\n-import { create } from \"zustand\";\r\n-\r\n-export const useReportDesignerStore = create<ReportDesignerState>(\r\n-  (set, get) => ({\r\n-    components: [],\r\n-    selectedIds: [],\r\n-    canvasConfig: {\r\n-      gridSize: 20,\r\n-      showGrid: true,\r\n-      snapToGrid: true,\r\n-    },\r\n-    setComponents: (components: ReportComponent[]) => set({ components }),\r\n-    addComponent: (component: ReportComponent) =>\r\n-      set((state) => ({ components: [...state.components, component] })),\r\n-    updateComponent: (id: string, data: Partial<ReportComponent>) =>\r\n-      set((state) => ({\r\n-        components: state.components.map((c) =>\r\n-          c.id === id ? { ...c, ...data } : c\r\n-        ),\r\n-      })),\r\n-    removeComponent: (id: string) =>\r\n-      set((state) => ({\r\n-        components: state.components.filter((c) => c.id !== id),\r\n-        selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n-      })),\r\n-    setSelectedIds: (ids: string[]) => {\r\n-      console.log(\"[store] setSelectedIds调用，参数:\", ids);\r\n-      set({ selectedIds: ids });\r\n-      setTimeout(() => {\r\n-        console.log(\"[store] setSelectedIds后，store.selectedIds:\", get().selectedIds);\r\n-      }, 0);\r\n-    },\r\n-    setCanvasConfig: (config) =>\r\n-      set((state) => ({\r\n-        canvasConfig: { ...state.canvasConfig, ...config },\r\n-      })),\r\n-  })\r\n-);\r\n+import { ReportComponent } from \"@report/ReportDesigner/types/component\";\n+import { ReportDesignerState } from \"@report/ReportDesigner/types/store\";\n+import { create } from \"zustand\";\n+import { devtools } from \"zustand/middleware\";\n+import { immer } from \"zustand/middleware/immer\";\n+import { persist } from \"zustand/middleware\";\n+\n+export const useReportDesignerStore = create(\n+  devtools(\n+    persist(\n+      immer<ReportDesignerState>((set, get) => ({\n+        components: [],\n+        selectedIds: [],\n+        canvasConfig: {\n+          gridSize: 20,\n+          showGrid: true,\n+          showRuler: true,\n+          rulerUnit: \"px\",\n+          allowSnapToGrid: true,\n+          snapToGrid: true,\n+          width: 1123, // A4横向\n+          height: 794,\n+          sizeType: \"A4-landscape\",\n+        },\n+        setComponents: (components: ReportComponent[]) =>\n+          set((state) => {\n+            state.components = components;\n+          }),\n+        addComponent: (component: ReportComponent) =>\n+          set((state) => {\n+            const maxZ =\n+              state.components.length > 0\n+                ? Math.max(...state.components.map((c) => c.zindex ?? 1))\n+                : 0;\n+            component.zindex = maxZ + 1;\n+            state.components.push(component);\n+          }),\n+        updateComponent: (id: string, data: Partial<ReportComponent>) =>\n+          set((state) => {\n+            const comp = state.components.find((c) => c.id === id);\n+            if (comp) Object.assign(comp, data);\n+          }),\n+        removeComponent: (id: string) =>\n+          set((state) => {\n+            state.components = state.components.filter((c) => c.id !== id);\n+            state.selectedIds = state.selectedIds.filter((sid) => sid !== id);\n+          }),\n+        setSelectedIds: (ids: string[]) => {\n+          console.log(\"[store] setSelectedIds调用，参数:\", ids);\n+          set((state) => {\n+            state.selectedIds = ids;\n+          });\n+          setTimeout(() => {\n+            console.log(\n+              \"[store] setSelectedIds后，store.selectedIds:\",\n+              get().selectedIds\n+            );\n+          }, 0);\n+        },\n+        setCanvasConfig: (config) =>\n+          set((state) => {\n+            state.canvasConfig = { ...state.canvasConfig, ...config };\n+          }),\n+        batchUpdateComponent: (ids: string[], data: Partial<ReportComponent>) =>\n+          set((state) => {\n+            state.components.forEach((c) => {\n+              if (ids.includes(c.id)) Object.assign(c, data);\n+            });\n+          }),\n+        batchRemoveComponent: (ids: string[]) =>\n+          set((state) => {\n+            state.components = state.components.filter(\n+              (c) => !ids.includes(c.id)\n+            );\n+            state.selectedIds = state.selectedIds.filter(\n+              (sid) => !ids.includes(sid)\n+            );\n+          }),\n+        batchLockComponent: (ids: string[], locked: boolean) =>\n+          set((state) => {\n+            state.components.forEach((c) => {\n+              if (ids.includes(c.id)) c.locked = locked;\n+            });\n+          }),\n+        batchVisibleComponent: (ids: string[], visible: boolean) =>\n+          set((state) => {\n+            state.components.forEach((c) => {\n+              if (ids.includes(c.id)) c.visible = visible;\n+            });\n+          }),\n+        moveComponentZIndex: (\n+          id: string,\n+          type: \"top\" | \"bottom\" | \"up\" | \"down\"\n+        ) =>\n+          set((state) => {\n+            const comps = state.components;\n+            const idx = comps.findIndex((c) => c.id === id);\n+            if (idx === -1) return;\n+            const comp = comps[idx];\n+            // 取所有zindex，升序\n+            const sorted = comps\n+              .slice()\n+              .sort((a, b) => (a.zindex ?? 1) - (b.zindex ?? 1));\n+            const zList = sorted.map((c) => c.zindex ?? 1);\n+            let newZ = comp.zindex ?? 1;\n+            if (type === \"top\") {\n+              newZ = Math.max(...zList) + 1;\n+            } else if (type === \"bottom\") {\n+              newZ = Math.min(...zList) - 1;\n+            } else if (type === \"up\") {\n+              // 找到比自己大且最近的zindex\n+              const above = sorted.find(\n+                (c) => (c.zindex ?? 1) > (comp.zindex ?? 1)\n+              );\n+              if (above) {\n+                // 交换zindex\n+                const tmp = above.zindex;\n+                above.zindex = comp.zindex;\n+                newZ = tmp;\n+              }\n+            } else if (type === \"down\") {\n+              // 找到比自己小且最近的zindex\n+              const below = [...sorted]\n+                .reverse()\n+                .find((c) => (c.zindex ?? 1) < (comp.zindex ?? 1));\n+              if (below) {\n+                const tmp = below.zindex;\n+                below.zindex = comp.zindex;\n+                newZ = tmp;\n+              }\n+            }\n+            comp.zindex = newZ;\n+            // 保证zindex唯一且递增\n+            const uniq = Array.from(\n+              new Set(comps.map((c) => c.zindex ?? 1))\n+            ).sort((a, b) => a - b);\n+            uniq.forEach((z, i) => {\n+              comps\n+                .filter((c) => c.zindex === z)\n+                .forEach((c) => (c.zindex = i + 1));\n+            });\n+          }),\n+        copyComponent: (id: string) =>\n+          set((state) => {\n+            const comp = state.components.find((c) => c.id === id);\n+            if (!comp) return;\n+            const newComp = { ...comp, id: `${comp.id}_copy_${Date.now()}` };\n+            state.components.push(newComp);\n+          }),\n+      })),\n+      {\n+        name: \"report-designer-store\",\n+        partialize: (state) => ({\n+          components: state.components,\n+          canvasConfig: state.canvasConfig,\n+        }),\n+      }\n+    ),\n+    { name: \"ReportDesignerStore\" }\n+  )\n+);\n"
                },
                {
                    "date": 1747292909841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,11 @@\n             state.components = state.components.filter((c) => c.id !== id);\n             state.selectedIds = state.selectedIds.filter((sid) => sid !== id);\n           }),\n         setSelectedIds: (ids: string[]) => {\n+          if (ids.length === 0) {\n+            console.trace('[store] setSelectedIds([]) 被调用');\n+          }\n           console.log(\"[store] setSelectedIds调用，参数:\", ids);\n           set((state) => {\n             state.selectedIds = ids;\n           });\n"
                },
                {
                    "date": 1747293218123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n             state.selectedIds = state.selectedIds.filter((sid) => sid !== id);\n           }),\n         setSelectedIds: (ids: string[]) => {\n           if (ids.length === 0) {\n-            console.trace('[store] setSelectedIds([]) 被调用');\n+            console.trace(\"[store] setSelectedIds([]) 被调用\");\n           }\n           console.log(\"[store] setSelectedIds调用，参数:\", ids);\n           set((state) => {\n             state.selectedIds = ids;\n"
                },
                {
                    "date": 1747293487627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,10 @@\n               get().selectedIds\n             );\n           }, 0);\n         },\n+        isSelecting: false,\n+        setIsSelecting: (flag: boolean) => set((state) => { state.isSelecting = flag; }),\n         setCanvasConfig: (config) =>\n           set((state) => {\n             state.canvasConfig = { ...state.canvasConfig, ...config };\n           }),\n"
                },
                {
                    "date": 1747293516871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,13 +59,8 @@\n               get().selectedIds\n             );\n           }, 0);\n         },\n-        isSelecting: false,\n-        setIsSelecting: (flag: boolean) =>\n-          set((state) => {\n-            state.isSelecting = flag;\n-          }),\n         setCanvasConfig: (config) =>\n           set((state) => {\n             state.canvasConfig = { ...state.canvasConfig, ...config };\n           }),\n"
                },
                {
                    "date": 1747359012707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,20 +58,20 @@\n             state.selectedIds = state.selectedIds.filter((sid) => sid !== id);\n           }),\n         setSelectedIds: (ids: string[]) => {\n           if (ids.length === 0) {\n-            console.trace(\"[store] setSelectedIds([]) 被调用\");\n+            // console.trace(\"[store] setSelectedIds([]) 被调用\");\n           }\n-          console.log(\"[store] setSelectedIds调用，参数:\", ids);\n+          // console.log(\"[store] setSelectedIds调用，参数:\", ids);\n           set((state) => {\n             state.selectedIds = ids;\n           });\n-          setTimeout(() => {\n-            console.log(\n-              \"[store] setSelectedIds后，store.selectedIds:\",\n-              get().selectedIds\n-            );\n-          }, 0);\n+          // setTimeout(() => {\n+          //   console.log(\n+          //     \"[store] setSelectedIds后，store.selectedIds:\",\n+          //     get().selectedIds\n+          //   );\n+          // }, 0);\n         },\n         setCanvasConfig: (config) =>\n           set((state) => {\n             state.canvasConfig = { ...state.canvasConfig, ...config };\n"
                }
            ],
            "date": 1747228066107,
            "name": "Commit-0",
            "content": "import { ReportComponent } from \"../types/component\";\r\nimport { ReportDesignerState } from \"../types/store\";\r\nimport { create } from \"zustand\";\r\n\r\nexport const useReportDesignerStore = create<ReportDesignerState>(\r\n  (set, get) => ({\r\n    components: [],\r\n    selectedIds: [],\r\n    canvasConfig: {\r\n      gridSize: 20,\r\n      showGrid: true,\r\n      snapToGrid: true,\r\n    },\r\n    setComponents: (components: ReportComponent[]) => set({ components }),\r\n    addComponent: (component: ReportComponent) =>\r\n      set((state) => ({ components: [...state.components, component] })),\r\n    updateComponent: (id: string, data: Partial<ReportComponent>) =>\r\n      set((state) => ({\r\n        components: state.components.map((c) =>\r\n          c.id === id ? { ...c, ...data } : c\r\n        ),\r\n      })),\r\n    removeComponent: (id: string) =>\r\n      set((state) => ({\r\n        components: state.components.filter((c) => c.id !== id),\r\n        selectedIds: state.selectedIds.filter((sid) => sid !== id),\r\n      })),\r\n    setSelectedIds: (ids: string[]) => set({ selectedIds: ids }),\r\n    setCanvasConfig: (config) =>\r\n      set((state) => ({\r\n        canvasConfig: { ...state.canvasConfig, ...config },\r\n      })),\r\n  })\r\n);\r\n"
        }
    ]
}