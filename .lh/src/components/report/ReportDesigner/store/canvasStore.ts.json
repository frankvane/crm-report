{
    "sourceFile": "src/components/report/ReportDesigner/store/canvasStore.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1747498291015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747537225645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n+import { devtools, persist } from \"zustand/middleware\";\r\n+\r\n+import type { CanvasComponent } from \"../components/report/ReportDesigner/types\";\r\n import { create } from \"zustand\";\r\n-import { devtools } from \"zustand/middleware\";\r\n import { immer } from \"zustand/middleware/immer\";\r\n \r\n interface CanvasConfig {\r\n   gridSize: number;\r\n@@ -31,14 +33,19 @@\n   sizeType: \"A4-landscape\",\r\n };\r\n \r\n export const useCanvasStore = create<CanvasState>()(\r\n-  devtools(\r\n-    immer((set) => ({\r\n-      canvasConfig: defaultConfig,\r\n-      setCanvasConfig: (config) =>\r\n-        set((state) => {\r\n-          state.canvasConfig = { ...state.canvasConfig, ...config };\r\n-        }),\r\n-    }))\r\n+  persist(\r\n+    devtools(\r\n+      immer((set) => ({\r\n+        canvasConfig: defaultConfig,\r\n+        setCanvasConfig: (config) =>\r\n+          set((state) => {\r\n+            state.canvasConfig = { ...state.canvasConfig, ...config };\r\n+          }),\r\n+      }))\r\n+    ),\r\n+    {\r\n+      name: 'canvas-storage',\r\n+    }\r\n   )\r\n );\r\n"
                },
                {
                    "date": 1747537236455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import { devtools, persist } from \"zustand/middleware\";\r\n \r\n-import type { CanvasComponent } from \"../components/report/ReportDesigner/types\";\r\n import { create } from \"zustand\";\r\n import { immer } from \"zustand/middleware/immer\";\r\n \r\n interface CanvasConfig {\r\n"
                },
                {
                    "date": 1747537269610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,8 @@\n           }),\r\n       }))\r\n     ),\r\n     {\r\n-      name: 'canvas-storage',\r\n+      name: \"canvas-storage\",\r\n     }\r\n   )\r\n );\r\n"
                },
                {
                    "date": 1747538171837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,10 @@\n \r\n interface CanvasState {\r\n   canvasConfig: CanvasConfig;\r\n   setCanvasConfig: (config: Partial<CanvasConfig>) => void;\r\n+  _hasHydrated: boolean;\r\n+  _setHasHydrated: (hasHydrated: boolean) => void;\r\n }\r\n \r\n const defaultConfig: CanvasConfig = {\r\n   gridSize: 20,\r\n@@ -31,20 +33,52 @@\n   height: 794,\r\n   sizeType: \"A4-landscape\",\r\n };\r\n \r\n+const specificInitialConfig: CanvasConfig = {\r\n+  ...defaultConfig,\r\n+  width: 800,\r\n+  height: 600,\r\n+  sizeType: \"Custom\",\r\n+};\r\n+\r\n export const useCanvasStore = create<CanvasState>()(\r\n   persist(\r\n     devtools(\r\n       immer((set) => ({\r\n         canvasConfig: defaultConfig,\r\n+        _hasHydrated: false,\r\n         setCanvasConfig: (config) =>\r\n           set((state) => {\r\n             state.canvasConfig = { ...state.canvasConfig, ...config };\r\n           }),\r\n+        _setHasHydrated: (hasHydrated) => set({ _hasHydrated: hasHydrated }),\r\n       }))\r\n     ),\r\n     {\r\n       name: \"canvas-storage\",\r\n+      onHydrate: (state) => {\r\n+        console.log('Hydration started', state);\r\n+      },\r\n+      onRehydrated: (state, error) => {\r\n+        console.log('Hydration finished', state);\r\n+        if (error) {\r\n+          console.error('Hydration failed', error);\r\n+        } else {\r\n+          const isDefaultConfigLoaded = JSON.stringify(state?.canvasConfig) === JSON.stringify(defaultConfig);\r\n+\r\n+          if (isDefaultConfigLoaded) {\r\n+            console.log('Loaded default config (or storage was default). Applying specific initial config.');\r\n+            useCanvasStore.setState(prevState => ({\r\n+              canvasConfig: specificInitialConfig,\r\n+              _hasHydrated: true,\r\n+            }));\r\n+          } else {\r\n+            console.log('Loaded data from storage.');\r\n+            useCanvasStore.setState({ _hasHydrated: true });\r\n+          }\r\n+        }\r\n+      },\r\n+      partialize: (state) => ({ canvasConfig: state.canvasConfig })\r\n     }\r\n   )\r\n );\r\n"
                },
                {
                    "date": 1747538275341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,8 @@\n \r\n interface CanvasState {\r\n   canvasConfig: CanvasConfig;\r\n   setCanvasConfig: (config: Partial<CanvasConfig>) => void;\r\n-  _hasHydrated: boolean;\r\n-  _setHasHydrated: (hasHydrated: boolean) => void;\r\n }\r\n \r\n const defaultConfig: CanvasConfig = {\r\n   gridSize: 20,\r\n@@ -33,52 +31,20 @@\n   height: 794,\r\n   sizeType: \"A4-landscape\",\r\n };\r\n \r\n-const specificInitialConfig: CanvasConfig = {\r\n-  ...defaultConfig,\r\n-  width: 800,\r\n-  height: 600,\r\n-  sizeType: \"Custom\",\r\n-};\r\n-\r\n export const useCanvasStore = create<CanvasState>()(\r\n   persist(\r\n     devtools(\r\n       immer((set) => ({\r\n         canvasConfig: defaultConfig,\r\n-        _hasHydrated: false,\r\n         setCanvasConfig: (config) =>\r\n           set((state) => {\r\n             state.canvasConfig = { ...state.canvasConfig, ...config };\r\n           }),\r\n-        _setHasHydrated: (hasHydrated) => set({ _hasHydrated: hasHydrated }),\r\n       }))\r\n     ),\r\n     {\r\n       name: \"canvas-storage\",\r\n-      onHydrate: (state) => {\r\n-        console.log('Hydration started', state);\r\n-      },\r\n-      onRehydrated: (state, error) => {\r\n-        console.log('Hydration finished', state);\r\n-        if (error) {\r\n-          console.error('Hydration failed', error);\r\n-        } else {\r\n-          const isDefaultConfigLoaded = JSON.stringify(state?.canvasConfig) === JSON.stringify(defaultConfig);\r\n-\r\n-          if (isDefaultConfigLoaded) {\r\n-            console.log('Loaded default config (or storage was default). Applying specific initial config.');\r\n-            useCanvasStore.setState(prevState => ({\r\n-              canvasConfig: specificInitialConfig,\r\n-              _hasHydrated: true,\r\n-            }));\r\n-          } else {\r\n-            console.log('Loaded data from storage.');\r\n-            useCanvasStore.setState({ _hasHydrated: true });\r\n-          }\r\n-        }\r\n-      },\r\n-      partialize: (state) => ({ canvasConfig: state.canvasConfig })\r\n     }\r\n   )\r\n );\r\n"
                },
                {
                    "date": 1747576720486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n   canvasConfig: CanvasConfig;\r\n   setCanvasConfig: (config: Partial<CanvasConfig>) => void;\r\n }\r\n \r\n-const defaultConfig: CanvasConfig = {\r\n+export const defaultConfig: CanvasConfig = {\r\n   gridSize: 20,\r\n   showGrid: true,\r\n   showRuler: true,\r\n   rulerUnit: \"px\",\r\n"
                }
            ],
            "date": 1747498291015,
            "name": "Commit-0",
            "content": "import { create } from \"zustand\";\r\nimport { devtools } from \"zustand/middleware\";\r\nimport { immer } from \"zustand/middleware/immer\";\r\n\r\ninterface CanvasConfig {\r\n  gridSize: number;\r\n  showGrid: boolean;\r\n  showRuler: boolean;\r\n  rulerUnit: \"px\" | \"mm\";\r\n  allowSnapToGrid: boolean;\r\n  snapToGrid: boolean;\r\n  width: number;\r\n  height: number;\r\n  sizeType: string;\r\n}\r\n\r\ninterface CanvasState {\r\n  canvasConfig: CanvasConfig;\r\n  setCanvasConfig: (config: Partial<CanvasConfig>) => void;\r\n}\r\n\r\nconst defaultConfig: CanvasConfig = {\r\n  gridSize: 20,\r\n  showGrid: true,\r\n  showRuler: true,\r\n  rulerUnit: \"px\",\r\n  allowSnapToGrid: true,\r\n  snapToGrid: true,\r\n  width: 1123,\r\n  height: 794,\r\n  sizeType: \"A4-landscape\",\r\n};\r\n\r\nexport const useCanvasStore = create<CanvasState>()(\r\n  devtools(\r\n    immer((set) => ({\r\n      canvasConfig: defaultConfig,\r\n      setCanvasConfig: (config) =>\r\n        set((state) => {\r\n          state.canvasConfig = { ...state.canvasConfig, ...config };\r\n        }),\r\n    }))\r\n  )\r\n);\r\n"
        }
    ]
}