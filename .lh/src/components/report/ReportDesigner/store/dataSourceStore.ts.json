{
    "sourceFile": "src/components/report/ReportDesigner/store/dataSourceStore.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1747364203184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747364212683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,11 @@\n       let data: any[] = [];\r\n       try {\r\n         const respAll = await fetch(ds.url);\r\n         data = await respAll.json();\r\n-      } catch {}\r\n+      } catch (e) {\r\n+        // ignore\r\n+      }\r\n       set((state) => ({\r\n         dataSources: state.dataSources.map((d) =>\r\n           d.key === key ? { ...d, fields, sample, data } : d\r\n         ),\r\n"
                },
                {
                    "date": 1747364225688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,11 +75,9 @@\n       let data: any[] = [];\r\n       try {\r\n         const respAll = await fetch(ds.url);\r\n         data = await respAll.json();\r\n-      } catch (e) {\r\n-        // ignore\r\n-      }\r\n+      } catch {}\r\n       set((state) => ({\r\n         dataSources: state.dataSources.map((d) =>\r\n           d.key === key ? { ...d, fields, sample, data } : d\r\n         ),\r\n"
                },
                {
                    "date": 1747364294291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,13 @@\n   },\r\n ];\r\n \r\n export const useDataSourceStore = create<DataSourceStoreState>((set, get) => ({\r\n-  dataSources: initialDataSources.map((ds) => ({ ...ds, fields: [], data: [] })),\r\n+  dataSources: initialDataSources.map((ds) => ({\r\n+    ...ds,\r\n+    fields: [],\r\n+    data: [],\r\n+  })),\r\n   addDataSource: (ds) =>\r\n     set((state) => ({\r\n       dataSources: [...state.dataSources, ds],\r\n     })),\r\n"
                },
                {
                    "date": 1747378936500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n import { create } from \"zustand\";\r\n+import { mockUsers } from \"./mockData\";\r\n \r\n export interface DataSource {\r\n-  key: string; // 唯一标识，如 'posts'\r\n-  name: string; // 显示名，如 '文章'\r\n-  url: string; // API 地址\r\n+  key: string; // 唯一标识，如 'users'\r\n+  name: string; // 显示名，如 '用户'\r\n   fields: string[]; // 字段名列表\r\n   sample?: any; // 示例数据\r\n   data?: any[]; // 全量数据\r\n }\r\n@@ -12,85 +12,28 @@\n interface DataSourceStoreState {\r\n   dataSources: DataSource[];\r\n   addDataSource: (ds: DataSource) => void;\r\n   removeDataSource: (key: string) => void;\r\n-  fetchFields: (key: string) => Promise<void>;\r\n }\r\n \r\n-const initialDataSources: Omit<DataSource, \"fields\" | \"data\">[] = [\r\n+const initialDataSources: DataSource[] = [\r\n   {\r\n-    key: \"posts\",\r\n-    name: \"文章\",\r\n-    url: \"https://jsonplaceholder.typicode.com/posts\",\r\n-  },\r\n-  {\r\n-    key: \"comments\",\r\n-    name: \"评论\",\r\n-    url: \"https://jsonplaceholder.typicode.com/comments\",\r\n-  },\r\n-  {\r\n-    key: \"albums\",\r\n-    name: \"相册\",\r\n-    url: \"https://jsonplaceholder.typicode.com/albums\",\r\n-  },\r\n-  {\r\n-    key: \"photos\",\r\n-    name: \"照片\",\r\n-    url: \"https://jsonplaceholder.typicode.com/photos\",\r\n-  },\r\n-  {\r\n-    key: \"todos\",\r\n-    name: \"待办\",\r\n-    url: \"https://jsonplaceholder.typicode.com/todos\",\r\n-  },\r\n-  {\r\n     key: \"users\",\r\n     name: \"用户\",\r\n-    url: \"https://jsonplaceholder.typicode.com/users\",\r\n+    fields: [\"id\", \"name\", \"phone\", \"address\", \"orders\"],\r\n+    sample: mockUsers[0],\r\n+    data: mockUsers,\r\n   },\r\n+  // 你可以继续添加其它mock数据源\r\n ];\r\n \r\n-export const useDataSourceStore = create<DataSourceStoreState>((set, get) => ({\r\n-  dataSources: initialDataSources.map((ds) => ({\r\n-    ...ds,\r\n-    fields: [],\r\n-    data: [],\r\n-  })),\r\n+export const useDataSourceStore = create<DataSourceStoreState>((set) => ({\r\n+  dataSources: initialDataSources,\r\n   addDataSource: (ds) =>\r\n     set((state) => ({\r\n       dataSources: [...state.dataSources, ds],\r\n     })),\r\n   removeDataSource: (key) =>\r\n     set((state) => ({\r\n       dataSources: state.dataSources.filter((ds) => ds.key !== key),\r\n     })),\r\n-  fetchFields: async (key) => {\r\n-    const ds = get().dataSources.find((d) => d.key === key);\r\n-    if (!ds) return;\r\n-    try {\r\n-      // 拉取一条示例\r\n-      const resp = await fetch(`${ds.url}/1`);\r\n-      const sample = await resp.json();\r\n-      const fields = sample ? Object.keys(sample) : [];\r\n-      // 拉取全部数据\r\n-      let data: any[] = [];\r\n-      try {\r\n-        const respAll = await fetch(ds.url);\r\n-        data = await respAll.json();\r\n-      } catch {}\r\n-      set((state) => ({\r\n-        dataSources: state.dataSources.map((d) =>\r\n-          d.key === key ? { ...d, fields, sample, data } : d\r\n-        ),\r\n-      }));\r\n-    } catch {\r\n-      // ignore\r\n-    }\r\n-  },\r\n }));\r\n-\r\n-// 启动时自动拉取所有字段结构\r\n-(async () => {\r\n-  for (const ds of initialDataSources) {\r\n-    await useDataSourceStore.getState().fetchFields(ds.key);\r\n-  }\r\n-})();\r\n"
                },
                {
                    "date": 1747379373277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n const initialDataSources: DataSource[] = [\r\n   {\r\n     key: \"users\",\r\n     name: \"用户\",\r\n-    fields: [\"id\", \"name\", \"phone\", \"address\", \"orders\"],\r\n+    fields: [\"id\", \"name\", \"phone\", \"address\", \"orders\", \"photo\"],\r\n     sample: mockUsers[0],\r\n     data: mockUsers,\r\n   },\r\n   // 你可以继续添加其它mock数据源\r\n"
                },
                {
                    "date": 1747497618005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n const initialDataSources: DataSource[] = [\r\n   {\r\n     key: \"users\",\r\n     name: \"用户\",\r\n-    fields: [\"id\", \"name\", \"phone\", \"address\", \"orders\", \"photo\"],\r\n+    fields: [\"id\", \"name\", \"phone\", \"address\", \"orders\", \"photo\",\"favoritesList\"],\r\n     sample: mockUsers[0],\r\n     data: mockUsers,\r\n   },\r\n   // 你可以继续添加其它mock数据源\r\n"
                },
                {
                    "date": 1747497625809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,23 @@\n     ],\r\n     sample: mockUsers[0],\r\n     data: mockUsers,\r\n   },\r\n+  {\r\n+    key: \"products\",\r\n+    name: \"产品\",\r\n+    fields: [\r\n+      \"id\",\r\n+      \"name\",\r\n+      \"price\",\r\n+      \"stock\",\r\n+      \"category\",\r\n+      \"image\",\r\n+      \"relatedProducts\",\r\n+    ],\r\n+    sample: mockUsers[0],\r\n+    data: mockUsers,\r\n+  },\r\n   // 你可以继续添加其它mock数据源\r\n ];\r\n \r\n export const useDataSourceStore = create<DataSourceStoreState>((set) => ({\r\n"
                },
                {
                    "date": 1747497660022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n+import { mockProducts, mockUsers } from \"./mockData\";\r\n+\r\n import { create } from \"zustand\";\r\n-import { mockUsers } from \"./mockData\";\r\n \r\n export interface DataSource {\r\n   key: string; // 唯一标识，如 'users'\r\n   name: string; // 显示名，如 '用户'\r\n"
                }
            ],
            "date": 1747364203184,
            "name": "Commit-0",
            "content": "import { create } from \"zustand\";\r\n\r\nexport interface DataSource {\r\n  key: string; // 唯一标识，如 'posts'\r\n  name: string; // 显示名，如 '文章'\r\n  url: string; // API 地址\r\n  fields: string[]; // 字段名列表\r\n  sample?: any; // 示例数据\r\n  data?: any[]; // 全量数据\r\n}\r\n\r\ninterface DataSourceStoreState {\r\n  dataSources: DataSource[];\r\n  addDataSource: (ds: DataSource) => void;\r\n  removeDataSource: (key: string) => void;\r\n  fetchFields: (key: string) => Promise<void>;\r\n}\r\n\r\nconst initialDataSources: Omit<DataSource, \"fields\" | \"data\">[] = [\r\n  {\r\n    key: \"posts\",\r\n    name: \"文章\",\r\n    url: \"https://jsonplaceholder.typicode.com/posts\",\r\n  },\r\n  {\r\n    key: \"comments\",\r\n    name: \"评论\",\r\n    url: \"https://jsonplaceholder.typicode.com/comments\",\r\n  },\r\n  {\r\n    key: \"albums\",\r\n    name: \"相册\",\r\n    url: \"https://jsonplaceholder.typicode.com/albums\",\r\n  },\r\n  {\r\n    key: \"photos\",\r\n    name: \"照片\",\r\n    url: \"https://jsonplaceholder.typicode.com/photos\",\r\n  },\r\n  {\r\n    key: \"todos\",\r\n    name: \"待办\",\r\n    url: \"https://jsonplaceholder.typicode.com/todos\",\r\n  },\r\n  {\r\n    key: \"users\",\r\n    name: \"用户\",\r\n    url: \"https://jsonplaceholder.typicode.com/users\",\r\n  },\r\n];\r\n\r\nexport const useDataSourceStore = create<DataSourceStoreState>((set, get) => ({\r\n  dataSources: initialDataSources.map((ds) => ({ ...ds, fields: [], data: [] })),\r\n  addDataSource: (ds) =>\r\n    set((state) => ({\r\n      dataSources: [...state.dataSources, ds],\r\n    })),\r\n  removeDataSource: (key) =>\r\n    set((state) => ({\r\n      dataSources: state.dataSources.filter((ds) => ds.key !== key),\r\n    })),\r\n  fetchFields: async (key) => {\r\n    const ds = get().dataSources.find((d) => d.key === key);\r\n    if (!ds) return;\r\n    try {\r\n      // 拉取一条示例\r\n      const resp = await fetch(`${ds.url}/1`);\r\n      const sample = await resp.json();\r\n      const fields = sample ? Object.keys(sample) : [];\r\n      // 拉取全部数据\r\n      let data: any[] = [];\r\n      try {\r\n        const respAll = await fetch(ds.url);\r\n        data = await respAll.json();\r\n      } catch {}\r\n      set((state) => ({\r\n        dataSources: state.dataSources.map((d) =>\r\n          d.key === key ? { ...d, fields, sample, data } : d\r\n        ),\r\n      }));\r\n    } catch {\r\n      // ignore\r\n    }\r\n  },\r\n}));\r\n\r\n// 启动时自动拉取所有字段结构\r\n(async () => {\r\n  for (const ds of initialDataSources) {\r\n    await useDataSourceStore.getState().fetchFields(ds.key);\r\n  }\r\n})();\r\n"
        }
    ]
}