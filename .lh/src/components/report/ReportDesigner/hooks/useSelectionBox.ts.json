{
    "sourceFile": "src/components/report/ReportDesigner/hooks/useSelectionBox.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747289435101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747289463388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,12 @@\n import { useCallback, useRef, useState } from \"react\";\r\n \r\n-export function useSelectionBox(components, setSelectedIds) {\r\n+import type { ReportComponent } from \"@report/ReportDesigner/types/component\";\r\n+\r\n+export function useSelectionBox(\r\n+  components: ReportComponent[],\r\n+  setSelectedIds: (ids: string[]) => void\r\n+) {\r\n   const [selectRect, setSelectRect] = useState<null | {\r\n     x: number;\r\n     y: number;\r\n     w: number;\r\n@@ -11,11 +16,11 @@\n   const dragStart = useRef<{ x: number; y: number } | null>(null);\r\n   const isSelectingRef = useRef(false);\r\n   const selectThresholdWRef = useRef(5);\r\n   const selectThresholdHRef = useRef(5);\r\n-  const componentsRef = useRef(components);\r\n+  const componentsRef = useRef<ReportComponent[]>(components);\r\n   componentsRef.current = components;\r\n-  const setSelectedIdsRef = useRef(setSelectedIds);\r\n+  const setSelectedIdsRef = useRef<(ids: string[]) => void>(setSelectedIds);\r\n   setSelectedIdsRef.current = setSelectedIds;\r\n \r\n   const handleMouseMove = useCallback((e: MouseEvent) => {\r\n     if (!dragStart.current) return;\r\n@@ -59,21 +64,21 @@\n     const y1 = Math.min(startY, endY);\r\n     const x2 = Math.max(startX, endX);\r\n     const y2 = Math.max(startY, endY);\r\n     if (isSelectingRef.current) {\r\n-      const selected = componentsRef.current.filter((c) => {\r\n+      const selected = componentsRef.current.filter((c: ReportComponent) => {\r\n         const cx1 = c.x;\r\n         const cy1 = c.y;\r\n         const cx2 = c.x + c.width;\r\n         const cy2 = c.y + c.height;\r\n         return cx1 < x2 && cx2 > x1 && cy1 < y2 && cy2 > y1;\r\n       });\r\n-      setSelectedIdsRef.current(selected.map((c) => c.id));\r\n+      setSelectedIdsRef.current(selected.map((c: ReportComponent) => c.id));\r\n     } else {\r\n       const mouseX = endX;\r\n       const mouseY = endY;\r\n       const hit = componentsRef.current.find(\r\n-        (c) =>\r\n+        (c: ReportComponent) =>\r\n           mouseX >= c.x &&\r\n           mouseX <= c.x + c.width &&\r\n           mouseY >= c.y &&\r\n           mouseY <= c.y + c.height\r\n@@ -104,13 +109,13 @@\n     isSelectingRef.current = false;\r\n     if (components.length > 0) {\r\n       selectThresholdWRef.current = Math.max(\r\n         5,\r\n-        Math.min(...components.map((c) => c.width))\r\n+        Math.min(...components.map((c: ReportComponent) => c.width))\r\n       );\r\n       selectThresholdHRef.current = Math.max(\r\n         5,\r\n-        Math.min(...components.map((c) => c.height))\r\n+        Math.min(...components.map((c: ReportComponent) => c.height))\r\n       );\r\n     } else {\r\n       selectThresholdWRef.current = 5;\r\n       selectThresholdHRef.current = 5;\r\n"
                },
                {
                    "date": 1747291508710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,13 +30,9 @@\n     const curX = e.clientX - rect.left;\r\n     const curY = e.clientY - rect.top;\r\n     const dx = Math.abs(curX - dragStart.current.x);\r\n     const dy = Math.abs(curY - dragStart.current.y);\r\n-    if (\r\n-      !isSelectingRef.current &&\r\n-      dx > selectThresholdWRef.current &&\r\n-      dy > selectThresholdHRef.current\r\n-    ) {\r\n+    if (!isSelectingRef.current && (dx > selectThresholdWRef.current || dy > selectThresholdHRef.current)) {\r\n       isSelectingRef.current = true;\r\n       setIsSelecting(true);\r\n     }\r\n     if (isSelectingRef.current) {\r\n"
                }
            ],
            "date": 1747289435101,
            "name": "Commit-0",
            "content": "import { useCallback, useRef, useState } from \"react\";\r\n\r\nexport function useSelectionBox(components, setSelectedIds) {\r\n  const [selectRect, setSelectRect] = useState<null | { x: number; y: number; w: number; h: number }>(null);\r\n  const [isSelecting, setIsSelecting] = useState(false);\r\n  const dragStart = useRef<{ x: number; y: number } | null>(null);\r\n  const isSelectingRef = useRef(false);\r\n  const selectThresholdWRef = useRef(5);\r\n  const selectThresholdHRef = useRef(5);\r\n  const componentsRef = useRef(components);\r\n  componentsRef.current = components;\r\n  const setSelectedIdsRef = useRef(setSelectedIds);\r\n  setSelectedIdsRef.current = setSelectedIds;\r\n\r\n  const handleMouseMove = useCallback((e: MouseEvent) => {\r\n    if (!dragStart.current) return;\r\n    const canvas = document.getElementById(\"report-canvas-main\");\r\n    if (!canvas) return;\r\n    const rect = canvas.getBoundingClientRect();\r\n    const curX = e.clientX - rect.left;\r\n    const curY = e.clientY - rect.top;\r\n    const dx = Math.abs(curX - dragStart.current.x);\r\n    const dy = Math.abs(curY - dragStart.current.y);\r\n    if (!isSelectingRef.current && dx > selectThresholdWRef.current && dy > selectThresholdHRef.current) {\r\n      isSelectingRef.current = true;\r\n      setIsSelecting(true);\r\n    }\r\n    if (isSelectingRef.current) {\r\n      const x = Math.min(dragStart.current.x, curX);\r\n      const y = Math.min(dragStart.current.y, curY);\r\n      const w = Math.abs(curX - dragStart.current.x);\r\n      const h = Math.abs(curY - dragStart.current.y);\r\n      setSelectRect({ x, y, w, h });\r\n    }\r\n  }, []);\r\n\r\n  const handleMouseUp = useCallback((e: MouseEvent) => {\r\n    e.stopPropagation();\r\n    if (!dragStart.current) return;\r\n    const canvas = document.getElementById(\"report-canvas-main\");\r\n    if (!canvas) return;\r\n    const rect = canvas.getBoundingClientRect();\r\n    const offsetLeft = 16;\r\n    const offsetTop = 16;\r\n    const endX = e.clientX - rect.left - offsetLeft;\r\n    const endY = e.clientY - rect.top - offsetTop;\r\n    const startX = dragStart.current.x - offsetLeft;\r\n    const startY = dragStart.current.y - offsetTop;\r\n    const x1 = Math.min(startX, endX);\r\n    const y1 = Math.min(startY, endY);\r\n    const x2 = Math.max(startX, endX);\r\n    const y2 = Math.max(startY, endY);\r\n    if (isSelectingRef.current) {\r\n      const selected = componentsRef.current.filter((c) => {\r\n        const cx1 = c.x;\r\n        const cy1 = c.y;\r\n        const cx2 = c.x + c.width;\r\n        const cy2 = c.y + c.height;\r\n        return cx1 < x2 && cx2 > x1 && cy1 < y2 && cy2 > y1;\r\n      });\r\n      setSelectedIdsRef.current(selected.map((c) => c.id));\r\n    } else {\r\n      const mouseX = endX;\r\n      const mouseY = endY;\r\n      const hit = componentsRef.current.find(\r\n        (c) => mouseX >= c.x && mouseX <= c.x + c.width && mouseY >= c.y && mouseY <= c.y + c.height\r\n      );\r\n      setSelectedIdsRef.current(hit ? [hit.id] : []);\r\n    }\r\n    setSelectRect(null);\r\n    dragStart.current = null;\r\n    setIsSelecting(false);\r\n    isSelectingRef.current = false;\r\n    document.removeEventListener(\"mousemove\", handleMouseMoveRef.current!);\r\n    document.removeEventListener(\"mouseup\", handleMouseUpRef.current!);\r\n  }, []);\r\n\r\n  const handleMouseMoveRef = useRef<((e: MouseEvent) => void) | null>(null);\r\n  const handleMouseUpRef = useRef<((e: MouseEvent) => void) | null>(null);\r\n  handleMouseMoveRef.current = handleMouseMove;\r\n  handleMouseUpRef.current = handleMouseUp;\r\n\r\n  const handleMouseDown = (e: React.MouseEvent) => {\r\n    if (e.button !== 0) return;\r\n    const rect = e.currentTarget.getBoundingClientRect();\r\n    const startX = e.clientX - rect.left;\r\n    const startY = e.clientY - rect.top;\r\n    dragStart.current = { x: startX, y: startY };\r\n    setSelectRect(null);\r\n    setIsSelecting(false);\r\n    isSelectingRef.current = false;\r\n    if (components.length > 0) {\r\n      selectThresholdWRef.current = Math.max(5, Math.min(...components.map((c) => c.width)));\r\n      selectThresholdHRef.current = Math.max(5, Math.min(...components.map((c) => c.height)));\r\n    } else {\r\n      selectThresholdWRef.current = 5;\r\n      selectThresholdHRef.current = 5;\r\n    }\r\n    document.addEventListener(\"mousemove\", handleMouseMoveRef.current!);\r\n    document.addEventListener(\"mouseup\", handleMouseUpRef.current!);\r\n  };\r\n\r\n  return {\r\n    selectRect,\r\n    isSelecting,\r\n    handleMouseDown,\r\n  };\r\n}"
        }
    ]
}