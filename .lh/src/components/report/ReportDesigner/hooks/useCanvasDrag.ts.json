{
    "sourceFile": "src/components/report/ReportDesigner/hooks/useCanvasDrag.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1747043014528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747043273300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useRef, useState } from \"react\";\r\n \r\n-import type { CanvasComponent } from \"./types\";\r\n-import { getSnapAndGuides } from \"./utils\";\r\n+import type { CanvasComponent } from \"../types\";\r\n+import { getSnapAndGuides } from \"../utils\";\r\n \r\n interface UseCanvasDragProps {\r\n   components: CanvasComponent[];\r\n   width: number;\r\n"
                },
                {
                    "date": 1747050026854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \r\n   // 画布内组件拖拽\r\n   const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n     setDraggingId(id);\r\n-    setDragOffset({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n+    setDragOffset({ x: COMPONENT_WIDTH / 2, y: COMPONENT_HEIGHT / 2 });\r\n   };\r\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n"
                },
                {
                    "date": 1747050037641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     onDrop(type, x, y);\r\n   };\r\n \r\n   // 画布内组件拖拽\r\n-  const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n+  const handleMouseDown = (id: string) => {\r\n     setDraggingId(id);\r\n     setDragOffset({ x: COMPONENT_WIDTH / 2, y: COMPONENT_HEIGHT / 2 });\r\n   };\r\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n"
                },
                {
                    "date": 1747050293807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,12 +57,11 @@\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n     if (!rect) return;\r\n-    const comp = components.find((c) => c.id === draggingId);\r\n-    if (!comp) return;\r\n-    const rawX = e.clientX - rect.left - RULER_SIZE - dragOffset.x;\r\n-    const rawY = e.clientY - rect.top - RULER_SIZE - dragOffset.y;\r\n+    // 鼠标始终居中\r\n+    const rawX = e.clientX - rect.left - RULER_SIZE - COMPONENT_WIDTH / 2;\r\n+    const rawY = e.clientY - rect.top - RULER_SIZE - COMPONENT_HEIGHT / 2;\r\n     const { snapX, snapY, guide } = getSnapAndGuides(\r\n       rawX,\r\n       rawY,\r\n       draggingId,\r\n"
                },
                {
                    "date": 1747050305846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,12 +26,8 @@\n   SNAP_THRESHOLD,\r\n   RULER_SIZE,\r\n }: UseCanvasDragProps) {\r\n   const [draggingId, setDraggingId] = useState<string | null>(null);\r\n-  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\r\n-    x: 0,\r\n-    y: 0,\r\n-  });\r\n   const [guideLines, setGuideLines] = useState<{\r\n     x?: number;\r\n     y?: number;\r\n   } | null>(null);\r\n@@ -51,9 +47,8 @@\n \r\n   // 画布内组件拖拽\r\n   const handleMouseDown = (id: string) => {\r\n     setDraggingId(id);\r\n-    setDragOffset({ x: COMPONENT_WIDTH / 2, y: COMPONENT_HEIGHT / 2 });\r\n   };\r\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n"
                },
                {
                    "date": 1747050517675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,12 @@\n   SNAP_THRESHOLD,\r\n   RULER_SIZE,\r\n }: UseCanvasDragProps) {\r\n   const [draggingId, setDraggingId] = useState<string | null>(null);\r\n+  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\r\n+    x: 0,\r\n+    y: 0,\r\n+  });\r\n   const [guideLines, setGuideLines] = useState<{\r\n     x?: number;\r\n     y?: number;\r\n   } | null>(null);\r\n@@ -45,18 +49,18 @@\n     onDrop(type, x, y);\r\n   };\r\n \r\n   // 画布内组件拖拽\r\n-  const handleMouseDown = (id: string) => {\r\n+  const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n     setDraggingId(id);\r\n+    setDragOffset({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n   };\r\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n     if (!rect) return;\r\n-    // 鼠标始终居中\r\n-    const rawX = e.clientX - rect.left - RULER_SIZE - COMPONENT_WIDTH / 2;\r\n-    const rawY = e.clientY - rect.top - RULER_SIZE - COMPONENT_HEIGHT / 2;\r\n+    const rawX = e.clientX - rect.left - RULER_SIZE - dragOffset.x;\r\n+    const rawY = e.clientY - rect.top - RULER_SIZE - dragOffset.y;\r\n     const { snapX, snapY, guide } = getSnapAndGuides(\r\n       rawX,\r\n       rawY,\r\n       draggingId,\r\n"
                },
                {
                    "date": 1747050645675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,14 @@\n \r\n   // 画布内组件拖拽\r\n   const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n     setDraggingId(id);\r\n-    setDragOffset({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n+    // offsetX/offsetY 容错，确保在组件范围内\r\n+    let x = e.nativeEvent.offsetX;\r\n+    let y = e.nativeEvent.offsetY;\r\n+    x = Math.max(0, Math.min(x, COMPONENT_WIDTH));\r\n+    y = Math.max(0, Math.min(y, COMPONENT_HEIGHT));\r\n+    setDragOffset({ x, y });\r\n   };\r\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const rect = canvasRef.current?.getBoundingClientRect();\r\n"
                },
                {
                    "date": 1747050721394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,21 +51,27 @@\n \r\n   // 画布内组件拖拽\r\n   const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n     setDraggingId(id);\r\n-    // offsetX/offsetY 容错，确保在组件范围内\r\n-    let x = e.nativeEvent.offsetX;\r\n-    let y = e.nativeEvent.offsetY;\r\n-    x = Math.max(0, Math.min(x, COMPONENT_WIDTH));\r\n-    y = Math.max(0, Math.min(y, COMPONENT_HEIGHT));\r\n-    setDragOffset({ x, y });\r\n+    // 用 getBoundingClientRect 精确计算鼠标在组件内的偏移\r\n+    const target = e.target as HTMLElement;\r\n+    const compRect = target.getBoundingClientRect();\r\n+    const mouseX = e.clientX;\r\n+    const mouseY = e.clientY;\r\n+    const offsetX = mouseX - compRect.left;\r\n+    const offsetY = mouseY - compRect.top;\r\n+    setDragOffset({ x: offsetX, y: offsetY });\r\n   };\r\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n-    const rect = canvasRef.current?.getBoundingClientRect();\r\n-    if (!rect) return;\r\n-    const rawX = e.clientX - rect.left - RULER_SIZE - dragOffset.x;\r\n-    const rawY = e.clientY - rect.top - RULER_SIZE - dragOffset.y;\r\n+    const canvasRect = canvasRef.current?.getBoundingClientRect();\r\n+    if (!canvasRect) return;\r\n+    // 鼠标在画布内的绝对坐标\r\n+    const mouseX = e.clientX - canvasRect.left - RULER_SIZE;\r\n+    const mouseY = e.clientY - canvasRect.top - RULER_SIZE;\r\n+    // 组件左上角 = 鼠标绝对坐标 - offset\r\n+    const rawX = mouseX - dragOffset.x;\r\n+    const rawY = mouseY - dragOffset.y;\r\n     const { snapX, snapY, guide } = getSnapAndGuides(\r\n       rawX,\r\n       rawY,\r\n       draggingId,\r\n"
                },
                {
                    "date": 1747050940060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n   };\r\n \r\n   // 画布内组件拖拽\r\n   const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n+    console.log(\"[drag] mousedown on id:\", id);\r\n     setDraggingId(id);\r\n     // 用 getBoundingClientRect 精确计算鼠标在组件内的偏移\r\n     const target = e.target as HTMLElement;\r\n     const compRect = target.getBoundingClientRect();\r\n@@ -70,8 +71,9 @@\n     const mouseY = e.clientY - canvasRect.top - RULER_SIZE;\r\n     // 组件左上角 = 鼠标绝对坐标 - offset\r\n     const rawX = mouseX - dragOffset.x;\r\n     const rawY = mouseY - dragOffset.y;\r\n+    console.log(\"[drag] move id:\", draggingId, \"to\", rawX, rawY);\r\n     const { snapX, snapY, guide } = getSnapAndGuides(\r\n       rawX,\r\n       rawY,\r\n       draggingId,\r\n"
                },
                {
                    "date": 1747051083482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,19 +49,28 @@\n     onDrop(type, x, y);\r\n   };\r\n \r\n   // 画布内组件拖拽\r\n-  const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n+  const handleMouseDown = (id: string, e: React.MouseEvent, ref?: React.RefObject<HTMLDivElement>) => {\r\n     console.log(\"[drag] mousedown on id:\", id);\r\n     setDraggingId(id);\r\n-    // 用 getBoundingClientRect 精确计算鼠标在组件内的偏移\r\n-    const target = e.target as HTMLElement;\r\n-    const compRect = target.getBoundingClientRect();\r\n-    const mouseX = e.clientX;\r\n-    const mouseY = e.clientY;\r\n-    const offsetX = mouseX - compRect.left;\r\n-    const offsetY = mouseY - compRect.top;\r\n-    setDragOffset({ x: offsetX, y: offsetY });\r\n+    if (ref && ref.current) {\r\n+      const rect = ref.current.getBoundingClientRect();\r\n+      const offsetX = e.clientX - rect.left;\r\n+      const offsetY = e.clientY - rect.top;\r\n+      setDragOffset({ x: offsetX, y: offsetY });\r\n+      console.log(\"[drag] offset:\", offsetX, offsetY);\r\n+    } else {\r\n+      // fallback\r\n+      const target = e.target as HTMLElement;\r\n+      const compRect = target.getBoundingClientRect();\r\n+      const mouseX = e.clientX;\r\n+      const mouseY = e.clientY;\r\n+      const offsetX = mouseX - compRect.left;\r\n+      const offsetY = mouseY - compRect.top;\r\n+      setDragOffset({ x: offsetX, y: offsetY });\r\n+      console.log(\"[drag] fallback offset:\", offsetX, offsetY);\r\n+    }\r\n   };\r\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const canvasRect = canvasRef.current?.getBoundingClientRect();\r\n"
                },
                {
                    "date": 1747051107704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,13 @@\n     onDrop(type, x, y);\r\n   };\r\n \r\n   // 画布内组件拖拽\r\n-  const handleMouseDown = (id: string, e: React.MouseEvent, ref?: React.RefObject<HTMLDivElement>) => {\r\n+  const handleMouseDown = (\r\n+    id: string,\r\n+    e: React.MouseEvent,\r\n+    ref?: React.RefObject<HTMLDivElement>\r\n+  ) => {\r\n     console.log(\"[drag] mousedown on id:\", id);\r\n     setDraggingId(id);\r\n     if (ref && ref.current) {\r\n       const rect = ref.current.getBoundingClientRect();\r\n"
                },
                {
                    "date": 1747051189332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,25 +56,32 @@\n     ref?: React.RefObject<HTMLDivElement>\r\n   ) => {\r\n     console.log(\"[drag] mousedown on id:\", id);\r\n     setDraggingId(id);\r\n-    if (ref && ref.current) {\r\n-      const rect = ref.current.getBoundingClientRect();\r\n-      const offsetX = e.clientX - rect.left;\r\n-      const offsetY = e.clientY - rect.top;\r\n+    if (ref && ref.current && canvasRef.current) {\r\n+      const canvasRect = canvasRef.current.getBoundingClientRect();\r\n+      const compRect = ref.current.getBoundingClientRect();\r\n+      // 鼠标在画布内容区的坐标\r\n+      const mouseX = e.clientX - canvasRect.left - RULER_SIZE;\r\n+      const mouseY = e.clientY - canvasRect.top - RULER_SIZE;\r\n+      // 组件左上角在内容区的坐标\r\n+      const compX = compRect.left - canvasRect.left - RULER_SIZE;\r\n+      const compY = compRect.top - canvasRect.top - RULER_SIZE;\r\n+      const offsetX = mouseX - compX;\r\n+      const offsetY = mouseY - compY;\r\n       setDragOffset({ x: offsetX, y: offsetY });\r\n-      console.log(\"[drag] offset:\", offsetX, offsetY);\r\n-    } else {\r\n-      // fallback\r\n-      const target = e.target as HTMLElement;\r\n-      const compRect = target.getBoundingClientRect();\r\n-      const mouseX = e.clientX;\r\n-      const mouseY = e.clientY;\r\n-      const offsetX = mouseX - compRect.left;\r\n-      const offsetY = mouseY - compRect.top;\r\n-      setDragOffset({ x: offsetX, y: offsetY });\r\n-      console.log(\"[drag] fallback offset:\", offsetX, offsetY);\r\n+      console.log(\"[drag] offset (with ruler):\", offsetX, offsetY);\r\n+      return;\r\n     }\r\n+    // fallback\r\n+    const target = e.target as HTMLElement;\r\n+    const compRect = target.getBoundingClientRect();\r\n+    const mouseX = e.clientX;\r\n+    const mouseY = e.clientY;\r\n+    const offsetX = mouseX - compRect.left;\r\n+    const offsetY = mouseY - compRect.top;\r\n+    setDragOffset({ x: offsetX, y: offsetY });\r\n+    console.log(\"[drag] fallback offset:\", offsetX, offsetY);\r\n   };\r\n   const handleMouseMove = (e: React.MouseEvent) => {\r\n     if (!draggingId) return;\r\n     const canvasRect = canvasRef.current?.getBoundingClientRect();\r\n"
                },
                {
                    "date": 1747051707412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,22 +92,24 @@\n     // 组件左上角 = 鼠标绝对坐标 - offset\n     const rawX = mouseX - dragOffset.x;\n     const rawY = mouseY - dragOffset.y;\n     console.log(\"[drag] move id:\", draggingId, \"to\", rawX, rawY);\n-    const { snapX, snapY, guide } = getSnapAndGuides(\n-      rawX,\n-      rawY,\n-      draggingId,\n-      components,\n-      width,\n-      height,\n-      SNAP_THRESHOLD,\n-      COMPONENT_WIDTH,\n-      COMPONENT_HEIGHT,\n-      RULER_SIZE\n-    );\n-    setGuideLines(guide);\n-    onComponentMove(draggingId, snapX, snapY);\n+    // const { snapX, snapY, guide } = getSnapAndGuides(\n+    //   rawX,\n+    //   rawY,\n+    //   draggingId,\n+    //   components,\n+    //   width,\n+    //   height,\n+    //   SNAP_THRESHOLD,\n+    //   COMPONENT_WIDTH,\n+    //   COMPONENT_HEIGHT,\n+    //   RULER_SIZE\n+    // );\n+    // setGuideLines(guide);\n+    // onComponentMove(draggingId, snapX, snapY);\n+    setGuideLines(null);\n+    onComponentMove(draggingId, rawX, rawY);\n   };\n   const handleMouseUp = () => {\n     setDraggingId(null);\n     setGuideLines(null);\n"
                },
                {
                    "date": 1747052034747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,18 +49,22 @@\n     onDrop(type, x, y);\n   };\n \n   // 画布内组件拖拽\n-  const handleMouseDown = (\n-    id: string,\n-    e: React.MouseEvent,\n-    ref?: React.RefObject<HTMLDivElement>\n-  ) => {\n+  const handleMouseDown = (id: string, e: React.MouseEvent, domOrRef?: HTMLDivElement | React.RefObject<HTMLDivElement>) => {\n     console.log(\"[drag] mousedown on id:\", id);\n     setDraggingId(id);\n-    if (ref && ref.current && canvasRef.current) {\n+    let dom: HTMLDivElement | null = null;\n+    if (domOrRef) {\n+      if (typeof (domOrRef as any).current !== \"undefined\") {\n+        dom = (domOrRef as React.RefObject<HTMLDivElement>).current;\n+      } else {\n+        dom = domOrRef as HTMLDivElement;\n+      }\n+    }\n+    if (dom && canvasRef.current) {\n       const canvasRect = canvasRef.current.getBoundingClientRect();\n-      const compRect = ref.current.getBoundingClientRect();\n+      const compRect = dom.getBoundingClientRect();\n       // 鼠标在画布内容区的坐标\n       const mouseX = e.clientX - canvasRect.left - RULER_SIZE;\n       const mouseY = e.clientY - canvasRect.top - RULER_SIZE;\n       // 组件左上角在内容区的坐标\n"
                },
                {
                    "date": 1747052139676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   COMPONENT_WIDTH: number;\n   COMPONENT_HEIGHT: number;\n   SNAP_THRESHOLD: number;\n   RULER_SIZE: number;\n+  contentRef: React.RefObject<HTMLDivElement>;\n }\n \n export function useCanvasDrag({\n   components,\n@@ -24,8 +25,9 @@\n   COMPONENT_WIDTH,\n   COMPONENT_HEIGHT,\n   SNAP_THRESHOLD,\n   RULER_SIZE,\n+  contentRef,\n }: UseCanvasDragProps) {\n   const [draggingId, setDraggingId] = useState<string | null>(null);\n   const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\n     x: 0,\n@@ -64,21 +66,21 @@\n       } else {\n         dom = domOrRef as HTMLDivElement;\n       }\n     }\n-    if (dom && canvasRef.current) {\n-      const canvasRect = canvasRef.current.getBoundingClientRect();\n+    if (dom && contentRef.current) {\n+      const contentRect = contentRef.current.getBoundingClientRect();\n       const compRect = dom.getBoundingClientRect();\n-      // 鼠标在画布内容区的坐标\n-      const mouseX = e.clientX - canvasRect.left - RULER_SIZE;\n-      const mouseY = e.clientY - canvasRect.top - RULER_SIZE;\n+      // 鼠标在内容区的坐标\n+      const mouseX = e.clientX - contentRect.left;\n+      const mouseY = e.clientY - contentRect.top;\n       // 组件左上角在内容区的坐标\n-      const compX = compRect.left - canvasRect.left - RULER_SIZE;\n-      const compY = compRect.top - canvasRect.top - RULER_SIZE;\n+      const compX = compRect.left - contentRect.left;\n+      const compY = compRect.top - contentRect.top;\n       const offsetX = mouseX - compX;\n       const offsetY = mouseY - compY;\n       setDragOffset({ x: offsetX, y: offsetY });\n-      console.log(\"[drag] offset (with ruler):\", offsetX, offsetY);\n+      console.log(\"[drag] offset (contentRef):\", offsetX, offsetY);\n       return;\n     }\n     // fallback\n     const target = e.target as HTMLElement;\n@@ -91,31 +93,17 @@\n     console.log(\"[drag] fallback offset:\", offsetX, offsetY);\n   };\n   const handleMouseMove = (e: React.MouseEvent) => {\n     if (!draggingId) return;\n-    const canvasRect = canvasRef.current?.getBoundingClientRect();\n-    if (!canvasRect) return;\n-    // 鼠标在画布内的绝对坐标\n-    const mouseX = e.clientX - canvasRect.left - RULER_SIZE;\n-    const mouseY = e.clientY - canvasRect.top - RULER_SIZE;\n+    if (!contentRef.current) return;\n+    const contentRect = contentRef.current.getBoundingClientRect();\n+    // 鼠标在内容区的绝对坐标\n+    const mouseX = e.clientX - contentRect.left;\n+    const mouseY = e.clientY - contentRect.top;\n     // 组件左上角 = 鼠标绝对坐标 - offset\n     const rawX = mouseX - dragOffset.x;\n     const rawY = mouseY - dragOffset.y;\n     console.log(\"[drag] move id:\", draggingId, \"to\", rawX, rawY);\n-    // const { snapX, snapY, guide } = getSnapAndGuides(\n-    //   rawX,\n-    //   rawY,\n-    //   draggingId,\n-    //   components,\n-    //   width,\n-    //   height,\n-    //   SNAP_THRESHOLD,\n-    //   COMPONENT_WIDTH,\n-    //   COMPONENT_HEIGHT,\n-    //   RULER_SIZE\n-    // );\n-    // setGuideLines(guide);\n-    // onComponentMove(draggingId, snapX, snapY);\n     setGuideLines(null);\n     onComponentMove(draggingId, rawX, rawY);\n   };\n   const handleMouseUp = () => {\n"
                },
                {
                    "date": 1747052161891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,61 +1,65 @@\n-import { useRef, useState } from \"react\";\r\n-\r\n-import type { CanvasComponent } from \"../types\";\r\n-import { getSnapAndGuides } from \"../utils\";\r\n-\r\n-interface UseCanvasDragProps {\r\n-  components: CanvasComponent[];\r\n-  width: number;\r\n-  height: number;\r\n-  onDrop: (type: string, x: number, y: number) => void;\r\n-  onComponentMove: (id: string, x: number, y: number) => void;\r\n-  COMPONENT_WIDTH: number;\r\n-  COMPONENT_HEIGHT: number;\r\n-  SNAP_THRESHOLD: number;\r\n-  RULER_SIZE: number;\r\n+import { useRef, useState } from \"react\";\n+\n+import type { CanvasComponent } from \"../types\";\n+import { getSnapAndGuides } from \"../utils\";\n+\n+interface UseCanvasDragProps {\n+  components: CanvasComponent[];\n+  width: number;\n+  height: number;\n+  onDrop: (type: string, x: number, y: number) => void;\n+  onComponentMove: (id: string, x: number, y: number) => void;\n+  COMPONENT_WIDTH: number;\n+  COMPONENT_HEIGHT: number;\n+  SNAP_THRESHOLD: number;\n+  RULER_SIZE: number;\n   contentRef: React.RefObject<HTMLDivElement>;\n-}\r\n-\r\n-export function useCanvasDrag({\r\n-  components,\r\n-  width,\r\n-  height,\r\n-  onDrop,\r\n-  onComponentMove,\r\n-  COMPONENT_WIDTH,\r\n-  COMPONENT_HEIGHT,\r\n-  SNAP_THRESHOLD,\r\n-  RULER_SIZE,\r\n+}\n+\n+export function useCanvasDrag({\n+  components,\n+  width,\n+  height,\n+  onDrop,\n+  onComponentMove,\n+  COMPONENT_WIDTH,\n+  COMPONENT_HEIGHT,\n+  SNAP_THRESHOLD,\n+  RULER_SIZE,\n   contentRef,\n-}: UseCanvasDragProps) {\r\n-  const [draggingId, setDraggingId] = useState<string | null>(null);\r\n-  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\r\n-    x: 0,\r\n-    y: 0,\r\n-  });\r\n-  const [guideLines, setGuideLines] = useState<{\r\n-    x?: number;\r\n-    y?: number;\r\n-  } | null>(null);\r\n-  const canvasRef = useRef<HTMLDivElement>(null);\r\n-\r\n-  // 拖拽新组件到画布\r\n-  const handleDrop = (e: React.DragEvent) => {\r\n-    e.preventDefault();\r\n-    const type = e.dataTransfer.getData(\"type\");\r\n-    if (!type) return;\r\n-    const rect = canvasRef.current?.getBoundingClientRect();\r\n-    if (!rect) return;\r\n-    const x = e.clientX - rect.left - RULER_SIZE - COMPONENT_WIDTH / 2;\r\n-    const y = e.clientY - rect.top - RULER_SIZE - COMPONENT_HEIGHT / 2;\r\n-    onDrop(type, x, y);\r\n-  };\r\n-\r\n-  // 画布内组件拖拽\r\n-  const handleMouseDown = (id: string, e: React.MouseEvent, domOrRef?: HTMLDivElement | React.RefObject<HTMLDivElement>) => {\n-    console.log(\"[drag] mousedown on id:\", id);\r\n-    setDraggingId(id);\r\n+}: UseCanvasDragProps) {\n+  const [draggingId, setDraggingId] = useState<string | null>(null);\n+  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\n+    x: 0,\n+    y: 0,\n+  });\n+  const [guideLines, setGuideLines] = useState<{\n+    x?: number;\n+    y?: number;\n+  } | null>(null);\n+  const canvasRef = useRef<HTMLDivElement>(null);\n+\n+  // 拖拽新组件到画布\n+  const handleDrop = (e: React.DragEvent) => {\n+    e.preventDefault();\n+    const type = e.dataTransfer.getData(\"type\");\n+    if (!type) return;\n+    const rect = canvasRef.current?.getBoundingClientRect();\n+    if (!rect) return;\n+    const x = e.clientX - rect.left - RULER_SIZE - COMPONENT_WIDTH / 2;\n+    const y = e.clientY - rect.top - RULER_SIZE - COMPONENT_HEIGHT / 2;\n+    onDrop(type, x, y);\n+  };\n+\n+  // 画布内组件拖拽\n+  const handleMouseDown = (\n+    id: string,\n+    e: React.MouseEvent,\n+    domOrRef?: HTMLDivElement | React.RefObject<HTMLDivElement>\n+  ) => {\n+    console.log(\"[drag] mousedown on id:\", id);\n+    setDraggingId(id);\n     let dom: HTMLDivElement | null = null;\n     if (domOrRef) {\n       if (typeof (domOrRef as any).current !== \"undefined\") {\n         dom = (domOrRef as React.RefObject<HTMLDivElement>).current;\n@@ -68,51 +72,51 @@\n       const compRect = dom.getBoundingClientRect();\n       // 鼠标在内容区的坐标\n       const mouseX = e.clientX - contentRect.left;\n       const mouseY = e.clientY - contentRect.top;\n-      // 组件左上角在内容区的坐标\r\n+      // 组件左上角在内容区的坐标\n       const compX = compRect.left - contentRect.left;\n       const compY = compRect.top - contentRect.top;\n-      const offsetX = mouseX - compX;\r\n-      const offsetY = mouseY - compY;\r\n-      setDragOffset({ x: offsetX, y: offsetY });\r\n+      const offsetX = mouseX - compX;\n+      const offsetY = mouseY - compY;\n+      setDragOffset({ x: offsetX, y: offsetY });\n       console.log(\"[drag] offset (contentRef):\", offsetX, offsetY);\n-      return;\r\n-    }\r\n-    // fallback\r\n-    const target = e.target as HTMLElement;\r\n-    const compRect = target.getBoundingClientRect();\r\n-    const mouseX = e.clientX;\r\n-    const mouseY = e.clientY;\r\n-    const offsetX = mouseX - compRect.left;\r\n-    const offsetY = mouseY - compRect.top;\r\n-    setDragOffset({ x: offsetX, y: offsetY });\r\n-    console.log(\"[drag] fallback offset:\", offsetX, offsetY);\r\n-  };\r\n-  const handleMouseMove = (e: React.MouseEvent) => {\r\n-    if (!draggingId) return;\r\n+      return;\n+    }\n+    // fallback\n+    const target = e.target as HTMLElement;\n+    const compRect = target.getBoundingClientRect();\n+    const mouseX = e.clientX;\n+    const mouseY = e.clientY;\n+    const offsetX = mouseX - compRect.left;\n+    const offsetY = mouseY - compRect.top;\n+    setDragOffset({ x: offsetX, y: offsetY });\n+    console.log(\"[drag] fallback offset:\", offsetX, offsetY);\n+  };\n+  const handleMouseMove = (e: React.MouseEvent) => {\n+    if (!draggingId) return;\n     if (!contentRef.current) return;\n     const contentRect = contentRef.current.getBoundingClientRect();\n     // 鼠标在内容区的绝对坐标\n     const mouseX = e.clientX - contentRect.left;\n     const mouseY = e.clientY - contentRect.top;\n-    // 组件左上角 = 鼠标绝对坐标 - offset\r\n-    const rawX = mouseX - dragOffset.x;\r\n-    const rawY = mouseY - dragOffset.y;\r\n-    console.log(\"[drag] move id:\", draggingId, \"to\", rawX, rawY);\r\n+    // 组件左上角 = 鼠标绝对坐标 - offset\n+    const rawX = mouseX - dragOffset.x;\n+    const rawY = mouseY - dragOffset.y;\n+    console.log(\"[drag] move id:\", draggingId, \"to\", rawX, rawY);\n     setGuideLines(null);\n     onComponentMove(draggingId, rawX, rawY);\n-  };\r\n-  const handleMouseUp = () => {\r\n-    setDraggingId(null);\r\n-    setGuideLines(null);\r\n-  };\r\n-\r\n-  return {\r\n-    canvasRef,\r\n-    guideLines,\r\n-    handleDrop,\r\n-    handleMouseDown,\r\n-    handleMouseMove,\r\n-    handleMouseUp,\r\n-  };\r\n-}\r\n+  };\n+  const handleMouseUp = () => {\n+    setDraggingId(null);\n+    setGuideLines(null);\n+  };\n+\n+  return {\n+    canvasRef,\n+    guideLines,\n+    handleDrop,\n+    handleMouseDown,\n+    handleMouseMove,\n+    handleMouseUp,\n+  };\n+}\n"
                },
                {
                    "date": 1747052185948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,8 @@\n     id: string,\n     e: React.MouseEvent,\n     domOrRef?: HTMLDivElement | React.RefObject<HTMLDivElement>\n   ) => {\n-    console.log(\"[drag] mousedown on id:\", id);\n     setDraggingId(id);\n     let dom: HTMLDivElement | null = null;\n     if (domOrRef) {\n       if (typeof (domOrRef as any).current !== \"undefined\") {\n"
                },
                {
                    "date": 1747052212337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,8 @@\n     const mouseY = e.clientY;\n     const offsetX = mouseX - compRect.left;\n     const offsetY = mouseY - compRect.top;\n     setDragOffset({ x: offsetX, y: offsetY });\n-    console.log(\"[drag] fallback offset:\", offsetX, offsetY);\n   };\n   const handleMouseMove = (e: React.MouseEvent) => {\n     if (!draggingId) return;\n     if (!contentRef.current) return;\n"
                },
                {
                    "date": 1747052223063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,8 @@\n       const compY = compRect.top - contentRect.top;\n       const offsetX = mouseX - compX;\n       const offsetY = mouseY - compY;\n       setDragOffset({ x: offsetX, y: offsetY });\n-      console.log(\"[drag] offset (contentRef):\", offsetX, offsetY);\n       return;\n     }\n     // fallback\n     const target = e.target as HTMLElement;\n"
                },
                {
                    "date": 1747052381948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,12 +96,19 @@\n     // 鼠标在内容区的绝对坐标\n     const mouseX = e.clientX - contentRect.left;\n     const mouseY = e.clientY - contentRect.top;\n     // 组件左上角 = 鼠标绝对坐标 - offset\n-    const rawX = mouseX - dragOffset.x;\n-    const rawY = mouseY - dragOffset.y;\n+    let rawX = mouseX - dragOffset.x;\n+    let rawY = mouseY - dragOffset.y;\n+    // 边界裁剪\n+    const contentWidth = contentRef.current.offsetWidth;\n+    const contentHeight = contentRef.current.offsetHeight;\n+    const maxX = contentWidth - COMPONENT_WIDTH;\n+    const maxY = contentHeight - COMPONENT_HEIGHT;\n+    const clampedX = Math.max(0, Math.min(rawX, maxX));\n+    const clampedY = Math.max(0, Math.min(rawY, maxY));\n     setGuideLines(null);\n-    onComponentMove(draggingId, rawX, rawY);\n+    onComponentMove(draggingId, clampedX, clampedY);\n   };\n   const handleMouseUp = () => {\n     setDraggingId(null);\n     setGuideLines(null);\n"
                },
                {
                    "date": 1747052708551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,18 +96,31 @@\n     // 鼠标在内容区的绝对坐标\n     const mouseX = e.clientX - contentRect.left;\n     const mouseY = e.clientY - contentRect.top;\n     // 组件左上角 = 鼠标绝对坐标 - offset\n-    let rawX = mouseX - dragOffset.x;\n-    let rawY = mouseY - dragOffset.y;\n-    // 边界裁剪\n+    const rawX = mouseX - dragOffset.x;\n+    const rawY = mouseY - dragOffset.y;\n+    // 吸附逻辑\n     const contentWidth = contentRef.current.offsetWidth;\n     const contentHeight = contentRef.current.offsetHeight;\n+    const { snapX, snapY, guide } = getSnapAndGuides(\n+      rawX,\n+      rawY,\n+      draggingId,\n+      components,\n+      contentWidth,\n+      contentHeight,\n+      SNAP_THRESHOLD,\n+      COMPONENT_WIDTH,\n+      COMPONENT_HEIGHT,\n+      0 // 内容区内坐标，RULER_SIZE=0\n+    );\n+    setGuideLines(guide);\n+    // 边界裁剪\n     const maxX = contentWidth - COMPONENT_WIDTH;\n     const maxY = contentHeight - COMPONENT_HEIGHT;\n-    const clampedX = Math.max(0, Math.min(rawX, maxX));\n-    const clampedY = Math.max(0, Math.min(rawY, maxY));\n-    setGuideLines(null);\n+    const clampedX = Math.max(0, Math.min(snapX, maxX));\n+    const clampedY = Math.max(0, Math.min(snapY, maxY));\n     onComponentMove(draggingId, clampedX, clampedY);\n   };\n   const handleMouseUp = () => {\n     setDraggingId(null);\n"
                }
            ],
            "date": 1747043014528,
            "name": "Commit-0",
            "content": "import { useRef, useState } from \"react\";\r\n\r\nimport type { CanvasComponent } from \"./types\";\r\nimport { getSnapAndGuides } from \"./utils\";\r\n\r\ninterface UseCanvasDragProps {\r\n  components: CanvasComponent[];\r\n  width: number;\r\n  height: number;\r\n  onDrop: (type: string, x: number, y: number) => void;\r\n  onComponentMove: (id: string, x: number, y: number) => void;\r\n  COMPONENT_WIDTH: number;\r\n  COMPONENT_HEIGHT: number;\r\n  SNAP_THRESHOLD: number;\r\n  RULER_SIZE: number;\r\n}\r\n\r\nexport function useCanvasDrag({\r\n  components,\r\n  width,\r\n  height,\r\n  onDrop,\r\n  onComponentMove,\r\n  COMPONENT_WIDTH,\r\n  COMPONENT_HEIGHT,\r\n  SNAP_THRESHOLD,\r\n  RULER_SIZE,\r\n}: UseCanvasDragProps) {\r\n  const [draggingId, setDraggingId] = useState<string | null>(null);\r\n  const [dragOffset, setDragOffset] = useState<{ x: number; y: number }>({\r\n    x: 0,\r\n    y: 0,\r\n  });\r\n  const [guideLines, setGuideLines] = useState<{\r\n    x?: number;\r\n    y?: number;\r\n  } | null>(null);\r\n  const canvasRef = useRef<HTMLDivElement>(null);\r\n\r\n  // 拖拽新组件到画布\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    const type = e.dataTransfer.getData(\"type\");\r\n    if (!type) return;\r\n    const rect = canvasRef.current?.getBoundingClientRect();\r\n    if (!rect) return;\r\n    const x = e.clientX - rect.left - RULER_SIZE - COMPONENT_WIDTH / 2;\r\n    const y = e.clientY - rect.top - RULER_SIZE - COMPONENT_HEIGHT / 2;\r\n    onDrop(type, x, y);\r\n  };\r\n\r\n  // 画布内组件拖拽\r\n  const handleMouseDown = (id: string, e: React.MouseEvent) => {\r\n    setDraggingId(id);\r\n    setDragOffset({ x: e.nativeEvent.offsetX, y: e.nativeEvent.offsetY });\r\n  };\r\n  const handleMouseMove = (e: React.MouseEvent) => {\r\n    if (!draggingId) return;\r\n    const rect = canvasRef.current?.getBoundingClientRect();\r\n    if (!rect) return;\r\n    const comp = components.find((c) => c.id === draggingId);\r\n    if (!comp) return;\r\n    const rawX = e.clientX - rect.left - RULER_SIZE - dragOffset.x;\r\n    const rawY = e.clientY - rect.top - RULER_SIZE - dragOffset.y;\r\n    const { snapX, snapY, guide } = getSnapAndGuides(\r\n      rawX,\r\n      rawY,\r\n      draggingId,\r\n      components,\r\n      width,\r\n      height,\r\n      SNAP_THRESHOLD,\r\n      COMPONENT_WIDTH,\r\n      COMPONENT_HEIGHT,\r\n      RULER_SIZE\r\n    );\r\n    setGuideLines(guide);\r\n    onComponentMove(draggingId, snapX, snapY);\r\n  };\r\n  const handleMouseUp = () => {\r\n    setDraggingId(null);\r\n    setGuideLines(null);\r\n  };\r\n\r\n  return {\r\n    canvasRef,\r\n    guideLines,\r\n    handleDrop,\r\n    handleMouseDown,\r\n    handleMouseMove,\r\n    handleMouseUp,\r\n  };\r\n}\r\n"
        }
    ]
}